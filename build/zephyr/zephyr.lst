
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	1868      	l32i.n	a6, a8, 4
4008019a:	4008      	l32i.n	a0, a0, 16

4008019c <_c_handler_imm2>:
4008019c:	0819a4        	lsi	f10, a9, 32
4008019f:	40          	.byte 0x40

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	19f8      	l32i.n	a15, a9, 4
400801da:	4008      	l32i.n	a0, a0, 16

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	081a74        	lsi	f7, a10, 32
4008021b:	40          	.byte 0x40

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	1ad8      	l32i.n	a13, a10, 4
4008025a:	4008      	l32i.n	a0, a0, 16

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	081b30        	lsx	f1, a11, a3
4008029b:	40          	.byte 0x40

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	1b48      	l32i.n	a4, a11, 4
400802da:	4008      	l32i.n	a0, a0, 16

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	016606        	j	4008089c <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	015246        	j	4008089c <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080550 <__start-0x2e8>:
40080550:	080000        	lsx	f0, a0, a0
40080553:	0c8040        	lsi	f4, a0, 48
40080556:	3ffb      	addi.n	a3, a15, 15
40080558:	06a8      	l32i.n	a10, a6, 0
4008055a:	3ffb      	addi.n	a3, a15, 15
4008055c:	808c      	beqz.n	a0, 40080568 <_iram_text_start+0x18>
4008055e:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080561:	3ff5f0        	f64cmph	a15, a5, a15, 3
40080564:	ff          	.byte 0xff
40080565:	bf          	.byte 0xbf
40080566:	ff          	.byte 0xff
40080567:	ff          	.byte 0xff
40080568:	040023        	lsi	f2, a0, 16
4008056b:	003000        	rfe
4008056e:	d83ff0        	lsi	f15, a15, 0x360
40080571:	fb0a      	add.n	a15, a11, a0
40080573:	3f          	.byte 0x3f
40080574:	02b8      	l32i.n	a11, a2, 0
40080576:	3ffb      	addi.n	a3, a15, 15
40080578:	02bb      	addi.n	a0, a2, 11
4008057a:	3ffb      	addi.n	a3, a15, 15
4008057c:	bf          	.byte 0xbf
4008057d:	3ffb02        	s32ri	a0, a11, 252
40080580:	fb02e7        	bnone	a2, a14, 4008057f <_iram_text_start+0x2f>
40080583:	3f          	.byte 0x3f
40080584:	001a00        	movsp	a0, a10
40080587:	02ee00        	andb	b14, b14, b0
4008058a:	3ffb      	addi.n	a3, a15, 15
4008058c:	fb02f7        	bnone	a2, a15, 4008058b <_iram_text_start+0x3b>
4008058f:	3f          	.byte 0x3f
40080590:	fb0300        	f64addc	a0, a3, 0, 0
40080593:	3f          	.byte 0x3f
40080594:	fb0306        	j	4007f1a4 <esp32_rom_gpio_matrix_out+0x75298>
40080597:	3f          	.byte 0x3f
40080598:	030c      	movi.n	a3, 0
4008059a:	3ffb      	addi.n	a3, a15, 15
4008059c:	032b      	addi.n	a0, a3, 2
4008059e:	3ffb      	addi.n	a3, a15, 15
400805a0:	fb0361        	l32r	a6, 4007f1ac <esp32_rom_gpio_matrix_out+0x752a0>
400805a3:	3f          	.byte 0x3f
400805a4:	fb0397        	bnone	a3, a9, 400805a3 <_iram_text_start+0x53>
400805a7:	3f          	.byte 0x3f
400805a8:	03ad      	mov.n	a10, a3
400805aa:	3ffb      	addi.n	a3, a15, 15
400805ac:	fb03d6        	bgez	a3, 40080560 <_iram_text_start+0x10>
400805af:	3f          	.byte 0x3f
400805b0:	fb0403        	lsi	f0, a4, 0x3ec
400805b3:	3f          	.byte 0x3f
400805b4:	042d      	mov.n	a2, a4
400805b6:	3ffb      	addi.n	a3, a15, 15
400805b8:	fb0454        	lsi	f5, a4, 0x3ec
400805bb:	3f          	.byte 0x3f
400805bc:	fb0497        	bnone	a4, a9, 400805bb <_iram_text_start+0x6b>
400805bf:	3f          	.byte 0x3f
400805c0:	ce          	.byte 0xce
400805c1:	3ffb04        	lsi	f0, a11, 252
400805c4:	04eb      	addi.n	a0, a4, 14
400805c6:	3ffb      	addi.n	a3, a15, 15
400805c8:	04fb      	addi.n	a0, a4, 15
400805ca:	3ffb      	addi.n	a3, a15, 15
400805cc:	fb0507        	bnone	a5, a0, 400805cb <_iram_text_start+0x7b>
400805cf:	3f          	.byte 0x3f
400805d0:	000000        	ill
400805d3:	3e          	.byte 0x3e
400805d4:	fb0520        	f64addc	a2, a5, 0, 0
400805d7:	3f          	.byte 0x3f
400805d8:	0009c4        	lsi	f12, a9, 0
400805db:	ffff00        	f64cmph	a15, a15, a0, 15
400805de:	ff          	.byte 0xff
400805df:	ff          	.byte 0xff
400805e0:	0808e4        	lsi	f14, a8, 32
400805e3:	0c8040        	lsi	f4, a0, 48
400805e6:	3ffb      	addi.n	a3, a15, 15
400805e8:	06a8      	l32i.n	a10, a6, 0
400805ea:	3ffb      	addi.n	a3, a15, 15
400805ec:	096c      	movi.n	a9, -32
400805ee:	4008      	l32i.n	a0, a0, 16
400805f0:	fb1280        	f64addc	a8, a2, 0, 1
400805f3:	3f          	.byte 0x3f
400805f4:	0768      	l32i.n	a6, a7, 0
400805f6:	3ffb      	addi.n	a3, a15, 15
400805f8:	053c      	movi.n	a5, 48
400805fa:	3ffb      	addi.n	a3, a15, 15
400805fc:	fb00c0        	f64addc	a12, a0, 0, 0
400805ff:	3f          	.byte 0x3f
40080600:	080c64        	lsi	f6, a12, 32
40080603:	7fff40        	f64cmph	a15, a15, a4, 7
40080606:	ff0000        	f64cmph	a0, a0, a0, 15
40080609:	ff          	.byte 0xff
4008060a:	000003        	lsi	f0, a0, 0
4008060d:	000000        	ill
40080610:	009200        	all4	b0, b0:b1:b2:b3
40080613:	054d40        	extui	a4, a4, 29, 1
40080616:	3ffb      	addi.n	a3, a15, 15
40080618:	fb0a70        	f64addc	a7, a10, 0, 0
4008061b:	3f          	.byte 0x3f
4008061c:	1238      	l32i.n	a3, a2, 4
4008061e:	4008      	l32i.n	a0, a0, 16
40080620:	0178      	l32i.n	a7, a1, 0
40080622:	3ffb      	addi.n	a3, a15, 15
40080624:	f48070        	extui	a8, a7, 0, 16
40080627:	3f          	.byte 0x3f
40080628:	fb0170        	f64addc	a7, a1, 0, 0
4008062b:	3f          	.byte 0x3f
4008062c:	c4b400        	extui	a11, a0, 4, 13
4008062f:	600004        	lsi	f0, a0, 0x180
40080632:	043ff6        	bgeui	a15, 3, 4008063a <_iram_text_start+0xea>
40080635:	3ff660        	f64cmph	a15, a6, a6, 3
40080638:	ff          	.byte 0xff
40080639:	ff          	.byte 0xff
4008063a:	ff          	.byte 0xff
4008063b:	8000e7        	bnone	a0, a14, 400805bf <_iram_text_start+0x6f>
4008063e:	bf3ff4        	lsi	f15, a15, 0x2fc
40080641:	fbfa      	add.n	a15, a11, a15
40080643:	ff          	.byte 0xff
40080644:	807c      	movi.n	a0, -8
40080646:	ff3ff4        	lsi	f15, a15, 0x3fc
40080649:	ffffc7        	bbsi	a15, 28, 4008064c <_iram_text_start+0xfc>
4008064c:	002000        	isync
4008064f:	055800        	extui	a5, a0, 24, 1
40080652:	3ffb      	addi.n	a3, a15, 15
40080654:	003c      	movi.n	a0, 48
40080656:	003ff0        	lsi	f15, a15, 0
40080659:	080000        	lsx	f0, a0, a0
4008065c:	6008      	l32i.n	a0, a0, 24
4008065e:	783ff6        	bgeui	a15, 3, 400806da <_iram_text_start+0x18a>
40080661:	400092        	l8ui	a9, a0, 64
40080664:	0041a4        	lsi	f10, a1, 0
40080667:	058340        	extui	a8, a4, 19, 1
4008066a:	3ffb      	addi.n	a3, a15, 15
4008066c:	f49000        	extui	a9, a0, 0, 16
4008066f:	3f          	.byte 0x3f
40080670:	000800        	lsi	f0, a8, 0
40080673:	700000        	lsi	f0, a0, 0x1c0
40080676:	760000        	lsi	f0, a0, 0x1d8
40080679:	3ffb05        	call0	400c062c <_iram_text_end+0x3c8fa>
4008067c:	f44000        	extui	a4, a0, 0, 16
4008067f:	3f          	.byte 0x3f
40080680:	fb0a74        	lsi	f7, a10, 0x3ec
40080683:	3f          	.byte 0x3f
40080684:	7619f1        	l32r	a15, 4005dee8 <esp32_rom_gpio_matrix_out+0x53fdc>
40080687:	5dc005        	call0	400de288 <_iram_text_end+0x5a556>
4008068a:	000000        	ill
4008068d:	000080        	ret
40080690:	bb0b      	addi.n	a11, a11, -1
40080692:	bf0002        	l8ui	a0, a0, 191
40080695:	005d      	mov.n	a5, a0
40080697:	186300        	lsxp	f6, a3, a0
4008069a:	4008      	l32i.n	a0, a0, 16
4008069c:	0fd8      	l32i.n	a13, a15, 0
4008069e:	4008      	l32i.n	a0, a0, 16
400806a0:	050020        	extui	a0, a2, 16, 1
400806a3:	000000        	ill
400806a6:	0008      	l32i.n	a0, a0, 0
400806a8:	100000        	and	a0, a0, a0
400806ab:	000000        	ill
400806ae:	500020        	lsi	f2, a0, 0x140
400806b1:	400804        	lsi	f0, a8, 0x100
400806b4:	400000        	ssr	a0
400806b7:	000000        	ill
400806ba:	000080        	ret
400806bd:	200000        	or	a0, a0, a0
400806c0:	408800        	lsi	f0, a8, 0x100
400806c3:	000000        	ill
400806c6:	000100        	lsi	f0, a1, 0
400806c9:	020000        	andb	b0, b0, b0
400806cc:	000000        	ill
400806cf:	000010        	lsi	f1, a0, 0
400806d2:	004000        	break	0, 0
400806d5:	030000        	rsr.lbeg	a0
400806d8:	010000        	slli	a0, a0, 32
400806db:	000000        	ill
400806de:	000400        	lsi	f0, a4, 0
400806e1:	800000        	add	a0, a0, a0
400806e4:	004000        	break	0, 0
400806e7:	100000        	and	a0, a0, a0
400806ea:	000000        	ill
400806ed:	000200        	lsi	f0, a2, 0
400806f0:	040000        	extui	a0, a0, 0, 1
400806f3:	300000        	xor	a0, a0, a0
400806f6:	d40000        	extui	a0, a0, 0, 14
400806f9:	3ffb00        	f64cmph	a15, a11, a0, 3
400806fc:	060000        	lsi	f0, a0, 24
400806ff:	102200        	and	a2, a2, a0
40080702:	0ffd      	mov.n	a15, a15
40080704:	7f          	.byte 0x7f
40080705:	fc1c      	movi.n	a12, 31
40080707:	ff          	.byte 0xff
40080708:	fb0050        	f64addc	a5, a0, 0, 0
4008070b:	3f          	.byte 0x3f
4008070c:	fb0040        	f64addc	a4, a0, 0, 0
4008070f:	3f          	.byte 0x3f
40080710:	057c      	movi.n	a5, -16
40080712:	3ffb      	addi.n	a3, a15, 15
40080714:	0c7c      	movi.n	a12, -16
40080716:	3ffb      	addi.n	a3, a15, 15
40080718:	681c      	movi.n	a8, 22
4008071a:	2c4000        	lsi	f0, a0, 176
4008071d:	3ff530        	f64cmph	a15, a5, a3, 3
40080720:	f53024        	lsi	f2, a0, 0x3d4
40080723:	3f          	.byte 0x3f
40080724:	3018      	l32i.n	a1, a0, 12
40080726:	ff3ff5        	call12	4007fb24 <esp32_rom_gpio_matrix_out+0x75c18>
40080729:	cf          	.byte 0xcf
4008072a:	ff          	.byte 0xff
4008072b:	ff          	.byte 0xff
4008072c:	301c      	movi.n	a0, 19
4008072e:	b56001        	l32r	a0, 4006dcb0 <esp32_rom_gpio_matrix_out+0x63da4>
40080731:	3ffb05        	call0	400c06e4 <_iram_text_end+0x3c9b2>
40080734:	fb02e7        	bnone	a2, a14, 40080733 <_iram_text_start+0x1e3>
40080737:	3f          	.byte 0x3f
40080738:	000a16        	beqz	a10, 4008073c <_iram_text_start+0x1ec>
4008073b:	9f0c00        	f64cmph	a0, a12, a0, 9
4008073e:	dc4000        	lsi	f0, a0, 0x370
40080741:	9e          	.byte 0x9e
40080742:	104000        	and	a4, a0, a0
40080745:	3ff530        	f64cmph	a15, a5, a3, 3
40080748:	f53004        	lsi	f0, a0, 0x3d4
4008074b:	3f          	.byte 0x3f
4008074c:	ff          	.byte 0xff
4008074d:	fffff7        	bbsi	a15, 31, 40080750 <_iram_text_start+0x200>
40080750:	fb01b4        	lsi	f11, a1, 0x3ec
40080753:	3f          	.byte 0x3f
40080754:	f53000        	extui	a3, a0, 16, 16
40080757:	3f          	.byte 0x3f
40080758:	3038      	l32i.n	a3, a0, 12
4008075a:	403ff5        	call12	400c0b58 <_iram_text_end+0x3ce26>
4008075d:	3ff530        	f64cmph	a15, a5, a3, 3
40080760:	f53044        	lsi	f4, a0, 0x3d4
40080763:	3f          	.byte 0x3f
40080764:	3048      	l32i.n	a4, a0, 12
40080766:	4c3ff5        	call12	400ccb64 <_iram_text_end+0x48e32>
40080769:	3ff530        	f64cmph	a15, a5, a3, 3
4008076c:	f53030        	extui	a3, a3, 16, 16
4008076f:	3f          	.byte 0x3f
40080770:	f53034        	lsi	f3, a0, 0x3d4
40080773:	3f          	.byte 0x3f
40080774:	300c      	movi.n	a0, 3
40080776:	403ff5        	call12	400c0b74 <_iram_text_end+0x3ce42>
40080779:	030d      	mov.n	a0, a3
4008077b:	302800        	xor	a2, a8, a0
4008077e:	e83ff5        	call12	40068b7c <esp32_rom_gpio_matrix_out+0x5ec70>
40080781:	000003        	lsi	f0, a0, 0
40080784:	f53020        	extui	a3, a2, 16, 16
40080787:	3f          	.byte 0x3f
40080788:	0f4240        	f64cmph	a4, a2, a4, 0
4008078b:	86a000        	lsi	f0, a0, 0x218
4008078e:	800001        	l32r	a0, 40060790 <esp32_rom_gpio_matrix_out+0x56884>
40080791:	061a      	add.n	a0, a6, a1
40080793:	e14000        	lsi	f0, a0, 0x384
40080796:	400033        	lsi	f3, a0, 0x100
40080799:	4c4b      	addi.n	a4, a12, 4
4008079b:	300800        	xor	a0, a8, a0
4008079e:	583ff5        	call12	400d8b9c <_iram_text_end+0x54e6a>
400807a1:	3ff530        	f64cmph	a15, a5, a3, 3
400807a4:	001800        	movsp	a0, a8
400807a7:	140100        	extui	a0, a0, 1, 2
400807aa:	010000        	slli	a0, a0, 32
400807ad:	080000        	lsx	f0, a0, a0
400807b0:	800101        	l32r	a0, 400607b4 <esp32_rom_gpio_matrix_out+0x568a8>
400807b3:	02a400        	andb	b10, b4, b0
400807b6:	3ffb      	addi.n	a3, a15, 15
400807b8:	fb0000        	f64addc	a0, a0, 0, 0
400807bb:	3f          	.byte 0x3f
400807bc:	fb0080        	f64addc	a8, a0, 0, 0
400807bf:	3f          	.byte 0x3f
400807c0:	0c7d      	mov.n	a7, a12
400807c2:	3ffb      	addi.n	a3, a15, 15
400807c4:	04cd      	mov.n	a12, a4
400807c6:	3ffb      	addi.n	a3, a15, 15
400807c8:	05bc      	beqz.n	a5, 400807fc <_iram_text_start+0x2ac>
400807ca:	3ffb      	addi.n	a3, a15, 15
400807cc:	05d8      	l32i.n	a13, a5, 0
400807ce:	3ffb      	addi.n	a3, a15, 15
400807d0:	09a8      	l32i.n	a10, a9, 0
400807d2:	3ffb      	addi.n	a3, a15, 15
400807d4:	0827e0        	lsx	f2, a7, a14
400807d7:	208040        	or	a8, a0, a4
400807da:	3ffb      	addi.n	a3, a15, 15
400807dc:	ff          	.byte 0xff
400807dd:	3ffb05        	call0	400c0790 <_iram_text_end+0x3ca5e>
400807e0:	34e8      	l32i.n	a14, a4, 12
400807e2:	4008      	l32i.n	a0, a0, 16
400807e4:	fb1880        	f64addc	a8, a8, 0, 1
400807e7:	3f          	.byte 0x3f
400807e8:	0828      	l32i.n	a2, a8, 0
400807ea:	3ffb      	addi.n	a3, a15, 15
400807ec:	fb3080        	f64addc	a8, a0, 1, 1
400807ef:	3f          	.byte 0x3f
400807f0:	fb1c80        	f64addc	a8, a12, 0, 1
400807f3:	3f          	.byte 0x3f
400807f4:	08e8      	l32i.n	a14, a8, 0
400807f6:	3ffb      	addi.n	a3, a15, 15
400807f8:	fb3880        	f64addc	a8, a8, 1, 1
400807fb:	3f          	.byte 0x3f
400807fc:	0b08      	l32i.n	a0, a11, 0
400807fe:	3ffb      	addi.n	a3, a15, 15
40080800:	fb0ad4        	lsi	f13, a10, 0x3ec
40080803:	3f          	.byte 0x3f
40080804:	fb0ad0        	f64addc	a13, a10, 0, 0
40080807:	3f          	.byte 0x3f
40080808:	fb0b14        	lsi	f1, a11, 0x3ec
4008080b:	3f          	.byte 0x3f
4008080c:	7e          	.byte 0x7e
4008080d:	fb0c      	movi.n	a11, 15
4008080f:	3f          	.byte 0x3f
40080810:	082b50        	lsx	f2, a11, a5
40080813:	000a40        	lsi	f4, a10, 0
40080816:	7e0000        	f64rnd	a0, a0, a0, 3
40080819:	fb0c      	movi.n	a11, 15
4008081b:	3f          	.byte 0x3f
4008081c:	fb0084        	lsi	f8, a0, 0x3ec
4008081f:	3f          	.byte 0x3f
40080820:	0b1c      	movi.n	a11, 16
40080822:	3ffb      	addi.n	a3, a15, 15
40080824:	fb0144        	lsi	f4, a1, 0x3ec
40080827:	3f          	.byte 0x3f
40080828:	ff          	.byte 0xff
40080829:	ff          	.byte 0xff
4008082a:	ff          	.byte 0xff
4008082b:	7f          	.byte 0x7f
4008082c:	0a68      	l32i.n	a6, a10, 0
4008082e:	3ffb      	addi.n	a3, a15, 15
40080830:	fb0084        	lsi	f8, a0, 0x3ec
40080833:	3f          	.byte 0x3f
40080834:	0098      	l32i.n	a9, a0, 0
40080836:	3ffb      	addi.n	a3, a15, 15

40080838 <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
40080838:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
4008083b:	ff4581        	l32r	a8, 40080550 <_iram_text_start>
4008083e:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
40080841:	ff45a1        	l32r	a10, 40080558 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080844:	ff44c1        	l32r	a12, 40080554 <_iram_text_start+0x4>
40080847:	00a0b2        	movi	a11, 0
4008084a:	c0cca0        	sub	a12, a12, a10
4008084d:	02d665        	call8	400835b4 <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
40080850:	ff4391        	l32r	a9, 4008055c <_iram_text_start+0xc>
40080853:	ffaba2        	movi	a10, 0xfffffbff
40080856:	0020c0        	memw
40080859:	002982        	l32i	a8, a9, 0
4008085c:	1088a0        	and	a8, a8, a10
4008085f:	0020c0        	memw
40080862:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080864:	ff3f91        	l32r	a9, 40080560 <_iram_text_start+0x10>
40080867:	ff3fa1        	l32r	a10, 40080564 <_iram_text_start+0x14>
4008086a:	0020c0        	memw
4008086d:	0988      	l32i.n	a8, a9, 0
4008086f:	1088a0        	and	a8, a8, a10
40080872:	0020c0        	memw
40080875:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
40080877:	ff3c81        	l32r	a8, 40080568 <_iram_text_start+0x18>
4008087a:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
4008087d:	ff3b91        	l32r	a9, 4008056c <_iram_text_start+0x1c>
40080880:	ea7c      	movi.n	a10, -2
40080882:	0020c0        	memw
40080885:	0988      	l32i.n	a8, a9, 0
40080887:	1088a0        	and	a8, a8, a10
4008088a:	0020c0        	memw
4008088d:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
40080890:	ff3881        	l32r	a8, 40080570 <_iram_text_start+0x20>
40080893:	13f480        	wsr.misc0	a8
40080896:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
40080899:	01f7e5        	call8	40082818 <z_cstart>

4008089c <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
4008089c:	c4c112        	addi	a1, a1, -60
4008089f:	7109      	s32i.n	a0, a1, 28
400808a1:	9129      	s32i.n	a2, a1, 36
400808a3:	a139      	s32i.n	a3, a1, 40
400808a5:	03e600        	rsr.ps	a0
400808a8:	026c      	movi.n	a2, -32
400808aa:	100020        	and	a0, a0, a2
400808ad:	5109      	s32i.n	a0, a1, 20
400808af:	03b100        	rsr.epc1	a0
400808b2:	6109      	s32i.n	a0, a1, 24
400808b4:	000206        	j	400808c0 <_after_imms1>
	...

400808b8 <_handle_excint_imm1>:
400808b8:	1868      	l32i.n	a6, a8, 4
400808ba:	4008      	l32i.n	a0, a0, 16

400808bc <_c_handler_imm1>:
400808bc:	1b7c      	movi.n	a11, -15
400808be:	4008      	l32i.n	a0, a0, 16

400808c0 <_after_imms1>:
400808c0:	ffff21        	l32r	a2, 400808bc <_c_handler_imm1>
400808c3:	fffd01        	l32r	a0, 400808b8 <_handle_excint_imm1>
400808c6:	0000a0        	jx	a0
400808c9:	000000        	ill

400808cc <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
400808cc:	004136        	entry	a1, 32
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
400808cf:	0aa0b2        	movi	a11, 10
400808d2:	82a2b0        	mull	a10, a2, a11
400808d5:	b2b2b0        	mulsh	a11, a2, a11
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
400808d8:	026b65        	call8	40082f90 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
400808db:	202aa0        	or	a2, a10, a10
400808de:	000090        	retw
400808e1:	000000        	ill

400808e4 <blink1>:
const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;


void blink1(void *id, void *unused1, void *unused2)
{
400808e4:	004136        	entry	a1, 32
	
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);

	int my_id = POINTER_TO_INT(id);
	printk("Beginning execution; thread data is %d\n", my_id);
400808e7:	ff25a1        	l32r	a10, 4008057c <_iram_text_start+0x2c>
400808ea:	20b220        	or	a11, a2, a2
400808ed:	006c65        	call8	40080fb4 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808f0:	ff24a1        	l32r	a10, 40080580 <_iram_text_start+0x30>
400808f3:	01e725        	call8	40082764 <z_impl_device_get_binding>
400808f6:	202aa0        	or	a2, a10, a10
	const struct device *dev;
	bool led_on = true;
	int ret;
	
	dev = device_get_binding("GPIO_0");
	if(dev == NULL){
400808f9:	06ca16        	beqz	a10, 40080969 <blink1+0x85>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
400808fc:	3a48      	l32i.n	a4, a10, 12
	return api->pin_configure(port, pin, flags);
400808fe:	2a38      	l32i.n	a3, a10, 8
40080900:	ff21c1        	l32r	a12, 40080584 <_iram_text_start+0x34>
40080903:	0338      	l32i.n	a3, a3, 0
40080905:	2b0c      	movi.n	a11, 2
40080907:	0003e0        	callx8	a3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
4008090a:	eacc      	bnez.n	a10, 4008091c <blink1+0x38>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
4008090c:	0438      	l32i.n	a3, a4, 0
4008090e:	b87c      	movi.n	a8, -5
40080910:	103380        	and	a3, a3, a8
40080913:	0439      	s32i.n	a3, a4, 0
{
40080915:	130c      	movi.n	a3, 1
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
40080917:	034d      	mov.n	a4, a3
40080919:	000146        	j	40080922 <blink1+0x3e>
		return;
	}
	
	ret= gpio_pin_configure(dev, LED_PIN, GPIO_OUTPUT_ACTIVE);
	if(ret<0){
4008091c:	049a96        	bltz	a10, 40080969 <blink1+0x85>
4008091f:	fffc86        	j	40080915 <blink1+0x31>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
40080922:	3288      	l32i.n	a8, a2, 12
40080924:	0898      	l32i.n	a9, a8, 0
40080926:	038d      	mov.n	a8, a3
40080928:	056927        	bbci	a9, 2, 40080931 <blink1+0x4d>
		value = (value != 0) ? 0 : 1;
4008092b:	308340        	xor	a8, a3, a4
4008092e:	748080        	extui	a8, a8, 0, 8
	if (value != 0)	{
40080931:	588c      	beqz.n	a8, 4008093a <blink1+0x56>
	return api->port_set_bits_raw(port, pins);
40080933:	2288      	l32i.n	a8, a2, 8
40080935:	3888      	l32i.n	a8, a8, 12
40080937:	000106        	j	4008093f <blink1+0x5b>
	return api->port_clear_bits_raw(port, pins);
4008093a:	022282        	l32i	a8, a2, 8
4008093d:	4888      	l32i.n	a8, a8, 16
4008093f:	4b0c      	movi.n	a11, 4
40080941:	02ad      	mov.n	a10, a2
40080943:	0008e0        	callx8	a8
		return;
	}
	
	while (1){
		gpio_pin_set(dev, LED_PIN,  (int)led_on);
		printk("LED1 on\n");
40080946:	ff10a1        	l32r	a10, 40080588 <_iram_text_start+0x38>
40080949:	0066a5        	call8	40080fb4 <printk>
		printk("LED2 %s\n", (led_on ? "on" : "off"));
4008094c:	ff0ab1        	l32r	a11, 40080574 <_iram_text_start+0x24>
4008094f:	13cc      	bnez.n	a3, 40080954 <blink1+0x70>
40080951:	ff09b1        	l32r	a11, 40080578 <_iram_text_start+0x28>
40080954:	ff0ea1        	l32r	a10, 4008058c <_iram_text_start+0x3c>
		led_on = !led_on;
40080957:	303340        	xor	a3, a3, a4
		printk("LED2 %s\n", (led_on ? "on" : "off"));
4008095a:	0065a5        	call8	40080fb4 <printk>

		k_msleep(SLEEP_TIME);
4008095d:	e8a3a2        	movi	a10, 0x3e8
		led_on = !led_on;
40080960:	743030        	extui	a3, a3, 0, 8
		k_msleep(SLEEP_TIME);
40080963:	fff6a5        	call8	400808cc <k_msleep>
		gpio_pin_set(dev, LED_PIN,  (int)led_on);
40080966:	ffee06        	j	40080922 <blink1+0x3e>
	}

}
40080969:	f01d      	retw.n
	...

4008096c <temperatura>:

void temperatura(void *id, void *unused1, void *unused2)
{
4008096c:	008136        	entry	a1, 64
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);

	int my_id = POINTER_TO_INT(id);
	printk("Beginning execution; thread data is %d\n", my_id);
4008096f:	ff03a1        	l32r	a10, 4008057c <_iram_text_start+0x2c>
40080972:	02bd      	mov.n	a11, a2
	//uint8_t cmp_data[16];
	uint8_t data[16];
	//int i, 
	int ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
40080974:	00a032        	movi	a3, 0
	printk("Beginning execution; thread data is %d\n", my_id);
40080977:	0063e5        	call8	40080fb4 <printk>
    uint8_t pointer = 0x00;
4008097a:	104132        	s8i	a3, a1, 16
4008097d:	ff04a1        	l32r	a10, 40080590 <_iram_text_start+0x40>
40080980:	01de25        	call8	40082764 <z_impl_device_get_binding>
40080983:	0a2d      	mov.n	a2, a10
40080985:	ff03a1        	l32r	a10, 40080594 <_iram_text_start+0x44>
40080988:	01dda5        	call8	40082764 <z_impl_device_get_binding>
4008098b:	0a5d      	mov.n	a5, a10

	i2c_dev = device_get_binding(I2C_DEV);
	i2c_dev1 = device_get_binding(I2C_DEV1);
	if (!i2c_dev1) {
4008098d:	7acc      	bnez.n	a10, 40080998 <temperatura+0x2c>
		printk("I2C: Device driver not found.\n");
4008098f:	ff02a1        	l32r	a10, 40080598 <_iram_text_start+0x48>
40080992:	006225        	call8	40080fb4 <printk>
        k_msleep(2500);
    }
    	
	

}
40080995:	f01d      	retw.n
40080997:	016100        	slli	a6, a1, 32
	printk("----------->> -------------------- <<---------------\n");
4008099a:	ff          	.byte 0xff
	pointer = 0x03; //Tos register pointer - 5000h por defecto
4008099b:	340c      	movi.n	a4, 3
	printk("----------->> -------------------- <<---------------\n");
4008099d:	06ad      	mov.n	a10, a6
4008099f:	006165        	call8	40080fb4 <printk>
    printk("---------->>   *** I2C LM75A ***   <<--------------\n\n");
400809a2:	feffa1        	l32r	a10, 400805a0 <_iram_text_start+0x50>
400809a5:	0060e5        	call8	40080fb4 <printk>
	printk("I2C LM75A - Pruebas.\n");
400809a8:	feffa1        	l32r	a10, 400805a4 <_iram_text_start+0x54>
400809ab:	0060a5        	call8	40080fb4 <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ae:	8d4c      	movi.n	a13, 72
400809b0:	1c0c      	movi.n	a12, 1
400809b2:	10c1b2        	addi	a11, a1, 16
400809b5:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809b7:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ba:	02ba65        	call8	40083560 <i2c_write>
	k_msleep(5);
400809bd:	5a0c      	movi.n	a10, 5
400809bf:	fff0e5        	call8	400808cc <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809c2:	8d4c      	movi.n	a13, 72
400809c4:	2c0c      	movi.n	a12, 2
400809c6:	01bd      	mov.n	a11, a1
400809c8:	02ad      	mov.n	a10, a2
400809ca:	02b765        	call8	40083540 <i2c_read>
	k_msleep(5);
400809cd:	5a0c      	movi.n	a10, 5
400809cf:	ffefe5        	call8	400808cc <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809d2:	fef571        	l32r	a7, 400805a8 <_iram_text_start+0x58>
400809d5:	0101c2        	l8ui	a12, a1, 1
400809d8:	0001b2        	l8ui	a11, a1, 0
400809db:	07ad      	mov.n	a10, a7
400809dd:	005d65        	call8	40080fb4 <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400809e0:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809e2:	8d4c      	movi.n	a13, 72
400809e4:	1c0c      	movi.n	a12, 1
400809e6:	10c1b2        	addi	a11, a1, 16
400809e9:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400809eb:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ee:	02b725        	call8	40083560 <i2c_write>
	k_msleep(5);
400809f1:	5a0c      	movi.n	a10, 5
400809f3:	ffeda5        	call8	400808cc <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809f6:	8d4c      	movi.n	a13, 72
400809f8:	2c0c      	movi.n	a12, 2
400809fa:	01bd      	mov.n	a11, a1
400809fc:	02ad      	mov.n	a10, a2
400809fe:	02b425        	call8	40083540 <i2c_read>
	k_msleep(5);
40080a01:	5a0c      	movi.n	a10, 5
40080a03:	ffeca5        	call8	400808cc <k_msleep>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080a06:	0101c2        	l8ui	a12, a1, 1
40080a09:	0001b2        	l8ui	a11, a1, 0
40080a0c:	fee8a1        	l32r	a10, 400805ac <_iram_text_start+0x5c>
40080a0f:	005a65        	call8	40080fb4 <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080a12:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a14:	8d4c      	movi.n	a13, 72
40080a16:	1c0c      	movi.n	a12, 1
40080a18:	10c1b2        	addi	a11, a1, 16
40080a1b:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080a1d:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a20:	02b3e5        	call8	40083560 <i2c_write>
	k_msleep(5);
40080a23:	5a0c      	movi.n	a10, 5
40080a25:	ffea65        	call8	400808cc <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080a28:	8d4c      	movi.n	a13, 72
40080a2a:	1c0c      	movi.n	a12, 1
40080a2c:	01bd      	mov.n	a11, a1
40080a2e:	02ad      	mov.n	a10, a2
40080a30:	02b0e5        	call8	40083540 <i2c_read>
	k_msleep(5);
40080a33:	5a0c      	movi.n	a10, 5
40080a35:	ffe965        	call8	400808cc <k_msleep>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080a38:	0101c2        	l8ui	a12, a1, 1
40080a3b:	0001b2        	l8ui	a11, a1, 0
40080a3e:	fedca1        	l32r	a10, 400805b0 <_iram_text_start+0x60>
40080a41:	005725        	call8	40080fb4 <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
40080a44:	0101c2        	l8ui	a12, a1, 1
40080a47:	0001b2        	l8ui	a11, a1, 0
40080a4a:	fedaa1        	l32r	a10, 400805b4 <_iram_text_start+0x64>
40080a4d:	005665        	call8	40080fb4 <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080a50:	8d4c      	movi.n	a13, 72
40080a52:	3c0c      	movi.n	a12, 3
40080a54:	01bd      	mov.n	a11, a1
40080a56:	02ad      	mov.n	a10, a2
	data[1] = temp >> 8;//MSByte
40080a58:	014132        	s8i	a3, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
40080a5b:	024132        	s8i	a3, a1, 2
	pointer = 0x03;
40080a5e:	104142        	s8i	a4, a1, 16
	data[0] = pointer;
40080a61:	004142        	s8i	a4, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080a64:	02afa5        	call8	40083560 <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
40080a67:	0201d2        	l8ui	a13, a1, 2
40080a6a:	0101c2        	l8ui	a12, a1, 1
40080a6d:	fed2a1        	l32r	a10, 400805b8 <_iram_text_start+0x68>
40080a70:	0b3c      	movi.n	a11, 48
40080a72:	005425        	call8	40080fb4 <printk>
	k_msleep(5);
40080a75:	5a0c      	movi.n	a10, 5
40080a77:	ffe565        	call8	400808cc <k_msleep>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a7a:	8d4c      	movi.n	a13, 72
40080a7c:	1c0c      	movi.n	a12, 1
40080a7e:	10c1b2        	addi	a11, a1, 16
40080a81:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
40080a83:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a86:	02ada5        	call8	40083560 <i2c_write>
	k_msleep(5);
40080a89:	5a0c      	movi.n	a10, 5
40080a8b:	ffe425        	call8	400808cc <k_msleep>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a8e:	8d4c      	movi.n	a13, 72
40080a90:	2c0c      	movi.n	a12, 2
40080a92:	01bd      	mov.n	a11, a1
40080a94:	02ad      	mov.n	a10, a2
40080a96:	02aaa5        	call8	40083540 <i2c_read>
	k_msleep(5);
40080a99:	5a0c      	movi.n	a10, 5
40080a9b:	ffe325        	call8	400808cc <k_msleep>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
40080a9e:	0101c2        	l8ui	a12, a1, 1
40080aa1:	0001b2        	l8ui	a11, a1, 0
40080aa4:	07ad      	mov.n	a10, a7
40080aa6:	0050e5        	call8	40080fb4 <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080aa9:	8d4c      	movi.n	a13, 72
40080aab:	1c0c      	movi.n	a12, 1
40080aad:	10c1b2        	addi	a11, a1, 16
40080ab0:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
40080ab2:	104132        	s8i	a3, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080ab5:	02aaa5        	call8	40083560 <i2c_write>
    printk("----------->> -------------------- <<---------------\n");
40080ab8:	06ad      	mov.n	a10, a6
40080aba:	004fa5        	call8	40080fb4 <printk>
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080abd:	febfa1        	l32r	a10, 400805bc <_iram_text_start+0x6c>
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
40080ac0:	737c      	movi.n	a3, -9
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080ac2:	004f25        	call8	40080fb4 <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080ac5:	76a0d2        	movi	a13, 118
40080ac8:	1c0c      	movi.n	a12, 1
40080aca:	10c1b2        	addi	a11, a1, 16
40080acd:	05ad      	mov.n	a10, a5
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
40080acf:	104132        	s8i	a3, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080ad2:	02a8e5        	call8	40083560 <i2c_write>
	k_msleep(5);
40080ad5:	5a0c      	movi.n	a10, 5
40080ad7:	ffdf65        	call8	400808cc <k_msleep>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
40080ada:	4c0c      	movi.n	a12, 4
40080adc:	01bd      	mov.n	a11, a1
40080ade:	76a0d2        	movi	a13, 118
40080ae1:	05ad      	mov.n	a10, a5
40080ae3:	02a5e5        	call8	40083540 <i2c_read>
	k_msleep(5);
40080ae6:	5a0c      	movi.n	a10, 5
40080ae8:	ffde25        	call8	400808cc <k_msleep>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080aeb:	0301c2        	l8ui	a12, a1, 3
40080aee:	0001b2        	l8ui	a11, a1, 0
40080af1:	feb3a1        	l32r	a10, 400805c0 <_iram_text_start+0x70>
40080af4:	004be5        	call8	40080fb4 <printk>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080af7:	8d4c      	movi.n	a13, 72
40080af9:	2c0c      	movi.n	a12, 2
40080afb:	20b110        	or	a11, a1, a1
40080afe:	20a220        	or	a10, a2, a2
40080b01:	02a3e5        	call8	40083540 <i2c_read>
        if(~ret) {
40080b04:	050a26        	beqi	a10, -1, 40080b0d <temperatura+0x1a1>
            printk("Succesful read\n");
40080b07:	feafa1        	l32r	a10, 400805c4 <_iram_text_start+0x74>
40080b0a:	000086        	j	40080b10 <temperatura+0x1a4>
            printk("Error read\n");
40080b0d:	feaea1        	l32r	a10, 400805c8 <_iram_text_start+0x78>
40080b10:	004a25        	call8	40080fb4 <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080b13:	0101c2        	l8ui	a12, a1, 1
40080b16:	0001b2        	l8ui	a11, a1, 0
40080b19:	feaca1        	l32r	a10, 400805cc <_iram_text_start+0x7c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b1c:	80a042        	movi	a4, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080b1f:	004965        	call8	40080fb4 <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b22:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080b25:	feaba1        	l32r	a10, 400805d4 <_iram_text_start+0x84>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b28:	113880        	slli	a3, a8, 8
40080b2b:	010182        	l8ui	a8, a1, 1
40080b2e:	108840        	and	a8, a8, a4
40080b31:	208830        	or	a8, a8, a3
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080b34:	418580        	srli	a8, a8, 5
40080b37:	fea631        	l32r	a3, 400805d0 <_iram_text_start+0x80>
40080b3a:	ca0800        	float.s	f0, a8, 0
40080b3d:	fa1350        	wfr	f1, a3
40080b40:	2a0010        	mul.s	f0, f0, f1
40080b43:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080b46:	f4b0b0        	extui	a11, a11, 0, 16
40080b49:	0046a5        	call8	40080fb4 <printk>
        k_msleep(2500);
40080b4c:	fea3a1        	l32r	a10, 400805d8 <_iram_text_start+0x88>
40080b4f:	ffd7e5        	call8	400808cc <k_msleep>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080b52:	ffe846        	j	40080af7 <temperatura+0x18b>
40080b55:	000000        	ill

40080b58 <main>:
	k_thread_start(&threads[1]);
	
}

void main(void)
{
40080b58:	008136        	entry	a1, 64
	k_thread_create(&threads[0], &stacks[0][0], STACK_SIZE,
40080b5b:	fea041        	l32r	a4, 400805dc <_iram_text_start+0x8c>
40080b5e:	fe9f51        	l32r	a5, 400805dc <_iram_text_start+0x8c>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
40080b61:	fea131        	l32r	a3, 400805e8 <_iram_text_start+0x98>
40080b64:	020c      	movi.n	a2, 0
40080b66:	460c      	movi.n	a6, 4
40080b68:	fe9ed1        	l32r	a13, 400805e0 <_iram_text_start+0x90>
40080b6b:	fe9eb1        	l32r	a11, 400805e4 <_iram_text_start+0x94>
40080b6e:	4149      	s32i.n	a4, a1, 16
40080b70:	5159      	s32i.n	a5, a1, 20
40080b72:	2169      	s32i.n	a6, a1, 8
40080b74:	1129      	s32i.n	a2, a1, 4
40080b76:	0129      	s32i.n	a2, a1, 0
40080b78:	02fd      	mov.n	a15, a2
40080b7a:	02ed      	mov.n	a14, a2
40080b7c:	00a6c2        	movi	a12, 0x600
40080b7f:	20a330        	or	a10, a3, a3
40080b82:	0253a5        	call8	400830bc <z_impl_k_thread_create>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_start(thread);
40080b85:	03ad      	mov.n	a10, a3
40080b87:	024d25        	call8	40083058 <z_impl_k_thread_start>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
40080b8a:	fe9a31        	l32r	a3, 400805f4 <_iram_text_start+0xa4>
40080b8d:	fe97d1        	l32r	a13, 400805ec <_iram_text_start+0x9c>
40080b90:	fe98b1        	l32r	a11, 400805f0 <_iram_text_start+0xa0>
40080b93:	4149      	s32i.n	a4, a1, 16
40080b95:	5159      	s32i.n	a5, a1, 20
40080b97:	2169      	s32i.n	a6, a1, 8
40080b99:	1129      	s32i.n	a2, a1, 4
40080b9b:	0129      	s32i.n	a2, a1, 0
40080b9d:	02fd      	mov.n	a15, a2
40080b9f:	1e0c      	movi.n	a14, 1
40080ba1:	00a6c2        	movi	a12, 0x600
40080ba4:	03ad      	mov.n	a10, a3
40080ba6:	025165        	call8	400830bc <z_impl_k_thread_create>
	z_impl_k_thread_start(thread);
40080ba9:	03ad      	mov.n	a10, a3
40080bab:	024ae5        	call8	40083058 <z_impl_k_thread_start>
	
	
	start_threads();


}
40080bae:	f01d      	retw.n

40080bb0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080bb0:	00a136        	entry	a1, 80
40080bb3:	049d      	mov.n	a9, a4
40080bb5:	744070        	extui	a4, a7, 0, 8
40080bb8:	058d      	mov.n	a8, a5
40080bba:	8149      	s32i.n	a4, a1, 32
40080bbc:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080bbf:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080bc1:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080bc4:	000e86        	j	40080c02 <print_digits+0x52>
40080bc7:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080bca:	80f170        	add	a15, a1, a7
40080bcd:	20c660        	or	a12, a6, a6
40080bd0:	05dd      	mov.n	a13, a5
40080bd2:	09ad      	mov.n	a10, a9
40080bd4:	08bd      	mov.n	a11, a8
40080bd6:	b189      	s32i.n	a8, a1, 44
40080bd8:	a199      	s32i.n	a9, a1, 40
40080bda:	0961f2        	s32i	a15, a1, 36
40080bdd:	02ee25        	call8	40083ac0 <__umoddi3>
40080be0:	fe86b1        	l32r	a11, 400805f8 <_iram_text_start+0xa8>
40080be3:	91f8      	l32i.n	a15, a1, 36
40080be5:	abaa      	add.n	a10, a11, a10
40080be7:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080bea:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080bec:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080bef:	a198      	l32i.n	a9, a1, 40
40080bf1:	b188      	l32i.n	a8, a1, 44
40080bf3:	09ad      	mov.n	a10, a9
40080bf5:	08bd      	mov.n	a11, a8
40080bf7:	05dd      	mov.n	a13, a5
40080bf9:	02c565        	call8	40083850 <__udivdi3>
40080bfc:	0a9d      	mov.n	a9, a10
40080bfe:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080c00:	770b      	addi.n	a7, a7, -1
40080c02:	20a980        	or	a10, a9, a8
40080c05:	fc1a56        	bnez	a10, 40080bca <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080c08:	451c      	movi.n	a5, 20
40080c0a:	079757        	bne	a7, a5, 40080c15 <print_digits+0x65>
		buf[i] = '0';
40080c0d:	053c      	movi.n	a5, 48
40080c0f:	144152        	s8i	a5, a1, 20
40080c12:	000046        	j	40080c17 <print_digits+0x67>
	} else {
		i++;
40080c15:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080c17:	152182        	l32i	a8, a1, 84
40080c1a:	591c      	movi.n	a9, 21
40080c1c:	878a      	add.n	a8, a7, a8
40080c1e:	050c      	movi.n	a5, 0
40080c20:	1c1897        	beq	a8, a9, 40080c40 <print_digits+0x90>
40080c23:	ebc852        	addi	a5, a8, -21
40080c26:	000206        	j	40080c32 <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080c29:	03bd      	mov.n	a11, a3
40080c2b:	04ad      	mov.n	a10, a4
40080c2d:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080c30:	550b      	addi.n	a5, a5, -1
40080c32:	318f50        	srai	a8, a5, 31
40080c35:	c08850        	sub	a8, a8, a5
40080c38:	0048d6        	bgez	a8, 40080c40 <print_digits+0x90>
40080c3b:	8168      	l32i.n	a6, a1, 32
40080c3d:	fe8656        	bnez	a6, 40080c29 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c40:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080c42:	817a      	add.n	a8, a1, a7
40080c44:	0008a2        	l8ui	a10, a8, 0
40080c47:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c4a:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080c4d:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c50:	ee9767        	bne	a7, a6, 40080c42 <print_digits+0x92>
40080c53:	000206        	j	40080c5f <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080c56:	03bd      	mov.n	a11, a3
40080c58:	04ad      	mov.n	a10, a4
40080c5a:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080c5d:	550b      	addi.n	a5, a5, -1
40080c5f:	f315e6        	bgei	a5, 1, 40080c56 <print_digits+0xa6>
	}
}
40080c62:	f01d      	retw.n

40080c64 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080c64:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080c67:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080c69:	02ad      	mov.n	a10, a2
	ctx->count++;
40080c6b:	881b      	addi.n	a8, a8, 1
40080c6d:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080c6f:	fe6331        	l32r	a3, 400805fc <_iram_text_start+0xac>
40080c72:	002332        	l32i	a3, a3, 0
40080c75:	0003e0        	callx8	a3
}
40080c78:	0a2d      	mov.n	a2, a10
40080c7a:	f01d      	retw.n

40080c7c <__printk_hook_install>:
{
40080c7c:	004136        	entry	a1, 32
	_char_out = fn;
40080c7f:	fe5f81        	l32r	a8, 400805fc <_iram_text_start+0xac>
40080c82:	0829      	s32i.n	a2, a8, 0
}
40080c84:	f01d      	retw.n
	...

40080c88 <z_vprintk>:
{
40080c88:	00a136        	entry	a1, 80
40080c8b:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080c8d:	040c      	movi.n	a4, 0
{
40080c8f:	4159      	s32i.n	a5, a1, 16
40080c91:	5169      	s32i.n	a6, a1, 20
40080c93:	6179      	s32i.n	a7, a1, 24
40080c95:	7159      	s32i.n	a5, a1, 28
40080c97:	8169      	s32i.n	a6, a1, 32
40080c99:	076d      	mov.n	a6, a7
	int min_width = -1;
40080c9b:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080c9d:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080c9f:	048d      	mov.n	a8, a4
	while (*fmt) {
40080ca1:	00ba46        	j	40080f8e <z_vprintk+0x306>
		if (!might_format) {
40080ca4:	08dc      	bnez.n	a8, 40080cb8 <z_vprintk+0x30>
			if (*fmt != '%') {
40080ca6:	592c      	movi.n	a9, 37
40080ca8:	029a97        	bne	a10, a9, 40080cae <z_vprintk+0x26>
40080cab:	00ad86        	j	40080f65 <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080cae:	03bd      	mov.n	a11, a3
40080cb0:	a189      	s32i.n	a8, a1, 40
40080cb2:	0002e0        	callx8	a2
40080cb5:	008046        	j	40080eba <z_vprintk+0x232>
			switch (*fmt) {
40080cb8:	64a092        	movi	a9, 100
40080cbb:	029a97        	bne	a10, a9, 40080cc1 <z_vprintk+0x39>
40080cbe:	003186        	j	40080d88 <z_vprintk+0x100>
40080cc1:	3739a7        	bltu	a9, a10, 40080cfc <z_vprintk+0x74>
40080cc4:	993c      	movi.n	a9, 57
40080cc6:	1c39a7        	bltu	a9, a10, 40080ce6 <z_vprintk+0x5e>
40080cc9:	193c      	movi.n	a9, 49
40080ccb:	7bba97        	bgeu	a10, a9, 40080d4a <z_vprintk+0xc2>
40080cce:	d92c      	movi.n	a9, 45
40080cd0:	029a97        	bne	a10, a9, 40080cd6 <z_vprintk+0x4e>
40080cd3:	00a646        	j	40080f70 <z_vprintk+0x2e8>
40080cd6:	093c      	movi.n	a9, 48
40080cd8:	681a97        	beq	a10, a9, 40080d44 <z_vprintk+0xbc>
40080cdb:	582c      	movi.n	a8, 37
40080cdd:	021a87        	beq	a10, a8, 40080ce3 <z_vprintk+0x5b>
40080ce0:	009a86        	j	40080f4e <z_vprintk+0x2c6>
40080ce3:	009886        	j	40080f49 <z_vprintk+0x2c1>
40080ce6:	885c      	movi.n	a8, 88
40080ce8:	029a87        	bne	a10, a8, 40080cee <z_vprintk+0x66>
40080ceb:	005286        	j	40080e39 <z_vprintk+0x1b1>
40080cee:	63a082        	movi	a8, 99
40080cf1:	029a87        	bne	a10, a8, 40080cf7 <z_vprintk+0x6f>
40080cf4:	008b06        	j	40080f24 <z_vprintk+0x29c>
40080cf7:	0094c6        	j	40080f4e <z_vprintk+0x2c6>
40080cfa:	920000        	lsi	f0, a0, 0x248
40080cfd:	9770a0        	lsi	f10, a0, 0x25c
40080d00:	029a      	add.n	a0, a2, a9
40080d02:	004806        	j	40080e26 <z_vprintk+0x19e>
40080d05:	1339a7        	bltu	a9, a10, 40080d1c <z_vprintk+0x94>
40080d08:	69a092        	movi	a9, 105
40080d0b:	791a97        	beq	a10, a9, 40080d88 <z_vprintk+0x100>
40080d0e:	6ca092        	movi	a9, 108
40080d11:	541a97        	beq	a10, a9, 40080d69 <z_vprintk+0xe1>
40080d14:	68a092        	movi	a9, 104
40080d17:	000886        	j	40080d3d <z_vprintk+0xb5>
40080d1a:	920000        	lsi	f0, a0, 0x248
40080d1d:	9775a0        	lsi	f10, a5, 0x25c
40080d20:	651a      	add.n	a6, a5, a1
40080d22:	0b39a7        	bltu	a9, a10, 40080d31 <z_vprintk+0xa9>
40080d25:	73a082        	movi	a8, 115
40080d28:	029a87        	bne	a10, a8, 40080d2e <z_vprintk+0xa6>
40080d2b:	006446        	j	40080ec0 <z_vprintk+0x238>
40080d2e:	008706        	j	40080f4e <z_vprintk+0x2c6>
40080d31:	78a092        	movi	a9, 120
40080d34:	029a97        	bne	a10, a9, 40080d3a <z_vprintk+0xb2>
40080d37:	003f86        	j	40080e39 <z_vprintk+0x1b1>
40080d3a:	7aa092        	movi	a9, 122
40080d3d:	281a97        	beq	a10, a9, 40080d69 <z_vprintk+0xe1>
40080d40:	008286        	j	40080f4e <z_vprintk+0x2c6>
40080d43:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080d46:	a71600        	lsi	f0, a6, 0x29c
40080d49:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080d4c:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080d4f:	0346d0        	lsi	f13, a6, 12
40080d52:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080d55:	5a1195        	call4	400dae70 <_iram_text_end+0x5713e>
40080d58:	f059      	s32i.n	a5, a0, 60
40080d5a:	521155        	call4	400d2e70 <_iram_text_end+0x4f13e>
40080d5d:	5ad0c5        	call0	400dba6c <_iram_text_end+0x57d3a>
40080d60:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080d62:	0c2237        	blt	a2, a3, 40080d72 <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080d65:	878627        	bany	a6, a2, 40080cf0 <z_vprintk+0x68>
40080d68:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080d6b:	9768      	l32i.n	a6, a7, 36
40080d6d:	059a      	add.n	a0, a5, a9
40080d6f:	0d94a7        	bne	a4, a10, 40080d80 <z_vprintk+0xf8>
40080d72:	008146        	j	40080f7b <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080d75:	94c492        	addi	a9, a4, -108
40080d78:	49cc      	bnez.n	a9, 40080d80 <z_vprintk+0xf8>
40080d7a:	94ca92        	addi	a9, a10, -108
40080d7d:	1ff916        	beqz	a9, 40080f80 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080d80:	202416        	beqz	a4, 40080f86 <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080d83:	0071c6        	j	40080f4e <z_vprintk+0x2c6>
40080d86:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080d89:	1c7aa0        	lsi	f10, a10, 112
40080d8c:	9788      	l32i.n	a8, a7, 36
40080d8e:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080d91:	000c      	movi.n	a0, 0
40080d93:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080d96:	976c      	movi.n	a7, -23
40080d98:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080d9b:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080d9d:	c94c      	movi.n	a9, 76
40080d9f:	219497        	bne	a4, a9, 40080dc4 <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080da2:	897c      	movi.n	a9, -8
40080da4:	c67b      	addi.n	a12, a6, 7
40080da6:	10cc90        	and	a12, a12, a9
40080da9:	9c8b      	addi.n	a9, a12, 8
40080dab:	81b8      	l32i.n	a11, a1, 32
40080dad:	07a897        	bge	a8, a9, 40080db8 <z_vprintk+0x130>
40080db0:	0228c7        	blt	a8, a12, 40080db6 <z_vprintk+0x12e>
40080db3:	28a092        	movi	a9, 40
40080db6:	71b8      	l32i.n	a11, a1, 28
40080db8:	8b9a      	add.n	a8, a11, a9
40080dba:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080dbd:	08c8      	l32i.n	a12, a8, 0
40080dbf:	1868      	l32i.n	a6, a8, 4
40080dc1:	0005c6        	j	40080ddc <z_vprintk+0x154>
					d = va_arg(ap, int);
40080dc4:	964b      	addi.n	a9, a6, 4
40080dc6:	81b8      	l32i.n	a11, a1, 32
40080dc8:	06a897        	bge	a8, a9, 40080dd2 <z_vprintk+0x14a>
40080dcb:	012867        	blt	a8, a6, 40080dd0 <z_vprintk+0x148>
40080dce:	492c      	movi.n	a9, 36
40080dd0:	71b8      	l32i.n	a11, a1, 28
40080dd2:	bb9a      	add.n	a11, a11, a9
40080dd4:	fccbb2        	addi	a11, a11, -4
40080dd7:	0bc8      	l32i.n	a12, a11, 0
40080dd9:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080ddc:	75a082        	movi	a8, 117
40080ddf:	251a87        	beq	a10, a8, 40080e08 <z_vprintk+0x180>
40080de2:	0226d6        	bgez	a6, 40080e08 <z_vprintk+0x180>
					out((int)'-', ctx);
40080de5:	03bd      	mov.n	a11, a3
40080de7:	da2c      	movi.n	a10, 45
40080de9:	0b6192        	s32i	a9, a1, 44
40080dec:	0a61c2        	s32i	a12, a1, 40
40080def:	0002e0        	callx8	a2
					d = -d;
40080df2:	a1c8      	l32i.n	a12, a1, 40
40080df4:	180c      	movi.n	a8, 1
40080df6:	60c0c0        	neg	a12, a12
40080df9:	0a0c      	movi.n	a10, 0
40080dfb:	838ac0        	moveqz	a8, a10, a12
40080dfe:	60d060        	neg	a13, a6
					min_width--;
40080e01:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080e03:	c06d80        	sub	a6, a13, a8
					min_width--;
40080e06:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080e08:	fdc7a2        	addi	a10, a7, -3
40080e0b:	080c      	movi.n	a8, 0
40080e0d:	1f0c      	movi.n	a15, 1
40080e0f:	0e3c      	movi.n	a14, 48
40080e11:	83f8a0        	moveqz	a15, a8, a10
40080e14:	0b2c      	movi.n	a11, 32
40080e16:	a70b      	addi.n	a10, a7, -1
40080e18:	83bea0        	moveqz	a11, a14, a10
40080e1b:	1159      	s32i.n	a5, a1, 4
40080e1d:	01b9      	s32i.n	a11, a1, 0
40080e1f:	ae0c      	movi.n	a14, 10
40080e21:	06dd      	mov.n	a13, a6
40080e23:	002106        	j	40080eab <z_vprintk+0x223>
				out('0', ctx);
40080e26:	03bd      	mov.n	a11, a3
40080e28:	0a3c      	movi.n	a10, 48
40080e2a:	0002e0        	callx8	a2
				out('x', ctx);
40080e2d:	03bd      	mov.n	a11, a3
40080e2f:	78a0a2        	movi	a10, 120
40080e32:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080e35:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080e37:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080e39:	9198      	l32i.n	a9, a1, 36
40080e3b:	881c      	movi.n	a8, 24
40080e3d:	0009a2        	l8ui	a10, a9, 0
40080e40:	70a092        	movi	a9, 112
40080e43:	029a97        	bne	a10, a9, 40080e49 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080e46:	000b86        	j	40080e78 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080e49:	6ca092        	movi	a9, 108
40080e4c:	029497        	bne	a4, a9, 40080e52 <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080e4f:	000946        	j	40080e78 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080e52:	c94c      	movi.n	a9, 76
40080e54:	209497        	bne	a4, a9, 40080e78 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080e57:	897c      	movi.n	a9, -8
40080e59:	c67b      	addi.n	a12, a6, 7
40080e5b:	10cc90        	and	a12, a12, a9
40080e5e:	9c8b      	addi.n	a9, a12, 8
40080e60:	81a8      	l32i.n	a10, a1, 32
40080e62:	06a897        	bge	a8, a9, 40080e6c <z_vprintk+0x1e4>
40080e65:	0128c7        	blt	a8, a12, 40080e6a <z_vprintk+0x1e2>
40080e68:	892c      	movi.n	a9, 40
40080e6a:	71a8      	l32i.n	a10, a1, 28
40080e6c:	8a9a      	add.n	a8, a10, a9
40080e6e:	f8c882        	addi	a8, a8, -8
40080e71:	08c8      	l32i.n	a12, a8, 0
40080e73:	18d8      	l32i.n	a13, a8, 4
40080e75:	000646        	j	40080e92 <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080e78:	964b      	addi.n	a9, a6, 4
40080e7a:	81a8      	l32i.n	a10, a1, 32
40080e7c:	06a897        	bge	a8, a9, 40080e86 <z_vprintk+0x1fe>
40080e7f:	012867        	blt	a8, a6, 40080e84 <z_vprintk+0x1fc>
40080e82:	492c      	movi.n	a9, 36
40080e84:	71a8      	l32i.n	a10, a1, 28
40080e86:	80aa90        	add	a10, a10, a9
40080e89:	fccaa2        	addi	a10, a10, -4
40080e8c:	002ac2        	l32i	a12, a10, 0
40080e8f:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080e92:	fdc7a2        	addi	a10, a7, -3
40080e95:	080c      	movi.n	a8, 0
40080e97:	1f0c      	movi.n	a15, 1
40080e99:	0e3c      	movi.n	a14, 48
40080e9b:	83f8a0        	moveqz	a15, a8, a10
40080e9e:	0b2c      	movi.n	a11, 32
40080ea0:	a70b      	addi.n	a10, a7, -1
40080ea2:	83bea0        	moveqz	a11, a14, a10
40080ea5:	1159      	s32i.n	a5, a1, 4
40080ea7:	01b9      	s32i.n	a11, a1, 0
40080ea9:	0e1c      	movi.n	a14, 16
40080eab:	03bd      	mov.n	a11, a3
40080ead:	02ad      	mov.n	a10, a2
40080eaf:	b199      	s32i.n	a9, a1, 44
40080eb1:	a189      	s32i.n	a8, a1, 40
40080eb3:	ffcfe5        	call8	40080bb0 <print_digits>
40080eb6:	b198      	l32i.n	a9, a1, 44
40080eb8:	096d      	mov.n	a6, a9
			might_format = 0;
40080eba:	a188      	l32i.n	a8, a1, 40
40080ebc:	003206        	j	40080f88 <z_vprintk+0x300>
40080ebf:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080ec2:	881c      	movi.n	a8, 24
40080ec4:	0ca897        	bge	a8, a9, 40080ed4 <z_vprintk+0x24c>
40080ec7:	012867        	blt	a8, a6, 40080ecc <z_vprintk+0x244>
40080eca:	492c      	movi.n	a9, 36
40080ecc:	096d      	mov.n	a6, a9
40080ece:	7188      	l32i.n	a8, a1, 28
40080ed0:	000106        	j	40080ed8 <z_vprintk+0x250>
40080ed3:	818800        	src	a8, a8, a0
40080ed6:	096d      	mov.n	a6, a9
40080ed8:	889a      	add.n	a8, a8, a9
40080eda:	fcc882        	addi	a8, a8, -4
40080edd:	08d8      	l32i.n	a13, a8, 0
40080edf:	0d9d      	mov.n	a9, a13
				while (*s) {
40080ee1:	0003c6        	j	40080ef4 <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080ee4:	991b      	addi.n	a9, a9, 1
40080ee6:	03bd      	mov.n	a11, a3
40080ee8:	b199      	s32i.n	a9, a1, 44
40080eea:	0a61d2        	s32i	a13, a1, 40
40080eed:	0002e0        	callx8	a2
40080ef0:	a1d8      	l32i.n	a13, a1, 40
40080ef2:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080ef4:	0009a2        	l8ui	a10, a9, 0
40080ef7:	fe9a56        	bnez	a10, 40080ee4 <z_vprintk+0x25c>
			might_format = 0;
40080efa:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080efc:	023726        	beqi	a7, 3, 40080f02 <z_vprintk+0x27a>
40080eff:	002146        	j	40080f88 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080f02:	c099d0        	sub	a9, a9, a13
40080f05:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080f08:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080f0a:	000406        	j	40080f1e <z_vprintk+0x296>
						out(' ', ctx);
40080f0d:	08ad      	mov.n	a10, a8
40080f0f:	03bd      	mov.n	a11, a3
40080f11:	a189      	s32i.n	a8, a1, 40
40080f13:	b199      	s32i.n	a9, a1, 44
40080f15:	0002e0        	callx8	a2
40080f18:	b198      	l32i.n	a9, a1, 44
40080f1a:	a188      	l32i.n	a8, a1, 40
40080f1c:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080f1e:	eb19e6        	bgei	a9, 1, 40080f0d <z_vprintk+0x285>
40080f21:	000ec6        	j	40080f60 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080f24:	964b      	addi.n	a9, a6, 4
40080f26:	8a1c      	movi.n	a10, 24
40080f28:	8188      	l32i.n	a8, a1, 32
40080f2a:	06aa97        	bge	a10, a9, 40080f34 <z_vprintk+0x2ac>
40080f2d:	012a67        	blt	a10, a6, 40080f32 <z_vprintk+0x2aa>
40080f30:	492c      	movi.n	a9, 36
40080f32:	7188      	l32i.n	a8, a1, 28
40080f34:	889a      	add.n	a8, a8, a9
40080f36:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080f39:	08a8      	l32i.n	a10, a8, 0
40080f3b:	03bd      	mov.n	a11, a3
40080f3d:	b199      	s32i.n	a9, a1, 44
40080f3f:	0002e0        	callx8	a2
				break;
40080f42:	b198      	l32i.n	a9, a1, 44
40080f44:	096d      	mov.n	a6, a9
40080f46:	000586        	j	40080f60 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080f49:	03bd      	mov.n	a11, a3
40080f4b:	000386        	j	40080f5d <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080f4e:	03bd      	mov.n	a11, a3
40080f50:	25a0a2        	movi	a10, 37
40080f53:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080f56:	9188      	l32i.n	a8, a1, 36
40080f58:	03bd      	mov.n	a11, a3
40080f5a:	0008a2        	l8ui	a10, a8, 0
40080f5d:	0002e0        	callx8	a2
			might_format = 0;
40080f60:	080c      	movi.n	a8, 0
				break;
40080f62:	000886        	j	40080f88 <z_vprintk+0x300>
				length_mod = 0;
40080f65:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080f67:	087d      	mov.n	a7, a8
				min_width = -1;
40080f69:	f57c      	movi.n	a5, -1
				might_format = 1;
40080f6b:	180c      	movi.n	a8, 1
40080f6d:	0005c6        	j	40080f88 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080f70:	370c      	movi.n	a7, 3
40080f72:	000486        	j	40080f88 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080f75:	170c      	movi.n	a7, 1
40080f77:	000346        	j	40080f88 <z_vprintk+0x300>
40080f7a:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080f7d:	0001c6        	j	40080f88 <z_vprintk+0x300>
					length_mod = 'L';
40080f80:	c44c      	movi.n	a4, 76
40080f82:	000086        	j	40080f88 <z_vprintk+0x300>
40080f85:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080f88:	9198      	l32i.n	a9, a1, 36
40080f8a:	991b      	addi.n	a9, a9, 1
40080f8c:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080f8e:	9198      	l32i.n	a9, a1, 36
40080f90:	0009a2        	l8ui	a10, a9, 0
40080f93:	d0da56        	bnez	a10, 40080ca4 <z_vprintk+0x1c>
}
40080f96:	f01d      	retw.n

40080f98 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080f98:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080f9b:	fd99a1        	l32r	a10, 40080600 <_iram_text_start+0xb0>
	struct out_context ctx = { 0 };
40080f9e:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080fa1:	20d330        	or	a13, a3, a3
40080fa4:	20e440        	or	a14, a4, a4
40080fa7:	05fd      	mov.n	a15, a5
40080fa9:	02cd      	mov.n	a12, a2
40080fab:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080fad:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080faf:	ffcda5        	call8	40080c88 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080fb2:	f01d      	retw.n

40080fb4 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080fb4:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080fb7:	10c1c2        	addi	a12, a1, 16
40080fba:	30c1b2        	addi	a11, a1, 48
40080fbd:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080fbf:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080fc1:	5139      	s32i.n	a3, a1, 20
40080fc3:	6149      	s32i.n	a4, a1, 24
40080fc5:	7159      	s32i.n	a5, a1, 28
40080fc7:	8169      	s32i.n	a6, a1, 32
40080fc9:	9179      	s32i.n	a7, a1, 36
40080fcb:	11c9      	s32i.n	a12, a1, 4
40080fcd:	01b9      	s32i.n	a11, a1, 0
40080fcf:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080fd1:	fffc65        	call8	40080f98 <vprintk>
	}
	va_end(ap);
}
40080fd4:	f01d      	retw.n
	...

40080fd8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080fd8:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080fdb:	20c550        	or	a12, a5, a5
40080fde:	20b440        	or	a11, a4, a4
40080fe1:	03ad      	mov.n	a10, a3
40080fe3:	0002e0        	callx8	a2
	return z_impl_k_current_get();
40080fe6:	01fee5        	call8	40082fd4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
40080fe9:	021a25        	call8	4008318c <z_impl_k_thread_abort>

40080fec <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
40080fec:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40080fef:	1133d0        	slli	a3, a3, 3
40080ff2:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40080ff4:	fd8481        	l32r	a8, 40080604 <_iram_text_start+0xb4>
40080ff7:	2228      	l32i.n	a2, a2, 8
40080ff9:	0bb827        	bgeu	a8, a2, 40081008 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
40080ffc:	1144e0        	slli	a4, a4, 2
40080fff:	334a      	add.n	a3, a3, a4
40081001:	0328      	l32i.n	a2, a3, 0
40081003:	000246        	j	40081010 <chunk_field+0x24>
40081006:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40081009:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
4008100c:	132233        	lsi	f3, a2, 76
4008100f:	f01d00        	subx8	a1, a13, a0
	...

40081014 <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40081014:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40081017:	1133d0        	slli	a3, a3, 3
4008101a:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
4008101c:	fd7a81        	l32r	a8, 40080604 <_iram_text_start+0xb4>
4008101f:	2228      	l32i.n	a2, a2, 8
40081021:	0bb827        	bgeu	a8, a2, 40081030 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40081024:	1144e0        	slli	a4, a4, 2
40081027:	334a      	add.n	a3, a3, a4
40081029:	0359      	s32i.n	a5, a3, 0
4008102b:	000246        	j	40081038 <chunk_set+0x24>
4008102e:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40081031:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40081034:	535233        	lsi	f3, a2, 0x14c
40081037:	f01d00        	subx8	a1, a13, a0
	...

4008103c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
4008103c:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
4008103f:	1c0c      	movi.n	a12, 1
40081041:	03bd      	mov.n	a11, a3
40081043:	02ad      	mov.n	a10, a2
40081045:	fffa65        	call8	40080fec <chunk_field>
}
40081048:	4121a0        	srli	a2, a10, 1
4008104b:	f01d      	retw.n
4008104d:	000000        	ill

40081050 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40081050:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40081053:	1133d0        	slli	a3, a3, 3
40081056:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40081058:	fd6b81        	l32r	a8, 40080604 <_iram_text_start+0xb4>
4008105b:	2228      	l32i.n	a2, a2, 8
4008105d:	17b827        	bgeu	a8, a2, 40081078 <set_chunk_used+0x28>
		if (used) {
40081060:	1388      	l32i.n	a8, a3, 4
40081062:	648c      	beqz.n	a4, 4008106c <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40081064:	120c      	movi.n	a2, 1
40081066:	208820        	or	a8, a8, a2
40081069:	000106        	j	40081071 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
4008106c:	e27c      	movi.n	a2, -2
4008106e:	108820        	and	a8, a8, a2
40081071:	1389      	s32i.n	a8, a3, 4
40081073:	000586        	j	4008108d <set_chunk_used+0x3d>
40081076:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40081079:	8c0113        	lsi	f1, a1, 0x230
4008107c:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
4008107f:	208820        	or	a8, a8, a2
40081082:	000106        	j	4008108a <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
40081085:	e27c      	movi.n	a2, -2
40081087:	108820        	and	a8, a8, a2
4008108a:	015382        	s16i	a8, a3, 2
		}
	}
}
4008108d:	f01d      	retw.n
	...

40081090 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
40081090:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
40081093:	11d4f0        	slli	a13, a4, 1
40081096:	01a0c2        	movi	a12, 1
40081099:	20b330        	or	a11, a3, a3
4008109c:	20a220        	or	a10, a2, a2
4008109f:	fff765        	call8	40081014 <chunk_set>
}
400810a2:	f01d      	retw.n

400810a4 <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
400810a4:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
400810a7:	fd5791        	l32r	a9, 40080604 <_iram_text_start+0xb4>
400810aa:	2228      	l32i.n	a2, a2, 8
400810ac:	880c      	movi.n	a8, 8
400810ae:	023927        	bltu	a9, a2, 400810b4 <bucket_idx+0x10>
400810b1:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
400810b4:	888b      	addi.n	a8, a8, 8
400810b6:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
400810b9:	331b      	addi.n	a3, a3, 1
400810bb:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
400810be:	40f330        	nsau	a3, a3
}
400810c1:	f21c      	movi.n	a2, 31
400810c3:	c02230        	sub	a2, a2, a3
400810c6:	f01d      	retw.n

400810c8 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
400810c8:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
400810cb:	03bd      	mov.n	a11, a3
400810cd:	02ad      	mov.n	a10, a2
400810cf:	fff6e5        	call8	4008103c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
400810d2:	fd4c51        	l32r	a5, 40080604 <_iram_text_start+0xb4>
400810d5:	2248      	l32i.n	a4, a2, 8
400810d7:	05b547        	bgeu	a5, a4, 400810e0 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
400810da:	021a66        	bnei	a10, 1, 400810e0 <free_list_add+0x18>
400810dd:	001bc6        	j	40081150 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
400810e0:	0abd      	mov.n	a11, a10
400810e2:	02ad      	mov.n	a10, a2
400810e4:	fffbe5        	call8	400810a4 <bucket_idx>
	if (b->next == 0) {
400810e7:	118ae0        	slli	a8, a10, 2
400810ea:	828a      	add.n	a8, a2, a8
400810ec:	4848      	l32i.n	a4, a8, 16
400810ee:	44ec      	bnez.n	a4, 40081116 <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
400810f0:	140c      	movi.n	a4, 1
400810f2:	401a00        	ssl	a10
400810f5:	a14400        	sll	a4, a4
400810f8:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
400810fa:	03dd      	mov.n	a13, a3
400810fc:	20aa40        	or	a10, a10, a4
400810ff:	32a9      	s32i.n	a10, a2, 12
40081101:	2c0c      	movi.n	a12, 2
40081103:	03bd      	mov.n	a11, a3
		b->next = c;
40081105:	4839      	s32i.n	a3, a8, 16
40081107:	02ad      	mov.n	a10, a2
40081109:	fff0a5        	call8	40081014 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
4008110c:	03dd      	mov.n	a13, a3
4008110e:	3c0c      	movi.n	a12, 3
40081110:	03bd      	mov.n	a11, a3
40081112:	000d46        	j	4008114b <free_list_add+0x83>
40081115:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40081118:	b44002        	s8i	a0, a0, 180
4008111b:	a22020        	muluh	a2, a0, a2
4008111e:	ece520        	lsi	f2, a5, 0x3b0
40081121:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40081122:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40081124:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
40081126:	2c0c      	movi.n	a12, 2
40081128:	03bd      	mov.n	a11, a3
4008112a:	02ad      	mov.n	a10, a2
4008112c:	ffee65        	call8	40081014 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
4008112f:	04dd      	mov.n	a13, a4
40081131:	3c0c      	movi.n	a12, 3
40081133:	03bd      	mov.n	a11, a3
40081135:	02ad      	mov.n	a10, a2
40081137:	ffede5        	call8	40081014 <chunk_set>
4008113a:	03dd      	mov.n	a13, a3
4008113c:	3c0c      	movi.n	a12, 3
4008113e:	05bd      	mov.n	a11, a5
40081140:	02ad      	mov.n	a10, a2
40081142:	ffed25        	call8	40081014 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
40081145:	03dd      	mov.n	a13, a3
40081147:	2c0c      	movi.n	a12, 2
40081149:	04bd      	mov.n	a11, a4
4008114b:	02ad      	mov.n	a10, a2
4008114d:	ffec65        	call8	40081014 <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081150:	f01d      	retw.n
	...

40081154 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
40081154:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
40081157:	fd2c51        	l32r	a5, 40080608 <_iram_text_start+0xb8>
4008115a:	890c      	movi.n	a9, 8
4008115c:	013547        	bltu	a5, a4, 40081161 <sys_heap_init+0xd>
4008115f:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081161:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081164:	887c      	movi.n	a8, -8
40081166:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081168:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008116a:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
4008116d:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081170:	fd2791        	l32r	a9, 4008060c <_iram_text_start+0xbc>
40081173:	fd2681        	l32r	a8, 4008060c <_iram_text_start+0xbc>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40081176:	c03350        	sub	a3, a3, a5
	heap->heap = h;
40081179:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008117b:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
4008117e:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
40081180:	0589      	s32i.n	a8, a5, 0
40081182:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081184:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
40081186:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
40081188:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
4008118a:	20a550        	or	a10, a5, a5
4008118d:	fff165        	call8	400810a4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
40081190:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
40081193:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
40081196:	ba1b      	addi.n	a11, a10, 1
40081198:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
4008119b:	10c592        	addi	a9, a5, 16
4008119e:	048d      	mov.n	a8, a4
400811a0:	000186        	j	400811aa <sys_heap_init+0x56>
400811a3:	094900        	l32e	a0, a9, -48
400811a6:	881b      	addi.n	a8, a8, 1
400811a8:	994b      	addi.n	a9, a9, 4
400811aa:	f628b7        	blt	a8, a11, 400811a4 <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
400811ad:	02cd      	mov.n	a12, a2
400811af:	05ad      	mov.n	a10, a5
400811b1:	0b0c      	movi.n	a11, 0
400811b3:	ffede5        	call8	40081090 <set_chunk_size>
	set_chunk_used(h, 0, true);
400811b6:	05ad      	mov.n	a10, a5
400811b8:	1c0c      	movi.n	a12, 1
400811ba:	0b0c      	movi.n	a11, 0
400811bc:	ffe925        	call8	40081050 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
400811bf:	c04320        	sub	a4, a3, a2
400811c2:	04cd      	mov.n	a12, a4
400811c4:	02bd      	mov.n	a11, a2
400811c6:	05ad      	mov.n	a10, a5
400811c8:	ffec65        	call8	40081090 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
400811cb:	02dd      	mov.n	a13, a2
400811cd:	02bd      	mov.n	a11, a2
400811cf:	05ad      	mov.n	a10, a5
400811d1:	0c0c      	movi.n	a12, 0
400811d3:	ffe425        	call8	40081014 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
400811d6:	03bd      	mov.n	a11, a3
400811d8:	05ad      	mov.n	a10, a5
400811da:	0c0c      	movi.n	a12, 0
400811dc:	ffeb25        	call8	40081090 <set_chunk_size>
400811df:	04dd      	mov.n	a13, a4
400811e1:	03bd      	mov.n	a11, a3
400811e3:	05ad      	mov.n	a10, a5
400811e5:	0c0c      	movi.n	a12, 0
400811e7:	ffe2e5        	call8	40081014 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
400811ea:	03bd      	mov.n	a11, a3
400811ec:	05ad      	mov.n	a10, a5
400811ee:	1c0c      	movi.n	a12, 1
400811f0:	ffe5e5        	call8	40081050 <set_chunk_used>

	free_list_add(h, chunk0_size);
400811f3:	02bd      	mov.n	a11, a2
400811f5:	05ad      	mov.n	a10, a5
400811f7:	ffed25        	call8	400810c8 <free_list_add>
}
400811fa:	f01d      	retw.n

400811fc <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
400811fc:	004136        	entry	a1, 32
	if (c == '\n') {
400811ff:	079266        	bnei	a2, 10, 4008120a <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
40081202:	da0c      	movi.n	a10, 13
40081204:	fd0381        	l32r	a8, 40080610 <_iram_text_start+0xc0>
40081207:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
4008120a:	74a020        	extui	a10, a2, 0, 8
4008120d:	fd0081        	l32r	a8, 40080610 <_iram_text_start+0xc0>
40081210:	0008e0        	callx8	a8
	return 0;
}
40081213:	020c      	movi.n	a2, 0
40081215:	f01d      	retw.n
	...

40081218 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
40081218:	004136        	entry	a1, 32
4008121b:	fcfea1        	l32r	a10, 40080614 <_iram_text_start+0xc4>
4008121e:	015465        	call8	40082764 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
40081221:	fcfd21        	l32r	a2, 40080618 <_iram_text_start+0xc8>
40081224:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
40081227:	fcfd21        	l32r	a2, 4008061c <_iram_text_start+0xcc>
4008122a:	02ad      	mov.n	a10, a2
4008122c:	00a9a5        	call8	40081cc8 <__stdout_hook_install>
	__printk_hook_install(console_out);
4008122f:	02ad      	mov.n	a10, a2
40081231:	ffa4a5        	call8	40080c7c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
40081234:	020c      	movi.n	a2, 0
40081236:	f01d      	retw.n

40081238 <console_out>:
{
40081238:	004136        	entry	a1, 32
	if ('\n' == c) {
4008123b:	fcf731        	l32r	a3, 40080618 <_iram_text_start+0xc8>
4008123e:	0a9266        	bnei	a2, 10, 4008124c <console_out+0x14>
40081241:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
40081243:	2a88      	l32i.n	a8, a10, 8
40081245:	db0c      	movi.n	a11, 13
40081247:	1888      	l32i.n	a8, a8, 4
40081249:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
4008124c:	03a8      	l32i.n	a10, a3, 0
4008124e:	2a38      	l32i.n	a3, a10, 8
40081250:	74b020        	extui	a11, a2, 0, 8
40081253:	1338      	l32i.n	a3, a3, 4
40081255:	0003e0        	callx8	a3
}
40081258:	f01d      	retw.n
	...

4008125c <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
4008125c:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
4008125f:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081261:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081264:	401300        	ssl	a3
40081267:	a13800        	sll	a3, a8
4008126a:	fced81        	l32r	a8, 40080620 <_iram_text_start+0xd0>
4008126d:	1199d0        	slli	a9, a9, 3
40081270:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
40081272:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
40081274:	020c      	movi.n	a2, 0
40081276:	0020c0        	memw
40081279:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008127b:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
4008127e:	0020c0        	memw
40081281:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
40081283:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081285:	f87c      	movi.n	a8, -1
40081287:	0020c0        	memw
4008128a:	09a8      	l32i.n	a10, a9, 0
4008128c:	308830        	xor	a8, a8, a3
4008128f:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
40081292:	0020c0        	memw
40081295:	0989      	s32i.n	a8, a9, 0
40081297:	f01d      	retw.n
40081299:	000000        	ill

4008129c <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
4008129c:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
4008129f:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400812a2:	1198d0        	slli	a9, a8, 3
400812a5:	fcde81        	l32r	a8, 40080620 <_iram_text_start+0xd0>
400812a8:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
400812aa:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
400812ac:	180c      	movi.n	a8, 1
400812ae:	0020c0        	memw
400812b1:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400812b3:	400300        	ssr	a3
400812b6:	912020        	srl	a2, a2
400812b9:	043020        	extui	a3, a2, 0, 1
}
400812bc:	220c      	movi.n	a2, 2
400812be:	832830        	moveqz	a2, a8, a3
400812c1:	f01d      	retw.n
	...

400812c4 <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
400812c4:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
400812c7:	fcd781        	l32r	a8, 40080624 <_iram_text_start+0xd4>
400812ca:	0020c0        	memw
400812cd:	0888      	l32i.n	a8, a8, 0
400812cf:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
400812d2:	688c      	beqz.n	a8, 400812dc <clock_control_esp32_get_rate+0x18>
400812d4:	020c      	movi.n	a2, 0
400812d6:	171826        	beqi	a8, 1, 400812f1 <clock_control_esp32_get_rate+0x2d>
400812d9:	000706        	j	400812f9 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
400812dc:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
400812de:	2228      	l32i.n	a2, a2, 8
400812e0:	1192e0        	slli	a9, a2, 2
400812e3:	fcd121        	l32r	a2, 40080628 <_iram_text_start+0xd8>
400812e6:	229a      	add.n	a2, a2, a9
400812e8:	0228      	l32i.n	a2, a2, 0
400812ea:	0429      	s32i.n	a2, a4, 0
		return 0;
400812ec:	082d      	mov.n	a2, a8
400812ee:	000306        	j	400812fe <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
400812f1:	fcce81        	l32r	a8, 4008062c <_iram_text_start+0xdc>
400812f4:	0489      	s32i.n	a8, a4, 0
		return 0;
400812f6:	000106        	j	400812fe <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
400812f9:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
400812fb:	ddaf22        	movi	a2, -35
	}
}
400812fe:	f01d      	retw.n

40081300 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
40081300:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
40081303:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
40081305:	0a0c      	movi.n	a10, 0
40081307:	fcd681        	l32r	a8, 40080660 <_iram_text_start+0x110>
4008130a:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
4008130d:	0368      	l32i.n	a6, a3, 0
4008130f:	968c      	beqz.n	a6, 4008131c <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
40081311:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
40081313:	021626        	beqi	a6, 1, 40081319 <clock_control_esp32_init+0x19>
40081316:	006ec6        	j	400814d5 <clock_control_esp32_init+0x1d5>
40081319:	001186        	j	40081363 <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
4008131c:	fcc551        	l32r	a5, 40080630 <_iram_text_start+0xe0>
4008131f:	3328      	l32i.n	a2, a3, 12
40081321:	0020c0        	memw
40081324:	0548      	l32i.n	a4, a5, 0
40081326:	00ac62        	movi	a6, 0xfffffc00
40081329:	104460        	and	a4, a4, a6
4008132c:	942020        	extui	a2, a2, 0, 10
4008132f:	202240        	or	a2, a2, a4
40081332:	0020c0        	memw
40081335:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081337:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081339:	fcbf51        	l32r	a5, 40080638 <_iram_text_start+0xe8>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008133c:	1142e0        	slli	a4, a2, 2
4008133f:	fcba21        	l32r	a2, 40080628 <_iram_text_start+0xd8>
40081342:	224a      	add.n	a2, a2, a4
40081344:	0228      	l32i.n	a2, a2, 0
40081346:	fcbb41        	l32r	a4, 40080634 <_iram_text_start+0xe4>
40081349:	220b      	addi.n	a2, a2, -1
4008134b:	0020c0        	memw
4008134e:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081350:	fcb541        	l32r	a4, 40080624 <_iram_text_start+0xd4>
40081353:	0020c0        	memw
40081356:	0428      	l32i.n	a2, a4, 0
40081358:	102250        	and	a2, a2, a5
4008135b:	0020c0        	memw
4008135e:	0429      	s32i.n	a2, a4, 0
		break;
40081360:	0051c6        	j	400814ab <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081363:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
40081365:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081368:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
4008136a:	0c1247        	beq	a2, a4, 4008137a <clock_control_esp32_init+0x7a>
4008136d:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081370:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
40081372:	081257        	beq	a2, a5, 4008137e <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
40081375:	040c      	movi.n	a4, 0
40081377:	000046        	j	4008137c <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
4008137a:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
4008137c:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008137e:	fcaf51        	l32r	a5, 4008063c <_iram_text_start+0xec>
40081381:	fcaf81        	l32r	a8, 40080640 <_iram_text_start+0xf0>
40081384:	0020c0        	memw
40081387:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
40081389:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008138b:	102280        	and	a2, a2, a8
4008138e:	0020c0        	memw
40081391:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
40081393:	0c0c      	movi.n	a12, 0
40081395:	04a0b2        	movi	a11, 4
40081398:	66a0a2        	movi	a10, 102
4008139b:	fcb281        	l32r	a8, 40080664 <_iram_text_start+0x114>
4008139e:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
400813a1:	0d2c      	movi.n	a13, 32
400813a3:	1c0c      	movi.n	a12, 1
400813a5:	04a0b2        	movi	a11, 4
400813a8:	66a0a2        	movi	a10, 102
400813ab:	fcae81        	l32r	a8, 40080664 <_iram_text_start+0x114>
400813ae:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
400813b1:	4c0c      	movi.n	a12, 4
400813b3:	0cbd      	mov.n	a11, a12
400813b5:	9aa0d2        	movi	a13, 154
400813b8:	66a0a2        	movi	a10, 102
400813bb:	fcaa81        	l32r	a8, 40080664 <_iram_text_start+0x114>
400813be:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
400813c1:	0d0c      	movi.n	a13, 0
400813c3:	ac0c      	movi.n	a12, 10
400813c5:	4b0c      	movi.n	a11, 4
400813c7:	66a0a2        	movi	a10, 102
400813ca:	fca681        	l32r	a8, 40080664 <_iram_text_start+0x114>
400813cd:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
400813d0:	0d0c      	movi.n	a13, 0
400813d2:	cc0c      	movi.n	a12, 12
400813d4:	4b0c      	movi.n	a11, 4
400813d6:	66a0a2        	movi	a10, 102
400813d9:	fca281        	l32r	a8, 40080664 <_iram_text_start+0x114>
400813dc:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400813df:	fc9921        	l32r	a2, 40080644 <_iram_text_start+0xf4>
400813e2:	fc9981        	l32r	a8, 40080648 <_iram_text_start+0xf8>
400813e5:	0020c0        	memw
400813e8:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400813ea:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400813ec:	105580        	and	a5, a5, a8
400813ef:	fc9781        	l32r	a8, 4008064c <_iram_text_start+0xfc>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400813f2:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400813f4:	205580        	or	a5, a5, a8
400813f7:	0020c0        	memw
400813fa:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
400813fc:	fc9551        	l32r	a5, 40080650 <_iram_text_start+0x100>
400813ff:	1126c0        	slli	a2, a6, 4
40081402:	c06260        	sub	a6, a2, a6
40081405:	256a      	add.n	a2, a5, a6
40081407:	0102d2        	l8ui	a13, a2, 1
4008140a:	66a0a2        	movi	a10, 102
4008140d:	fc9581        	l32r	a8, 40080664 <_iram_text_start+0x114>
40081410:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081413:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081416:	1127f0        	slli	a2, a7, 1
40081419:	227a      	add.n	a2, a2, a7
4008141b:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008141e:	9c0c      	movi.n	a12, 9
40081420:	4b0c      	movi.n	a11, 4
40081422:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081425:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081427:	fc8f81        	l32r	a8, 40080664 <_iram_text_start+0x114>
4008142a:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008142d:	252a      	add.n	a2, a5, a2
4008142f:	0602d2        	l8ui	a13, a2, 6
40081432:	050252        	l8ui	a5, a2, 5
40081435:	11dd90        	slli	a13, a13, 7
40081438:	1155c0        	slli	a5, a5, 4
4008143b:	20dd50        	or	a13, a13, a5
4008143e:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081441:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081443:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081446:	74d0d0        	extui	a13, a13, 0, 8
40081449:	4b0c      	movi.n	a11, 4
4008144b:	66a0a2        	movi	a10, 102
4008144e:	fc8581        	l32r	a8, 40080664 <_iram_text_start+0x114>
40081451:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
40081454:	0402d2        	l8ui	a13, a2, 4
40081457:	3c0c      	movi.n	a12, 3
40081459:	4b0c      	movi.n	a11, 4
4008145b:	66a0a2        	movi	a10, 102
4008145e:	fc8181        	l32r	a8, 40080664 <_iram_text_start+0x114>
40081461:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
40081464:	0802d2        	l8ui	a13, a2, 8
40081467:	070222        	l8ui	a2, a2, 7
4008146a:	11dda0        	slli	a13, a13, 6
4008146d:	20dd20        	or	a13, a13, a2
40081470:	74d0d0        	extui	a13, a13, 0, 8
40081473:	5c0c      	movi.n	a12, 5
40081475:	4b0c      	movi.n	a11, 4
40081477:	66a0a2        	movi	a10, 102
4008147a:	fc7a81        	l32r	a8, 40080664 <_iram_text_start+0x114>
4008147d:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081480:	fc7521        	l32r	a2, 40080654 <_iram_text_start+0x104>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
40081483:	fc6d51        	l32r	a5, 40080638 <_iram_text_start+0xe8>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
40081486:	0020c0        	memw
40081489:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
4008148b:	fc6641        	l32r	a4, 40080624 <_iram_text_start+0xd4>
4008148e:	0020c0        	memw
40081491:	0428      	l32i.n	a2, a4, 0
40081493:	102250        	and	a2, a2, a5
40081496:	fc7051        	l32r	a5, 40080658 <_iram_text_start+0x108>
40081499:	202250        	or	a2, a2, a5
4008149c:	0020c0        	memw
4008149f:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
400814a1:	fc6e21        	l32r	a2, 4008065c <_iram_text_start+0x10c>
400814a4:	f44c      	movi.n	a4, 79
400814a6:	0020c0        	memw
400814a9:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
400814ab:	03ea40        	rsr.ccount	a4
400814ae:	13a8      	l32i.n	a10, a3, 4
400814b0:	2338      	l32i.n	a3, a3, 8
400814b2:	312f40        	srai	a2, a4, 31
400814b5:	1153e0        	slli	a5, a3, 2
400814b8:	fc5c31        	l32r	a3, 40080628 <_iram_text_start+0xd8>
400814bb:	8222a0        	mull	a2, a2, a10
400814be:	a2ba40        	muluh	a11, a10, a4
400814c1:	335a      	add.n	a3, a3, a5
400814c3:	03c8      	l32i.n	a12, a3, 0
400814c5:	82aa40        	mull	a10, a10, a4
400814c8:	0d0c      	movi.n	a13, 0
400814ca:	80b2b0        	add	a11, a2, a11
400814cd:	023825        	call8	40083850 <__udivdi3>
400814d0:	13eaa0        	wsr.ccount	a10
	return 0;
400814d3:	020c      	movi.n	a2, 0
}
400814d5:	f01d      	retw.n
	...

400814d8 <clock_control_esp32_off>:
{
400814d8:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
400814db:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400814de:	180c      	movi.n	a8, 1
400814e0:	401300        	ssl	a3
400814e3:	a13800        	sll	a3, a8
400814e6:	1189d0        	slli	a8, a9, 3
400814e9:	fc4d91        	l32r	a9, 40080620 <_iram_text_start+0xd0>
}
400814ec:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400814ee:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
400814f0:	09a8      	l32i.n	a10, a9, 0
400814f2:	f87c      	movi.n	a8, -1
400814f4:	0020c0        	memw
400814f7:	0ab8      	l32i.n	a11, a10, 0
400814f9:	308830        	xor	a8, a8, a3
400814fc:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
400814ff:	0020c0        	memw
40081502:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
40081504:	1988      	l32i.n	a8, a9, 4
40081506:	0020c0        	memw
40081509:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008150b:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
4008150e:	0020c0        	memw
40081511:	0839      	s32i.n	a3, a8, 0
}
40081513:	f01d      	retw.n
40081515:	000000        	ill

40081518 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
40081518:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008151b:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
4008151d:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008151f:	253827        	bltu	a8, a2, 40081548 <set_reg+0x30>
	off = pin_mux_off[pin];
40081522:	fc5191        	l32r	a9, 40080668 <_iram_text_start+0x118>
40081525:	992a      	add.n	a9, a9, a2
40081527:	000992        	l8ui	a9, a9, 0
	if (!off) {
4008152a:	a99c      	beqz.n	a9, 40081548 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
4008152c:	fc5021        	l32r	a2, 4008066c <_iram_text_start+0x11c>
	}

	v = *reg;
	v &= ~clr_mask;
4008152f:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081531:	992a      	add.n	a9, a9, a2
	v = *reg;
40081533:	0020c0        	memw
40081536:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081538:	308830        	xor	a8, a8, a3
4008153b:	108820        	and	a8, a8, a2
	v |= set_mask;
4008153e:	208840        	or	a8, a8, a4
	*reg = v;
40081541:	0020c0        	memw
40081544:	0989      	s32i.n	a8, a9, 0

	return 0;
40081546:	0a0c      	movi.n	a10, 0
}
40081548:	0a2d      	mov.n	a2, a10
4008154a:	f01d      	retw.n

4008154c <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
4008154c:	004136        	entry	a1, 32
4008154f:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
40081552:	eaaf22        	movi	a2, -22
	if (func > 6) {
40081555:	1174f6        	bgeui	a4, 7, 4008156a <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
40081558:	fc46c1        	l32r	a12, 40080670 <_iram_text_start+0x120>
4008155b:	114440        	slli	a4, a4, 12
4008155e:	fc45b1        	l32r	a11, 40080674 <_iram_text_start+0x124>
40081561:	20c4c0        	or	a12, a4, a12
40081564:	fffb25        	call8	40081518 <set_reg>
40081567:	202aa0        	or	a2, a10, a10
}
4008156a:	f01d      	retw.n

4008156c <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
4008156c:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
4008156f:	f81c      	movi.n	a8, 31
{
40081571:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
40081574:	00a052        	movi	a5, 0
40081577:	013837        	bltu	a8, a3, 4008157c <pinmux_input+0x10>
4008157a:	350c      	movi.n	a5, 3
4008157c:	fc3f81        	l32r	a8, 40080678 <_iram_text_start+0x128>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
4008157f:	00a2c2        	movi	a12, 0x200
40081582:	0b0c      	movi.n	a11, 0
40081584:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
40081586:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
40081589:	fff8e5        	call8	40081518 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
4008158c:	051466        	bnei	a4, 1, 40081595 <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
4008158f:	000582        	l8ui	a8, a5, 0
40081592:	000286        	j	400815a0 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
40081595:	74ec      	bnez.n	a4, 400815c0 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
40081597:	dec342        	addi	a4, a3, -34
4008159a:	2264b6        	bltui	a4, 6, 400815c0 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
4008159d:	010582        	l8ui	a8, a5, 1
400815a0:	fc3741        	l32r	a4, 4008067c <_iram_text_start+0x12c>
400815a3:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
400815a5:	019a96        	bltz	a10, 400815c2 <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
400815a8:	020542        	l8ui	a4, a5, 2
400815ab:	150c      	movi.n	a5, 1
400815ad:	c03340        	sub	a3, a3, a4
400815b0:	401300        	ssl	a3
400815b3:	a13500        	sll	a3, a5
400815b6:	0020c0        	memw
400815b9:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
400815bb:	0a0c      	movi.n	a10, 0
400815bd:	000046        	j	400815c2 <pinmux_input+0x56>
		return -EINVAL;
400815c0:	aa6c      	movi.n	a10, -22
}
400815c2:	0a2d      	mov.n	a2, a10
400815c4:	f01d      	retw.n
	...

400815c8 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
400815c8:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400815cb:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
400815cd:	203220        	or	a3, a2, a2
400815d0:	20b220        	or	a11, a2, a2
400815d3:	20c330        	or	a12, a3, a3
400815d6:	20a330        	or	a10, a3, a3
400815d9:	fff725        	call8	4008154c <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400815dc:	221b      	addi.n	a2, a2, 1
400815de:	882c      	movi.n	a8, 40
400815e0:	ec9287        	bne	a2, a8, 400815d0 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
400815e3:	020c      	movi.n	a2, 0
400815e5:	f01d      	retw.n
	...

400815e8 <pinmux_pullup>:
{
400815e8:	004136        	entry	a1, 32
400815eb:	744040        	extui	a4, a4, 0, 8
400815ee:	03ad      	mov.n	a10, a3
	switch (func) {
400815f0:	848c      	beqz.n	a4, 400815fc <pinmux_pullup+0x14>
400815f2:	0f1426        	beqi	a4, 1, 40081605 <pinmux_pullup+0x1d>
	return -EINVAL;
400815f5:	aa6c      	movi.n	a10, -22
400815f7:	0004c6        	j	4008160e <pinmux_pullup+0x26>
400815fa:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
400815fd:	b280a0        	mulsh	a8, a0, a10
40081600:	4600a1        	l32r	a10, 40052e00 <esp32_rom_gpio_matrix_out+0x48ef4>
40081603:	c20001        	l32r	a0, 40071e04 <esp32_rom_gpio_matrix_out+0x67ef8>
		return set_reg(pin, FUN_PD, FUN_PU);
40081606:	b200a1        	l32r	a10, 4006de08 <esp32_rom_gpio_matrix_out+0x63efc>
40081609:	e580a0        	extui	a8, a10, 16, 15
4008160c:	2dfff0        	lsi	f15, a15, 180
}
4008160f:	1d0a      	add.n	a1, a13, a0
40081611:	0000f0        	callx12	a0

40081614 <pinmux_get>:
{
40081614:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081617:	782c      	movi.n	a8, 39
		return -EINVAL;
40081619:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008161b:	1d3837        	bltu	a8, a3, 4008163c <pinmux_get+0x28>
	off = pin_mux_off[pin];
4008161e:	fc1221        	l32r	a2, 40080668 <_iram_text_start+0x118>
40081621:	223a      	add.n	a2, a2, a3
40081623:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
40081626:	a26c      	movi.n	a2, -22
	if (!off) {
40081628:	089c      	beqz.n	a8, 4008163c <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
4008162a:	fc1021        	l32r	a2, 4008066c <_iram_text_start+0x11c>
4008162d:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
4008162f:	0020c0        	memw
40081632:	0828      	l32i.n	a2, a8, 0
40081634:	242c20        	extui	a2, a2, 12, 3
40081637:	0429      	s32i.n	a2, a4, 0
	return 0;
40081639:	00a022        	movi	a2, 0
}
4008163c:	f01d      	retw.n
	...

40081640 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081640:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081643:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081646:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081649:	fc0d91        	l32r	a9, 40080680 <_iram_text_start+0x130>
4008164c:	fc0e81        	l32r	a8, 40080684 <_iram_text_start+0x134>
4008164f:	0029b2        	l32i	a11, a9, 0
40081652:	c0aab0        	sub	a10, a10, a11
40081655:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
40081658:	fc0c81        	l32r	a8, 40080688 <_iram_text_start+0x138>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
4008165b:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
4008165e:	828a80        	mull	a8, a10, a8
40081661:	8088b0        	add	a8, a8, a11
40081664:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
40081667:	13e6c0        	wsr.ps	a12
4008166a:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
4008166d:	01d8e5        	call8	400833fc <z_clock_announce>
}
40081670:	f01d      	retw.n
	...

40081674 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
40081674:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081677:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
4008167a:	fc0391        	l32r	a9, 40080688 <_iram_text_start+0x138>
4008167d:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
4008167f:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081682:	03e480        	rsr.intenable	a8
	val |= mask;
40081685:	fc0191        	l32r	a9, 4008068c <_iram_text_start+0x13c>
40081688:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
4008168b:	13e480        	wsr.intenable	a8
4008168e:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
40081691:	020c      	movi.n	a2, 0
40081693:	f01d      	retw.n
40081695:	000000        	ill

40081698 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
40081698:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
4008169b:	020266        	bnei	a2, -1, 400816a1 <z_clock_set_timeout+0x9>
4008169e:	fbfc21        	l32r	a2, 40080690 <_iram_text_start+0x140>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400816a1:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400816a4:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
400816a7:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
400816a9:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
400816ab:	532280        	max	a2, a2, a8
400816ae:	fbf881        	l32r	a8, 40080690 <_iram_text_start+0x140>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816b1:	fbf8a1        	l32r	a10, 40080694 <_iram_text_start+0x144>
	cyc = ticks * CYC_PER_TICK;
400816b4:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816b7:	fbf281        	l32r	a8, 40080680 <_iram_text_start+0x130>
	cyc = ticks * CYC_PER_TICK;
400816ba:	fbf3d1        	l32r	a13, 40080688 <_iram_text_start+0x138>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816bd:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
400816bf:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816c2:	c0aa90        	sub	a10, a10, a9
400816c5:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
400816c7:	f87c      	movi.n	a8, -1
400816c9:	30e8a0        	xor	a14, a8, a10
400816cc:	013e27        	bltu	a14, a2, 400816d1 <z_clock_set_timeout+0x39>
		cyc += adj;
400816cf:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400816d1:	fbec21        	l32r	a2, 40080684 <_iram_text_start+0x134>
400816d4:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
400816d7:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400816da:	418980        	srli	a8, a8, 9
400816dd:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
400816e0:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
400816e3:	c0b8b0        	sub	a11, a8, a11
400816e6:	0232b7        	bltu	a2, a11, 400816ec <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
400816e9:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
400816ec:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
400816ef:	13e6c0        	wsr.ps	a12
400816f2:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
400816f5:	f01d      	retw.n
	...

400816f8 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
400816f8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400816fb:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400816fe:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
40081701:	fbdf91        	l32r	a9, 40080680 <_iram_text_start+0x130>
40081704:	0998      	l32i.n	a9, a9, 0
40081706:	c02290        	sub	a2, a2, a9
40081709:	fbde91        	l32r	a9, 40080684 <_iram_text_start+0x134>
4008170c:	a22290        	muluh	a2, a2, a9
4008170f:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
40081712:	13e680        	wsr.ps	a8
40081715:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
40081718:	f01d      	retw.n
	...

4008171c <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
4008171c:	004136        	entry	a1, 32
	if (esf) {
4008171f:	338c      	beqz.n	a3, 40081726 <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
40081721:	03ad      	mov.n	a10, a3
40081723:	01e6e5        	call8	40083590 <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
40081726:	20b330        	or	a11, a3, a3
40081729:	20a220        	or	a10, a2, a2
4008172c:	010925        	call8	400827c0 <z_fatal_error>
}
4008172f:	000090        	retw
	...

40081734 <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
40081734:	10ccc0        	and	a12, a12, a12
40081737:	408030        	rotw	3
4008173a:	10ccc0        	and	a12, a12, a12
4008173d:	408030        	rotw	3
40081740:	10ccc0        	and	a12, a12, a12
40081743:	408030        	rotw	3
40081746:	10ccc0        	and	a12, a12, a12
40081749:	408030        	rotw	3
4008174c:	10ccc0        	and	a12, a12, a12
4008174f:	408040        	rotw	4
        ret
40081752:	f00d      	ret.n

40081754 <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
40081754:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
40081757:	113200        	slli	a3, a2, 16
	or a2, a2, a3
4008175a:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
4008175d:	034830        	rsr.windowbase	a3
	ssr a3
40081760:	400300        	ssr	a3
	srl a2, a2
40081763:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
40081766:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
40081768:	28e217        	bbsi	a2, 1, 40081794 <_high_gpr_spill_done>
	addi a1, a1, -16
4008176b:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
4008176e:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081770:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
40081772:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
40081774:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
40081776:	1ae227        	bbsi	a2, 2, 40081794 <_high_gpr_spill_done>
	addi a1, a1, -16
40081779:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
4008177c:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
4008177e:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
40081780:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
40081782:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
40081784:	0ce237        	bbsi	a2, 3, 40081794 <_high_gpr_spill_done>
	addi a1, a1, -16
40081787:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
4008178a:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
4008178c:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
4008178e:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
40081791:	0361f2        	s32i	a15, a1, 12

40081794 <_high_gpr_spill_done>:
	addi a1, a1, -4
40081794:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
40081797:	0139      	s32i.n	a3, a1, 0
	ret
40081799:	f00d      	ret.n
	...

4008179c <xtensa_restore_high_regs>:
	l32i a2, a1, 0
4008179c:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
4008179e:	114b      	addi.n	a1, a1, 4
	mov a3, a2
400817a0:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
400817a2:	261127        	beq	a1, a2, 400817cc <_high_restore_done>
	addi a2, a2, -16
400817a5:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
400817a8:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
400817aa:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
400817ac:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
400817ae:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
400817b0:	181127        	beq	a1, a2, 400817cc <_high_restore_done>
	addi a2, a2, -16
400817b3:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
400817b6:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
400817b8:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
400817ba:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
400817bc:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
400817be:	0a1127        	beq	a1, a2, 400817cc <_high_restore_done>
	addi a2, a2, -16
400817c1:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
400817c4:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
400817c6:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
400817c8:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
400817ca:	32f8      	l32i.n	a15, a2, 12

400817cc <_high_restore_done>:
	mov a1, a3 /* Original stack */
400817cc:	031d      	mov.n	a1, a3
	ret
400817ce:	f00d      	ret.n
	...

400817d1 <_restore_context>:
	call0 xtensa_restore_high_regs
400817d1:	fffc85        	call0	4008179c <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
400817d4:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
400817d6:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
400817d9:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
400817db:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
400817de:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
400817e0:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
400817e3:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
400817e5:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
400817e8:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
400817ea:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
400817ed:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
400817ef:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
400817f2:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
400817f4:	130c00        	wsr.scompare1	a0
	rsync
400817f7:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
400817fa:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
400817fc:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
400817fe:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
40081800:	3cc112        	addi	a1, a1, 60
	rfi 6
40081803:	003610        	rfi	6
	...

40081808 <xtensa_switch>:
	entry a1, 16
40081808:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
4008180b:	10ccc0        	and	a12, a12, a12
4008180e:	408030        	rotw	3
40081811:	10ccc0        	and	a12, a12, a12
40081814:	408030        	rotw	3
40081817:	10ccc0        	and	a12, a12, a12
4008181a:	408030        	rotw	3
4008181d:	10ccc0        	and	a12, a12, a12
40081820:	408030        	rotw	3
40081823:	10ccc0        	and	a12, a12, a12
40081826:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
40081829:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
4008182c:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
4008182e:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081830:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
40081832:	030300        	rsr.sar	a0
40081835:	4109      	s32i.n	a0, a1, 16
40081837:	030000        	rsr.lbeg	a0
4008183a:	3109      	s32i.n	a0, a1, 12
4008183c:	030100        	rsr.lend	a0
4008183f:	2109      	s32i.n	a0, a1, 8
40081841:	030200        	rsr.lcount	a0
40081844:	1109      	s32i.n	a0, a1, 4
40081846:	030c00        	rsr.scompare1	a0
40081849:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
4008184b:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
4008184e:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081850:	fb9201        	l32r	a0, 40080698 <_iram_text_start+0x148>
	s32i a0, a1, BSA_PC_OFF
40081853:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
40081855:	ffefc5        	call0	40081754 <xtensa_save_high_regs>
	l32i a2, a1, 0
40081858:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
4008185a:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
4008185c:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
4008185e:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081860:	ffdb46        	j	400817d1 <_restore_context>

40081863 <_switch_restore_pc>:
	retw
40081863:	f01d      	retw.n
40081865:	000000        	ill

40081868 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
40081868:	8129      	s32i.n	a2, a1, 32
4008186a:	030300        	rsr.sar	a0
4008186d:	4109      	s32i.n	a0, a1, 16
4008186f:	030000        	rsr.lbeg	a0
40081872:	3109      	s32i.n	a0, a1, 12
40081874:	030100        	rsr.lend	a0
40081877:	2109      	s32i.n	a0, a1, 8
40081879:	030200        	rsr.lcount	a0
4008187c:	1109      	s32i.n	a0, a1, 4
4008187e:	030c00        	rsr.scompare1	a0
40081881:	0109      	s32i.n	a0, a1, 0
40081883:	ffed05        	call0	40081754 <xtensa_save_high_regs>
40081886:	0128      	l32i.n	a2, a1, 0
40081888:	8228      	l32i.n	a2, a2, 32
4008188a:	03e600        	rsr.ps	a0
4008188d:	f30c      	movi.n	a3, 15
4008188f:	100030        	and	a0, a0, a3
40081892:	a0cc      	bnez.n	a0, 400818a0 <_not_l1>
40081894:	03e600        	rsr.ps	a0
40081897:	01a032        	movi	a3, 1
4008189a:	200030        	or	a0, a0, a3
4008189d:	13e600        	wsr.ps	a0

400818a0 <_not_l1>:
400818a0:	03e600        	rsr.ps	a0
400818a3:	f36c      	movi.n	a3, -17
400818a5:	100030        	and	a0, a0, a3
400818a8:	13e600        	wsr.ps	a0
400818ab:	002010        	rsync
400818ae:	03f430        	rsr.misc0	a3
400818b1:	0308      	l32i.n	a0, a3, 0
400818b3:	708c      	beqz.n	a0, 400818be <_switch_stacks_3>
400818b5:	001b      	addi.n	a0, a0, 1
400818b7:	0309      	s32i.n	a0, a3, 0
400818b9:	013d      	mov.n	a3, a1
400818bb:	000146        	j	400818c4 <_do_call_3>

400818be <_switch_stacks_3>:
400818be:	001b      	addi.n	a0, a0, 1
400818c0:	0309      	s32i.n	a0, a3, 0
400818c2:	1338      	l32i.n	a3, a3, 4

400818c4 <_do_call_3>:
400818c4:	036d      	mov.n	a6, a3
400818c6:	01ad      	mov.n	a10, a1
400818c8:	013d      	mov.n	a3, a1
400818ca:	02bd      	mov.n	a11, a2
400818cc:	0118      	l32i.n	a1, a1, 0
400818ce:	3cc112        	addi	a1, a1, 60
400818d1:	000095        	call4	400818dc <_xstack_call0_5>
400818d4:	031d      	mov.n	a1, a3
400818d6:	062d      	mov.n	a2, a6
400818d8:	0003c6        	j	400818eb <_xstack_returned_5>
	...

400818dc <_xstack_call0_5>:
400818dc:	002136        	entry	a1, 16
400818df:	021d      	mov.n	a1, a2
400818e1:	000055        	call4	400818e8 <_xstack_call1_5>
400818e4:	062d      	mov.n	a2, a6
400818e6:	f01d      	retw.n

400818e8 <_xstack_call1_5>:
400818e8:	0007a0        	jx	a7

400818eb <_xstack_returned_5>:
400818eb:	006700        	rsil	a0, 7
400818ee:	03f430        	rsr.misc0	a3
400818f1:	0308      	l32i.n	a0, a3, 0
400818f3:	000b      	addi.n	a0, a0, -1
400818f5:	0309      	s32i.n	a0, a3, 0
400818f7:	251617        	beq	a6, a1, 40081920 <_restore_3>
400818fa:	0118      	l32i.n	a1, a1, 0
400818fc:	3cc112        	addi	a1, a1, 60
400818ff:	10ccc0        	and	a12, a12, a12
40081902:	408030        	rotw	3
40081905:	10ccc0        	and	a12, a12, a12
40081908:	408030        	rotw	3
4008190b:	10ccc0        	and	a12, a12, a12
4008190e:	408030        	rotw	3
40081911:	10ccc0        	and	a12, a12, a12
40081914:	408030        	rotw	3
40081917:	10ccc0        	and	a12, a12, a12
4008191a:	408040        	rotw	4
4008191d:	201660        	or	a1, a6, a6

40081920 <_restore_3>:
40081920:	ffab46        	j	400817d1 <_restore_context>
	...

40081924 <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
40081924:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
40081927:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
4008192a:	cc2c      	movi.n	a12, 44
4008192c:	0b0c      	movi.n	a11, 0
4008192e:	20a770        	or	a10, a7, a7
40081931:	01c825        	call8	400835b4 <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
40081934:	fb5a91        	l32r	a9, 4008069c <_iram_text_start+0x14c>
40081937:	ecc282        	addi	a8, a2, -20
4008193a:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
4008193c:	fb5991        	l32r	a9, 400806a0 <_iram_text_start+0x150>
4008193f:	e8c282        	addi	a8, a2, -24
40081942:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
40081944:	d0c282        	addi	a8, a2, -48
40081947:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
40081949:	ccc282        	addi	a8, a2, -52
4008194c:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
4008194e:	c8c292        	addi	a9, a2, -56
40081951:	080c      	movi.n	a8, 0
40081953:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
40081955:	c4c292        	addi	a9, a2, -60
40081958:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
4008195a:	c0c292        	addi	a9, a2, -64
4008195d:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
4008195f:	bcc292        	addi	a9, a2, -68
40081962:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
40081964:	b8c282        	addi	a8, a2, -72
40081967:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
40081969:	b4c282        	addi	a8, a2, -76
4008196c:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
4008196e:	b0c222        	addi	a2, a2, -80
40081971:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
40081973:	f01d      	retw.n
40081975:	000000        	ill

40081978 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
40081978:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008197b:	81e8      	l32i.n	a14, a1, 32
{
4008197d:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008197f:	06cd      	mov.n	a12, a6
40081981:	05bd      	mov.n	a11, a5
40081983:	04ad      	mov.n	a10, a4
40081985:	fff9e5        	call8	40081924 <xtensa_init_stack>
40081988:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
4008198b:	f01d      	retw.n
4008198d:	000000        	ill

40081990 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
40081990:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
40081993:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
40081996:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
40081999:	0b0c      	movi.n	a11, 0
4008199b:	1a0c      	movi.n	a10, 1
4008199d:	ffd7e5        	call8	4008171c <z_xtensa_fatal_error>
}
400819a0:	f01d      	retw.n
	...

400819a4 <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
400819a4:	004136        	entry	a1, 32
400819a7:	03e240        	rsr.interrupt	a4
400819aa:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
400819ad:	fb3d51        	l32r	a5, 400806a4 <_iram_text_start+0x154>
400819b0:	104430        	and	a4, a4, a3
400819b3:	0e8457        	bany	a4, a5, 400819c5 <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
400819b6:	fb3c31        	l32r	a3, 400806a8 <_iram_text_start+0x158>
400819b9:	0f8437        	bany	a4, a3, 400819cc <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
400819bc:	fb3c31        	l32r	a3, 400806ac <_iram_text_start+0x15c>
400819bf:	0e8437        	bany	a4, a3, 400819d1 <xtensa_int2_c+0x2d>
400819c2:	000986        	j	400819ec <xtensa_int2_c+0x48>
		irq = 19;
400819c5:	381c      	movi.n	a8, 19
		mask = BIT(19);
400819c7:	053d      	mov.n	a3, a5
400819c9:	000186        	j	400819d3 <xtensa_int2_c+0x2f>
		irq = 20;
400819cc:	481c      	movi.n	a8, 20
400819ce:	000046        	j	400819d3 <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
400819d1:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819d3:	fb3791        	l32r	a9, 400806b0 <_iram_text_start+0x160>
400819d6:	1188d0        	slli	a8, a8, 3
400819d9:	898a      	add.n	a8, a9, a8
400819db:	1898      	l32i.n	a9, a8, 4
400819dd:	08a8      	l32i.n	a10, a8, 0
400819df:	304430        	xor	a4, a4, a3
400819e2:	0009e0        	callx8	a9
400819e5:	13e330        	wsr.intclear	a3
400819e8:	fff1c6        	j	400819b3 <xtensa_int2_c+0xf>
400819eb:	a22000        	muluh	a2, a0, a0
400819ee:	042520        	extui	a2, a2, 5, 1
400819f1:	2aa001        	l32r	a0, 4004c474 <esp32_rom_gpio_matrix_out+0x42568>
400819f4:	009020        	all4	b2, b0:b1:b2:b3
	...

400819f8 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
400819f8:	004136        	entry	a1, 32
400819fb:	03e240        	rsr.interrupt	a4
400819fe:	03e430        	rsr.intenable	a3
40081a01:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
40081a04:	fb2f31        	l32r	a3, 400806c0 <_iram_text_start+0x170>
40081a07:	150437        	bnone	a4, a3, 40081a20 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
40081a0a:	fb1931        	l32r	a3, 40080670 <_iram_text_start+0x120>
40081a0d:	268437        	bany	a4, a3, 40081a37 <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
40081a10:	fb1f31        	l32r	a3, 4008068c <_iram_text_start+0x13c>
40081a13:	258437        	bany	a4, a3, 40081a3c <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
40081a16:	fb2731        	l32r	a3, 400806b4 <_iram_text_start+0x164>
40081a19:	490437        	bnone	a4, a3, 40081a66 <xtensa_int3_c+0x6e>
40081a1c:	000846        	j	40081a41 <xtensa_int3_c+0x49>
40081a1f:	263100        	lsi	f0, a1, 152
		if (mask & BIT(23)) {
40081a22:	37fb      	addi.n	a3, a7, 15
40081a24:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
40081a27:	fb0c      	movi.n	a11, 15
40081a29:	1f8437        	bany	a4, a3, 40081a4c <xtensa_int3_c+0x54>
		if (mask & BIT(29)) {
40081a2c:	fb2431        	l32r	a3, 400806bc <_iram_text_start+0x16c>
40081a2f:	330437        	bnone	a4, a3, 40081a66 <xtensa_int3_c+0x6e>
			irq = 29;
40081a32:	d81c      	movi.n	a8, 29
40081a34:	000586        	j	40081a4e <xtensa_int3_c+0x56>
			irq = 11;
40081a37:	b80c      	movi.n	a8, 11
40081a39:	000446        	j	40081a4e <xtensa_int3_c+0x56>
			irq = 15;
40081a3c:	f80c      	movi.n	a8, 15
40081a3e:	000306        	j	40081a4e <xtensa_int3_c+0x56>
			irq = 22;
40081a41:	681c      	movi.n	a8, 22
40081a43:	0001c6        	j	40081a4e <xtensa_int3_c+0x56>
			irq = 23;
40081a46:	781c      	movi.n	a8, 23
40081a48:	000086        	j	40081a4e <xtensa_int3_c+0x56>
40081a4b:	b81c00        	lsi	f0, a12, 0x2e0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a4e:	fb1891        	l32r	a9, 400806b0 <_iram_text_start+0x160>
40081a51:	1188d0        	slli	a8, a8, 3
40081a54:	898a      	add.n	a8, a9, a8
40081a56:	1898      	l32i.n	a9, a8, 4
40081a58:	08a8      	l32i.n	a10, a8, 0
40081a5a:	304430        	xor	a4, a4, a3
40081a5d:	0009e0        	callx8	a9
40081a60:	13e330        	wsr.intclear	a3
40081a63:	ffe746        	j	40081a04 <xtensa_int3_c+0xc>
40081a66:	20a220        	or	a10, a2, a2
40081a69:	00fc65        	call8	40082a30 <z_get_next_switch_handle>
40081a6c:	202aa0        	or	a2, a10, a10
40081a6f:	000090        	retw
	...

40081a74 <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
40081a74:	004136        	entry	a1, 32
40081a77:	03e240        	rsr.interrupt	a4
40081a7a:	03e430        	rsr.intenable	a3
40081a7d:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
40081a80:	fb1531        	l32r	a3, 400806d4 <_iram_text_start+0x184>
40081a83:	0e0437        	bnone	a4, a3, 40081a95 <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
40081a86:	fb0f31        	l32r	a3, 400806c4 <_iram_text_start+0x174>
40081a89:	198437        	bany	a4, a3, 40081aa6 <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
40081a8c:	fb0f31        	l32r	a3, 400806c8 <_iram_text_start+0x178>
40081a8f:	370437        	bnone	a4, a3, 40081aca <xtensa_int4_c+0x56>
40081a92:	000546        	j	40081aab <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
40081a95:	fb0d31        	l32r	a3, 400806cc <_iram_text_start+0x17c>
40081a98:	148437        	bany	a4, a3, 40081ab0 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
40081a9b:	fb0d31        	l32r	a3, 400806d0 <_iram_text_start+0x180>
40081a9e:	280437        	bnone	a4, a3, 40081aca <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
40081aa1:	e81c      	movi.n	a8, 30
40081aa3:	0002c6        	j	40081ab2 <xtensa_int4_c+0x3e>
			irq = 24;
40081aa6:	881c      	movi.n	a8, 24
40081aa8:	000186        	j	40081ab2 <xtensa_int4_c+0x3e>
			irq = 25;
40081aab:	981c      	movi.n	a8, 25
40081aad:	000046        	j	40081ab2 <xtensa_int4_c+0x3e>
			irq = 28;
40081ab0:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081ab2:	faff91        	l32r	a9, 400806b0 <_iram_text_start+0x160>
40081ab5:	1188d0        	slli	a8, a8, 3
40081ab8:	898a      	add.n	a8, a9, a8
40081aba:	1898      	l32i.n	a9, a8, 4
40081abc:	08a8      	l32i.n	a10, a8, 0
40081abe:	304430        	xor	a4, a4, a3
40081ac1:	0009e0        	callx8	a9
40081ac4:	13e330        	wsr.intclear	a3
40081ac7:	ffed46        	j	40081a80 <xtensa_int4_c+0xc>
40081aca:	20a220        	or	a10, a2, a2
40081acd:	00f625        	call8	40082a30 <z_get_next_switch_handle>
40081ad0:	202aa0        	or	a2, a10, a10
40081ad3:	000090        	retw
	...

40081ad8 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
40081ad8:	004136        	entry	a1, 32
40081adb:	03e240        	rsr.interrupt	a4
40081ade:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
40081ae1:	fafd51        	l32r	a5, 400806d8 <_iram_text_start+0x188>
40081ae4:	104430        	and	a4, a4, a3
40081ae7:	0001c6        	j	40081af2 <xtensa_int5_c+0x1a>
40081aea:	300000        	xor	a0, a0, a0
40081aed:	303044        	lsi	f4, a0, 192
40081af0:	5713e3        	lsi	f14, a3, 0x15c
40081af3:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
40081af6:	faf9      	s32i.n	a15, a10, 60
40081af8:	118437        	bany	a4, a3, 40081b0d <xtensa_int5_c+0x35>
	if (mask & BIT(31)) {
40081afb:	0254d6        	bgez	a4, 40081b24 <xtensa_int5_c+0x4c>
		irq = 31;
40081afe:	f81c      	movi.n	a8, 31
		mask = BIT(31);
40081b00:	faf831        	l32r	a3, 400806e0 <_iram_text_start+0x190>
40081b03:	000206        	j	40081b0f <xtensa_int5_c+0x37>
		irq = 16;
40081b06:	081c      	movi.n	a8, 16
		mask = BIT(16);
40081b08:	053d      	mov.n	a3, a5
40081b0a:	000046        	j	40081b0f <xtensa_int5_c+0x37>
		irq = 26;
40081b0d:	a81c      	movi.n	a8, 26
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b0f:	fae891        	l32r	a9, 400806b0 <_iram_text_start+0x160>
40081b12:	1188d0        	slli	a8, a8, 3
40081b15:	808980        	add	a8, a9, a8
40081b18:	012892        	l32i	a9, a8, 4
40081b1b:	0028a2        	l32i	a10, a8, 0
40081b1e:	0009e0        	callx8	a9
40081b21:	fc7356        	bnez	a3, 40081aec <xtensa_int5_c+0x14>
40081b24:	20a220        	or	a10, a2, a2
40081b27:	00f0a5        	call8	40082a30 <z_get_next_switch_handle>
40081b2a:	202aa0        	or	a2, a10, a10
40081b2d:	000090        	retw

40081b30 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081b30:	004136        	entry	a1, 32
40081b33:	20a220        	or	a10, a2, a2
40081b36:	03e280        	rsr.interrupt	a8
40081b39:	03e480        	rsr.intenable	a8
40081b3c:	00ef25        	call8	40082a30 <z_get_next_switch_handle>
40081b3f:	202aa0        	or	a2, a10, a10
40081b42:	000090        	retw
40081b45:	000000        	ill

40081b48 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081b48:	004136        	entry	a1, 32
40081b4b:	03e230        	rsr.interrupt	a3
40081b4e:	03e440        	rsr.intenable	a4
40081b51:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081b54:	fae441        	l32r	a4, 400806e4 <_iram_text_start+0x194>
40081b57:	150347        	bnone	a3, a4, 40081b70 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b5a:	fad581        	l32r	a8, 400806b0 <_iram_text_start+0x160>
40081b5d:	303340        	xor	a3, a3, a4
40081b60:	1d2892        	l32i	a9, a8, 116
40081b63:	1c28a2        	l32i	a10, a8, 112
40081b66:	0009e0        	callx8	a9
40081b69:	13e340        	wsr.intclear	a4
40081b6c:	fff9c6        	j	40081b57 <xtensa_int7_c+0xf>
40081b6f:	a22000        	muluh	a2, a0, a0
40081b72:	ebe520        	f64cmpl	a14, a5, a2
40081b75:	2aa000        	mul.s	f10, f0, f0
40081b78:	009020        	all4	b2, b0:b1:b2:b3
	...

40081b7c <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081b7c:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081b7f:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081b82:	024526        	beqi	a5, 4, 40081b88 <xtensa_excint1_c+0xc>
40081b85:	0045c6        	j	40081ca0 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081b88:	03e240        	rsr.interrupt	a4
40081b8b:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081b8e:	80a762        	movi	a6, 0x780
40081b91:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081b94:	643040        	extui	a3, a4, 0, 7
40081b97:	048316        	beqz	a3, 40081be3 <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081b9a:	243040        	extui	a3, a4, 0, 3
40081b9d:	739c      	beqz.n	a3, 40081bb8 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081b9f:	043040        	extui	a3, a4, 0, 1
40081ba2:	09a356        	bnez	a3, 40081c40 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081ba5:	290c      	movi.n	a9, 2
40081ba7:	020497        	bnone	a4, a9, 40081bad <xtensa_excint1_c+0x31>
40081baa:	0025c6        	j	40081c45 <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081bad:	430c      	movi.n	a3, 4
40081baf:	028437        	bany	a4, a3, 40081bb5 <xtensa_excint1_c+0x39>
40081bb2:	004186        	j	40081cbc <xtensa_excint1_c+0x140>
40081bb5:	0024c6        	j	40081c4c <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081bb8:	831c      	movi.n	a3, 24
40081bba:	120437        	bnone	a4, a3, 40081bd0 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081bbd:	830c      	movi.n	a3, 8
40081bbf:	020437        	bnone	a4, a3, 40081bc5 <xtensa_excint1_c+0x49>
40081bc2:	0022c6        	j	40081c51 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081bc5:	031c      	movi.n	a3, 16
40081bc7:	028437        	bany	a4, a3, 40081bcd <xtensa_excint1_c+0x51>
40081bca:	003b86        	j	40081cbc <xtensa_excint1_c+0x140>
40081bcd:	002186        	j	40081c57 <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081bd0:	032c      	movi.n	a3, 32
40081bd2:	020437        	bnone	a4, a3, 40081bd8 <xtensa_excint1_c+0x5c>
40081bd5:	0020c6        	j	40081c5c <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081bd8:	034c      	movi.n	a3, 64
40081bda:	028437        	bany	a4, a3, 40081be0 <xtensa_excint1_c+0x64>
40081bdd:	0036c6        	j	40081cbc <xtensa_excint1_c+0x140>
40081be0:	001f46        	j	40081c61 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081be3:	2d0467        	bnone	a4, a6, 40081c14 <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081be6:	80a132        	movi	a3, 0x180
40081be9:	130437        	bnone	a4, a3, 40081c00 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081bec:	80a032        	movi	a3, 128
40081bef:	738437        	bany	a4, a3, 40081c66 <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081bf2:	00a132        	movi	a3, 0x100
40081bf5:	028437        	bany	a4, a3, 40081bfb <xtensa_excint1_c+0x7f>
40081bf8:	003006        	j	40081cbc <xtensa_excint1_c+0x140>
40081bfb:	001b06        	j	40081c6b <xtensa_excint1_c+0xef>
40081bfe:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081c01:	3700a2        	l8ui	a10, a0, 55
40081c04:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081c07:	3700a4        	lsi	f10, a0, 220
40081c0a:	060284        	lsi	f8, a2, 24
40081c0d:	002b      	addi.n	a0, a0, 2
40081c0f:	001886        	j	40081c75 <xtensa_excint1_c+0xf9>
40081c12:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081c15:	fab8      	l32i.n	a11, a10, 60
40081c17:	110437        	bnone	a4, a3, 40081c2c <xtensa_excint1_c+0xb0>
				if (mask & BIT(12)) {
40081c1a:	fab331        	l32r	a3, 400806e8 <_iram_text_start+0x198>
40081c1d:	598437        	bany	a4, a3, 40081c7a <xtensa_excint1_c+0xfe>
				if (mask & BIT(13)) {
40081c20:	fa8b31        	l32r	a3, 4008064c <_iram_text_start+0xfc>
40081c23:	028437        	bany	a4, a3, 40081c29 <xtensa_excint1_c+0xad>
40081c26:	002486        	j	40081cbc <xtensa_excint1_c+0x140>
40081c29:	001486        	j	40081c7f <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081c2c:	fab031        	l32r	a3, 400806ec <_iram_text_start+0x19c>
40081c2f:	518437        	bany	a4, a3, 40081c84 <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081c32:	faaf31        	l32r	a3, 400806f0 <_iram_text_start+0x1a0>
40081c35:	028437        	bany	a4, a3, 40081c3b <xtensa_excint1_c+0xbf>
40081c38:	002006        	j	40081cbc <xtensa_excint1_c+0x140>
					irq = 18;
40081c3b:	281c      	movi.n	a8, 18
40081c3d:	001146        	j	40081c86 <xtensa_excint1_c+0x10a>
				irq = 0;
40081c40:	080c      	movi.n	a8, 0
40081c42:	001006        	j	40081c86 <xtensa_excint1_c+0x10a>
				irq = 1;
40081c45:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081c47:	093d      	mov.n	a3, a9
40081c49:	000e46        	j	40081c86 <xtensa_excint1_c+0x10a>
				irq = 2;
40081c4c:	098d      	mov.n	a8, a9
40081c4e:	000d06        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 3;
40081c51:	380c      	movi.n	a8, 3
40081c53:	000bc6        	j	40081c86 <xtensa_excint1_c+0x10a>
40081c56:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081c59:	000a46        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 5;
40081c5c:	580c      	movi.n	a8, 5
40081c5e:	000906        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 6;
40081c61:	680c      	movi.n	a8, 6
40081c63:	0007c6        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 7;
40081c66:	780c      	movi.n	a8, 7
40081c68:	000686        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 8;
40081c6b:	880c      	movi.n	a8, 8
40081c6d:	000546        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 9;
40081c70:	980c      	movi.n	a8, 9
40081c72:	000406        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 10;
40081c75:	a80c      	movi.n	a8, 10
40081c77:	0002c6        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 12;
40081c7a:	c80c      	movi.n	a8, 12
40081c7c:	000186        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 13;
40081c7f:	d80c      	movi.n	a8, 13
40081c81:	000046        	j	40081c86 <xtensa_excint1_c+0x10a>
					irq = 17;
40081c84:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081c86:	fa8a91        	l32r	a9, 400806b0 <_iram_text_start+0x160>
40081c89:	1188d0        	slli	a8, a8, 3
40081c8c:	898a      	add.n	a8, a9, a8
40081c8e:	1898      	l32i.n	a9, a8, 4
40081c90:	08a8      	l32i.n	a10, a8, 0
40081c92:	304430        	xor	a4, a4, a3
40081c95:	0009e0        	callx8	a9
40081c98:	13e330        	wsr.intclear	a3
40081c9b:	ffbd46        	j	40081b94 <xtensa_excint1_c+0x18>
40081c9e:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081ca1:	480c15        	call4	400c9d64 <_iram_text_end+0x46032>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081ca4:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081ca7:	333b      	addi.n	a3, a3, 3
40081ca9:	6439      	s32i.n	a3, a4, 24
40081cab:	000346        	j	40081cbc <xtensa_excint1_c+0x140>
40081cae:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081cb1:	ee          	.byte 0xee
40081cb2:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081cb5:	b22000        	mulsh	a2, a0, a0
40081cb8:	a62520        	lsi	f2, a5, 0x298
40081cbb:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081cbc:	02ad      	mov.n	a10, a2
40081cbe:	00d725        	call8	40082a30 <z_get_next_switch_handle>
}
40081cc1:	0a2d      	mov.n	a2, a10
40081cc3:	f01d      	retw.n
40081cc5:	000000        	ill

40081cc8 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081cc8:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081ccb:	fa8b81        	l32r	a8, 400806f8 <_iram_text_start+0x1a8>
40081cce:	0829      	s32i.n	a2, a8, 0
}
40081cd0:	f01d      	retw.n
	...

40081cd4 <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081cd4:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081cd7:	fa5d81        	l32r	a8, 4008064c <_iram_text_start+0xfc>
{
40081cda:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081cdd:	211487        	beq	a4, a8, 40081d02 <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081ce0:	fa8191        	l32r	a9, 400806e4 <_iram_text_start+0x194>
			return -ENOTSUP;
40081ce3:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081ce6:	4f1497        	beq	a4, a9, 40081d39 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081ce9:	fa8141        	l32r	a4, 400806f0 <_iram_text_start+0x1a0>
40081cec:	181547        	beq	a5, a4, 40081d08 <gpio_esp32_pin_interrupt_configure+0x34>
40081cef:	fa8341        	l32r	a4, 400806fc <_iram_text_start+0x1ac>
40081cf2:	431547        	beq	a5, a4, 40081d39 <gpio_esp32_pin_interrupt_configure+0x65>
40081cf5:	fa7d41        	l32r	a4, 400806ec <_iram_text_start+0x19c>
			return -EINVAL;
40081cf8:	a86c      	movi.n	a8, -22
		switch (trig) {
40081cfa:	3b9547        	bne	a5, a4, 40081d39 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081cfd:	280c      	movi.n	a8, 2
40081cff:	0001c6        	j	40081d0a <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081d02:	080c      	movi.n	a8, 0
40081d04:	000086        	j	40081d0a <gpio_esp32_pin_interrupt_configure+0x36>
40081d07:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081d0a:	3248      	l32i.n	a4, a2, 12
40081d0c:	8498      	l32i.n	a9, a4, 32
40081d0e:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081d10:	fa7c31        	l32r	a3, 40080700 <_iram_text_start+0x1b0>
40081d13:	993a      	add.n	a9, a9, a3
40081d15:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081d18:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081d1b:	fa7a51        	l32r	a5, 40080704 <_iram_text_start+0x1b4>
	reg_val = *reg;
40081d1e:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081d20:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081d23:	103350        	and	a3, a3, a5
40081d26:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081d29:	fa5831        	l32r	a3, 4008068c <_iram_text_start+0x13c>
40081d2c:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081d2f:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081d31:	13e640        	wsr.ps	a4
40081d34:	002010        	rsync

	irq_unlock(key);

	return 0;
40081d37:	080c      	movi.n	a8, 0
}
40081d39:	082d      	mov.n	a2, a8
40081d3b:	f01d      	retw.n
40081d3d:	000000        	ill

40081d40 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081d40:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081d43:	fa71a1        	l32r	a10, 40080708 <_iram_text_start+0x1b8>
40081d46:	019ae5        	call8	400836f4 <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081d49:	fa70a1        	l32r	a10, 4008070c <_iram_text_start+0x1bc>
40081d4c:	019a65        	call8	400836f4 <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081d4f:	f01d      	retw.n
40081d51:	000000        	ill

40081d54 <gpio_esp32_init>:
{
40081d54:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081d57:	3228      	l32i.n	a2, a2, 12
40081d59:	fa6da1        	l32r	a10, 40080710 <_iram_text_start+0x1c0>
40081d5c:	00a065        	call8	40082764 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081d5f:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081d61:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081d64:	8abc      	beqz.n	a10, 40081da0 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081d66:	fa6b31        	l32r	a3, 40080714 <_iram_text_start+0x1c4>
	return 0;
40081d69:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081d6b:	000382        	l8ui	a8, a3, 0
40081d6e:	2e9827        	bne	a8, a2, 40081da0 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081d71:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081d74:	ffab92        	movi	a9, 0xfffffbff
40081d77:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081d7a:	13e480        	wsr.intenable	a8
40081d7d:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081d80:	ac0c      	movi.n	a12, 10
40081d82:	6b1c      	movi.n	a11, 22
40081d84:	02ad      	mov.n	a10, a2
40081d86:	fa6481        	l32r	a8, 40080718 <_iram_text_start+0x1c8>
40081d89:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081d8c:	03e480        	rsr.intenable	a8
	val |= mask;
40081d8f:	00a492        	movi	a9, 0x400
40081d92:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081d95:	13e480        	wsr.intenable	a8
40081d98:	002010        	rsync
		isr_connected = true;
40081d9b:	180c      	movi.n	a8, 1
40081d9d:	004382        	s8i	a8, a3, 0
}
40081da0:	f01d      	retw.n
	...

40081da4 <gpio_esp32_config>:
{
40081da4:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081da7:	3268      	l32i.n	a6, a2, 12
{
40081da9:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081dac:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081dae:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081db0:	2a28      	l32i.n	a2, a10, 8
40081db2:	535a      	add.n	a5, a3, a5
40081db4:	1228      	l32i.n	a2, a2, 4
40081db6:	01cd      	mov.n	a12, a1
40081db8:	20b550        	or	a11, a5, a5
40081dbb:	0002e0        	callx8	a2
40081dbe:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081dc0:	090a96        	bltz	a10, 40081e54 <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081dc3:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081dc5:	2c0c      	movi.n	a12, 2
40081dc7:	2a28      	l32i.n	a2, a10, 8
40081dc9:	05bd      	mov.n	a11, a5
40081dcb:	0228      	l32i.n	a2, a2, 0
40081dcd:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081dd0:	0c1c      	movi.n	a12, 16
40081dd2:	10c4c0        	and	a12, a4, a12
40081dd5:	16a8      	l32i.n	a10, a6, 4
40081dd7:	9c8c      	beqz.n	a12, 40081de4 <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081dd9:	2a28      	l32i.n	a2, a10, 8
40081ddb:	1c0c      	movi.n	a12, 1
40081ddd:	2228      	l32i.n	a2, a2, 8
40081ddf:	000206        	j	40081deb <gpio_esp32_config+0x47>
40081de2:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081de5:	280864        	lsi	f6, a8, 160
40081de8:	282a      	add.n	a2, a8, a2
40081dea:	05bd22        	l32ai	a2, a13, 20
40081ded:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081df0:	16a8      	l32i.n	a10, a6, 4
40081df2:	2a28      	l32i.n	a2, a10, 8
40081df4:	3288      	l32i.n	a8, a2, 12
40081df6:	00a222        	movi	a2, 0x200
40081df9:	102420        	and	a2, a4, a2
40081dfc:	04c216        	beqz	a2, 40081e4c <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081dff:	fa4021        	l32r	a2, 40080700 <_iram_text_start+0x1b0>
40081e02:	252a      	add.n	a2, a5, a2
40081e04:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081e07:	0d6417        	bbci	a4, 1, 40081e18 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081e0a:	4b0c      	movi.n	a11, 4
40081e0c:	1104b7        	bnone	a4, a11, 40081e21 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081e0f:	0298      	l32i.n	a9, a2, 0
40081e11:	2099b0        	or	a9, a9, a11
40081e14:	0001c6        	j	40081e1f <gpio_esp32_config+0x7b>
40081e17:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081e1a:	bb7c      	movi.n	a11, -5
40081e1c:	1099b0        	and	a9, a9, a11
40081e1f:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081e21:	0464b7        	bbci	a4, 11, 40081e29 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081e24:	2648      	l32i.n	a4, a6, 8
40081e26:	000106        	j	40081e2e <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081e29:	1064a7        	bbci	a4, 10, 40081e3d <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081e2c:	3648      	l32i.n	a4, a6, 12
40081e2e:	01a022        	movi	a2, 1
40081e31:	401300        	ssl	a3
40081e34:	a13200        	sll	a3, a2
40081e37:	0020c0        	memw
40081e3a:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081e3d:	0c0c      	movi.n	a12, 0
40081e3f:	05bd      	mov.n	a11, a5
40081e41:	0008e0        	callx8	a8
		if (r < 0) {
40081e44:	020c      	movi.n	a2, 0
40081e46:	432a20        	min	a2, a10, a2
40081e49:	0001c6        	j	40081e54 <gpio_esp32_config+0xb0>
40081e4c:	1c0c      	movi.n	a12, 1
40081e4e:	20b550        	or	a11, a5, a5
40081e51:	0008e0        	callx8	a8
}
40081e54:	f01d      	retw.n
	...

40081e58 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081e58:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081e5b:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081e5e:	002392        	l32i	a9, a3, 0
40081e61:	1189e0        	slli	a8, a9, 2
40081e64:	808890        	add	a8, a8, a9
40081e67:	fa2d91        	l32r	a9, 4008071c <_iram_text_start+0x1cc>
40081e6a:	118820        	slli	a8, a8, 14
40081e6d:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081e6f:	0020c0        	memw
40081e72:	0898      	l32i.n	a9, a8, 0
40081e74:	a0a582        	movi	a8, 0x5a0
40081e77:	060987        	bnone	a9, a8, 40081e81 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081e7a:	32a8      	l32i.n	a10, a2, 12
40081e7c:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081e7e:	011625        	call8	40082fe0 <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081e81:	0398      	l32i.n	a9, a3, 0
40081e83:	fa2721        	l32r	a2, 40080720 <_iram_text_start+0x1d0>
40081e86:	1189e0        	slli	a8, a9, 2
40081e89:	889a      	add.n	a8, a8, a9
40081e8b:	118820        	slli	a8, a8, 14
40081e8e:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081e90:	f27c      	movi.n	a2, -1
40081e92:	0020c0        	memw
40081e95:	0829      	s32i.n	a2, a8, 0
}
40081e97:	f01d      	retw.n
40081e99:	000000        	ill

40081e9c <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081e9c:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081e9f:	1182e0        	slli	a8, a2, 2
40081ea2:	282a      	add.n	a2, a8, a2
40081ea4:	fa2081        	l32r	a8, 40080724 <_iram_text_start+0x1d4>
40081ea7:	112220        	slli	a2, a2, 14
40081eaa:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081eac:	0020c0        	memw
40081eaf:	0288      	l32i.n	a8, a2, 0
40081eb1:	fa1091        	l32r	a9, 400806f4 <_iram_text_start+0x1a4>
40081eb4:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081eb7:	0020c0        	memw
40081eba:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081ebc:	0020c0        	memw
40081ebf:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081ec1:	fa1991        	l32r	a9, 40080728 <_iram_text_start+0x1d8>
40081ec4:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081ec7:	0020c0        	memw
40081eca:	0289      	s32i.n	a8, a2, 0
}
40081ecc:	f01d      	retw.n
	...

40081ed0 <i2c_esp32_write_addr>:
{
40081ed0:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081ed3:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081ed5:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081ed7:	06a8      	l32i.n	a10, a6, 0
40081ed9:	fffc25        	call8	40081e9c <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081edc:	0628      	l32i.n	a2, a6, 0
40081ede:	748050        	extui	a8, a5, 0, 8
40081ee1:	1192e0        	slli	a9, a2, 2
40081ee4:	992a      	add.n	a9, a9, a2
40081ee6:	fa1121        	l32r	a2, 4008072c <_iram_text_start+0x1dc>
40081ee9:	119920        	slli	a9, a9, 14
40081eec:	992a      	add.n	a9, a9, a2
40081eee:	0020c0        	memw
40081ef1:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081ef3:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081ef5:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081ef7:	156807        	bbci	a8, 0, 40081f10 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081efa:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081efc:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081eff:	1186e0        	slli	a8, a6, 2
40081f02:	886a      	add.n	a8, a8, a6
40081f04:	118820        	slli	a8, a8, 14
40081f07:	882a      	add.n	a8, a8, a2
40081f09:	0020c0        	memw
40081f0c:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081f0e:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081f10:	080422        	l8ui	a2, a4, 8
40081f13:	116207        	bbci	a2, 0, 40081f28 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081f16:	940c      	movi.n	a4, 9
40081f18:	114480        	slli	a4, a4, 8
40081f1b:	209940        	or	a9, a9, a4
40081f1e:	234b      	addi.n	a2, a3, 4
40081f20:	0020c0        	memw
40081f23:	0399      	s32i.n	a9, a3, 0
40081f25:	0001c6        	j	40081f30 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081f28:	1458      	l32i.n	a5, a4, 4
40081f2a:	032d      	mov.n	a2, a3
40081f2c:	959a      	add.n	a9, a5, a9
40081f2e:	1499      	s32i.n	a9, a4, 4
}
40081f30:	f01d      	retw.n
	...

40081f34 <i2c_esp32_configure_pins>:
{
40081f34:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081f37:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081f3a:	f9fda1        	l32r	a10, 40080730 <_iram_text_start+0x1e0>
	if (pin < 32) {
40081f3d:	022527        	blt	a5, a2, 40081f43 <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081f40:	f9fda1        	l32r	a10, 40080734 <_iram_text_start+0x1e4>
40081f43:	008225        	call8	40082764 <z_impl_device_get_binding>
		return -EINVAL;
40081f46:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081f49:	047a16        	beqz	a10, 40081f94 <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081f4c:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081f4f:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081f52:	2a88      	l32i.n	a8, a10, 8
40081f54:	f9f9c1        	l32r	a12, 40080738 <_iram_text_start+0x1e8>
40081f57:	0888      	l32i.n	a8, a8, 0
40081f59:	06bd      	mov.n	a11, a6
40081f5b:	0008e0        	callx8	a8
40081f5e:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081f60:	0adc      	bnez.n	a10, 40081f74 <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081f62:	eb7c      	movi.n	a11, -2
40081f64:	401600        	ssl	a6
40081f67:	818bb0        	src	a8, a11, a11
40081f6a:	05b8      	l32i.n	a11, a5, 0
40081f6c:	10bb80        	and	a11, a11, a8
40081f6f:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081f71:	000086        	j	40081f77 <i2c_esp32_configure_pins+0x43>
40081f74:	01ca96        	bltz	a10, 40081f94 <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081f77:	0d0c      	movi.n	a13, 0
40081f79:	0dcd      	mov.n	a12, a13
40081f7b:	03bd      	mov.n	a11, a3
40081f7d:	20a220        	or	a10, a2, a2
40081f80:	f9ef81        	l32r	a8, 4008073c <_iram_text_start+0x1ec>
40081f83:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081f86:	0c0c      	movi.n	a12, 0
40081f88:	04bd      	mov.n	a11, a4
40081f8a:	02ad      	mov.n	a10, a2
40081f8c:	f9ed81        	l32r	a8, 40080740 <_iram_text_start+0x1f0>
40081f8f:	0008e0        	callx8	a8
40081f92:	080c      	movi.n	a8, 0
}
40081f94:	082d      	mov.n	a2, a8
40081f96:	f01d      	retw.n

40081f98 <i2c_esp32_configure>:
{
40081f98:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081f9b:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081f9d:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081f9f:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081fa2:	64c8      	l32i.n	a12, a4, 24
40081fa4:	54b8      	l32i.n	a11, a4, 20
40081fa6:	0724a2        	l32i	a10, a4, 28
40081fa9:	fff8a5        	call8	40081f34 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081fac:	242a96        	bltz	a10, 400821f2 <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081faf:	44c8      	l32i.n	a12, a4, 16
40081fb1:	34b8      	l32i.n	a11, a4, 12
40081fb3:	84a8      	l32i.n	a10, a4, 32
40081fb5:	fff7e5        	call8	40081f34 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081fb8:	236a96        	bltz	a10, 400821f2 <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081fbb:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081fbd:	0924b2        	l32i	a11, a4, 36
40081fc0:	2a58      	l32i.n	a5, a10, 8
40081fc2:	002552        	l32i	a5, a5, 0
40081fc5:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081fc8:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081fcb:	084c      	movi.n	a8, 64
40081fcd:	050c      	movi.n	a5, 0
40081fcf:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081fd2:	290482        	l8ui	a8, a4, 41
40081fd5:	488c      	beqz.n	a8, 40081fdd <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081fd7:	80a082        	movi	a8, 128
40081fda:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081fdd:	0498      	l32i.n	a9, a4, 0
40081fdf:	1189e0        	slli	a8, a9, 2
40081fe2:	889a      	add.n	a8, a8, a9
40081fe4:	f9d891        	l32r	a9, 40080744 <_iram_text_start+0x1f4>
40081fe7:	118820        	slli	a8, a8, 14
40081fea:	889a      	add.n	a8, a8, a9
40081fec:	091c      	movi.n	a9, 16
40081fee:	0f0397        	bnone	a3, a9, 40082001 <i2c_esp32_configure+0x69>
40081ff1:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40081ff3:	205590        	or	a5, a5, a9
40081ff6:	0020c0        	memw
40081ff9:	0879      	s32i.n	a7, a8, 0
40081ffb:	001506        	j	40082053 <i2c_esp32_configure+0xbb>
40081ffe:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40082001:	021772        	l16ui	a7, a7, 4
40082004:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40082007:	056307        	bbci	a3, 0, 40082010 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
4008200a:	f9b591        	l32r	a9, 400806e0 <_iram_text_start+0x190>
4008200d:	207790        	or	a7, a7, a9
40082010:	0020c0        	memw
40082013:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40082015:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40082017:	dfaf92        	movi	a9, -33
4008201a:	1178e0        	slli	a7, a8, 2
4008201d:	778a      	add.n	a7, a7, a8
4008201f:	f9ca81        	l32r	a8, 40080748 <_iram_text_start+0x1f8>
40082022:	117720        	slli	a7, a7, 14
40082025:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40082027:	0020c0        	memw
4008202a:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008202c:	108890        	and	a8, a8, a9
4008202f:	0020c0        	memw
40082032:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40082034:	0488      	l32i.n	a8, a4, 0
40082036:	f9c591        	l32r	a9, 4008074c <_iram_text_start+0x1fc>
40082039:	1178e0        	slli	a7, a8, 2
4008203c:	778a      	add.n	a7, a7, a8
4008203e:	f9b981        	l32r	a8, 40080724 <_iram_text_start+0x1d4>
40082041:	117720        	slli	a7, a7, 14
40082044:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40082046:	0020c0        	memw
40082049:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008204b:	108890        	and	a8, a8, a9
4008204e:	0020c0        	memw
40082051:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40082053:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40082055:	03a172        	movi	a7, 0x103
40082058:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
4008205b:	1178e0        	slli	a7, a8, 2
4008205e:	778a      	add.n	a7, a7, a8
40082060:	f9ba81        	l32r	a8, 40080748 <_iram_text_start+0x1f8>
40082063:	117720        	slli	a7, a7, 14
40082066:	778a      	add.n	a7, a7, a8
40082068:	0020c0        	memw
4008206b:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
4008206d:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
4008206f:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40082071:	020c      	movi.n	a2, 0
40082073:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40082075:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40082078:	f9b621        	l32r	a2, 40080750 <_iram_text_start+0x200>
4008207b:	1133e0        	slli	a3, a3, 2
4008207e:	323a      	add.n	a3, a2, a3
40082080:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
40082082:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
40082085:	163216        	beqz	a2, 400821ec <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
40082088:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
4008208a:	95b8      	l32i.n	a11, a5, 36
4008208c:	2a38      	l32i.n	a3, a10, 8
4008208e:	01cd      	mov.n	a12, a1
40082090:	3338      	l32i.n	a3, a3, 12
40082092:	0003e0        	callx8	a3
40082095:	151a56        	bnez	a10, 400821ea <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
40082098:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
4008209a:	0188      	l32i.n	a8, a1, 0
4008209c:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
4008209f:	1127e0        	slli	a2, a7, 2
400820a2:	227a      	add.n	a2, a2, a7
400820a4:	f9ac71        	l32r	a7, 40080754 <_iram_text_start+0x204>
400820a7:	112220        	slli	a2, a2, 14
400820aa:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
400820ac:	0020c0        	memw
400820af:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
400820b1:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400820b4:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
400820b7:	0020c0        	memw
400820ba:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
400820bc:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
400820be:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
400820c1:	1127e0        	slli	a2, a7, 2
400820c4:	227a      	add.n	a2, a2, a7
400820c6:	f9a471        	l32r	a7, 40080758 <_iram_text_start+0x208>
400820c9:	112220        	slli	a2, a2, 14
400820cc:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
400820ce:	0020c0        	memw
400820d1:	0278      	l32i.n	a7, a2, 0
400820d3:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
400820d6:	0020c0        	memw
400820d9:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
400820db:	0578      	l32i.n	a7, a5, 0
400820dd:	1127e0        	slli	a2, a7, 2
400820e0:	227a      	add.n	a2, a2, a7
400820e2:	f99e71        	l32r	a7, 4008075c <_iram_text_start+0x20c>
400820e5:	112220        	slli	a2, a2, 14
400820e8:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
400820ea:	0020c0        	memw
400820ed:	0278      	l32i.n	a7, a2, 0
400820ef:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
400820f2:	0020c0        	memw
400820f5:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
400820f7:	0578      	l32i.n	a7, a5, 0
400820f9:	1127e0        	slli	a2, a7, 2
400820fc:	227a      	add.n	a2, a2, a7
400820fe:	f99871        	l32r	a7, 40080760 <_iram_text_start+0x210>
40082101:	112220        	slli	a2, a2, 14
40082104:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082106:	0020c0        	memw
40082109:	0278      	l32i.n	a7, a2, 0
4008210b:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008210e:	0020c0        	memw
40082111:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40082113:	0578      	l32i.n	a7, a5, 0
40082115:	1127e0        	slli	a2, a7, 2
40082118:	227a      	add.n	a2, a2, a7
4008211a:	f99271        	l32r	a7, 40080764 <_iram_text_start+0x214>
4008211d:	112220        	slli	a2, a2, 14
40082120:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082122:	0020c0        	memw
40082125:	0278      	l32i.n	a7, a2, 0
40082127:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008212a:	0020c0        	memw
4008212d:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
4008212f:	0578      	l32i.n	a7, a5, 0
40082131:	1127e0        	slli	a2, a7, 2
40082134:	227a      	add.n	a2, a2, a7
40082136:	f98c71        	l32r	a7, 40080768 <_iram_text_start+0x218>
40082139:	112220        	slli	a2, a2, 14
4008213c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008213e:	0020c0        	memw
40082141:	0278      	l32i.n	a7, a2, 0
40082143:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
40082146:	0020c0        	memw
40082149:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
4008214b:	0538      	l32i.n	a3, a5, 0
4008214d:	1123e0        	slli	a2, a3, 2
40082150:	223a      	add.n	a2, a2, a3
40082152:	f98631        	l32r	a3, 4008076c <_iram_text_start+0x21c>
40082155:	112220        	slli	a2, a2, 14
40082158:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
4008215a:	0020c0        	memw
4008215d:	0238      	l32i.n	a3, a2, 0
4008215f:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
40082162:	0020c0        	memw
40082165:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
40082167:	0538      	l32i.n	a3, a5, 0
40082169:	ffab52        	movi	a5, 0xfffffbff
4008216c:	1123e0        	slli	a2, a3, 2
4008216f:	223a      	add.n	a2, a2, a3
40082171:	f97f31        	l32r	a3, 40080770 <_iram_text_start+0x220>
40082174:	112220        	slli	a2, a2, 14
40082177:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082179:	0020c0        	memw
4008217c:	0238      	l32i.n	a3, a2, 0
4008217e:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
40082181:	0020c0        	memw
40082184:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
40082186:	0438      	l32i.n	a3, a4, 0
40082188:	1123e0        	slli	a2, a3, 2
4008218b:	223a      	add.n	a2, a2, a3
4008218d:	f96531        	l32r	a3, 40080724 <_iram_text_start+0x1d4>
40082190:	112220        	slli	a2, a2, 14
40082193:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
40082195:	0020c0        	memw
40082198:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008219a:	103350        	and	a3, a3, a5
4008219d:	0020c0        	memw
400821a0:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
400821a2:	0438      	l32i.n	a3, a4, 0
400821a4:	1123e0        	slli	a2, a3, 2
400821a7:	223a      	add.n	a2, a2, a3
400821a9:	f97231        	l32r	a3, 40080774 <_iram_text_start+0x224>
400821ac:	112220        	slli	a2, a2, 14
400821af:	223a      	add.n	a2, a2, a3
400821b1:	f97131        	l32r	a3, 40080778 <_iram_text_start+0x228>
400821b4:	0020c0        	memw
400821b7:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
400821b9:	0438      	l32i.n	a3, a4, 0
400821bb:	1123e0        	slli	a2, a3, 2
400821be:	223a      	add.n	a2, a2, a3
400821c0:	f96f31        	l32r	a3, 4008077c <_iram_text_start+0x22c>
400821c3:	112220        	slli	a2, a2, 14
400821c6:	223a      	add.n	a2, a2, a3
400821c8:	a0a532        	movi	a3, 0x5a0
400821cb:	0020c0        	memw
400821ce:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400821d0:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
400821d3:	c448      	l32i.n	a4, a4, 48
400821d5:	120c      	movi.n	a2, 1
400821d7:	401400        	ssl	a4
400821da:	a12200        	sll	a2, a2
	val |= mask;
400821dd:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400821e0:	13e420        	wsr.intenable	a2
400821e3:	002010        	rsync
400821e6:	000086        	j	400821ec <i2c_esp32_configure+0x254>
400821e9:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
400821ec:	13e660        	wsr.ps	a6
400821ef:	002010        	rsync
}
400821f2:	0a2d      	mov.n	a2, a10
400821f4:	f01d      	retw.n
	...

400821f8 <i2c_esp32_transmit>:
{
400821f8:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
400821fb:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
400821fd:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
400821ff:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082201:	092c      	movi.n	a9, 32
40082203:	1182e0        	slli	a8, a2, 2
40082206:	882a      	add.n	a8, a8, a2
40082208:	f95021        	l32r	a2, 40080748 <_iram_text_start+0x1f8>
4008220b:	118820        	slli	a8, a8, 14
4008220e:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
40082210:	0020c0        	memw
40082213:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082215:	202290        	or	a2, a2, a9
40082218:	0020c0        	memw
4008221b:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
4008221d:	f958c1        	l32r	a12, 40080780 <_iram_text_start+0x230>
40082220:	f8fbd1        	l32r	a13, 4008060c <_iram_text_start+0xbc>
40082223:	aa8b      	addi.n	a10, a10, 8
40082225:	00df65        	call8	4008301c <z_impl_k_sem_take>
		return -ETIMEDOUT;
40082228:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
4008222b:	026a96        	bltz	a10, 40082255 <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
4008222e:	0328      	l32i.n	a2, a3, 0
40082230:	1182e0        	slli	a8, a2, 2
40082233:	882a      	add.n	a8, a8, a2
40082235:	f95321        	l32r	a2, 40080784 <_iram_text_start+0x234>
40082238:	118820        	slli	a8, a8, 14
4008223b:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
4008223d:	0020c0        	memw
40082240:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082242:	20a482        	movi	a8, 0x420
40082245:	108980        	and	a8, a9, a8
		return -EIO;
40082248:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008224a:	78cc      	bnez.n	a8, 40082255 <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
4008224c:	049890        	extui	a9, a9, 8, 1
	return 0;
4008224f:	c4af22        	movi	a2, -60
40082252:	832890        	moveqz	a2, a8, a9
}
40082255:	f01d      	retw.n
	...

40082258 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
40082258:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008225b:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
4008225d:	f94a51        	l32r	a5, 40080788 <_iram_text_start+0x238>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082260:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
40082262:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
40082264:	630c      	movi.n	a3, 6
	switch (bitrate) {
40082266:	2c1857        	beq	a8, a5, 40082296 <i2c_esp32_init+0x3e>
40082269:	143587        	bltu	a5, a8, 40082281 <i2c_esp32_init+0x29>
4008226c:	f94851        	l32r	a5, 4008078c <_iram_text_start+0x23c>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
4008226f:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082271:	211857        	beq	a8, a5, 40082296 <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
40082274:	f94731        	l32r	a3, 40080790 <_iram_text_start+0x240>
40082277:	450c      	movi.n	a5, 4
40082279:	c08830        	sub	a8, a8, a3
4008227c:	000446        	j	40082291 <i2c_esp32_init+0x39>
4008227f:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
40082282:	0cf944        	lsi	f4, a9, 48
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
40082285:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
40082288:	310c      	movi.n	a1, 3
	return 0;
4008228a:	0cf943        	lsi	f4, a9, 48
4008228d:	8830a5        	call8	4000a598 <esp32_rom_gpio_matrix_out+0x68c>
40082290:	030cc0        	rsr.scompare1	a12
40082293:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
40082296:	24a8      	l32i.n	a10, a4, 8
40082298:	004ca5        	call8	40082764 <z_impl_device_get_binding>
4008229b:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008229d:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
400822a0:	1c0c      	movi.n	a12, 1
400822a2:	0cbd      	mov.n	a11, a12
400822a4:	a68b      	addi.n	a10, a6, 8
400822a6:	0157e5        	call8	40083824 <z_impl_k_sem_init>
400822a9:	1c0c      	movi.n	a12, 1
400822ab:	20bcc0        	or	a11, a12, a12
400822ae:	18c6a2        	addi	a10, a6, 24
400822b1:	015725        	call8	40083824 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400822b4:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
400822b7:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
400822b9:	e87c      	movi.n	a8, -2
400822bb:	401900        	ssl	a9
400822be:	818880        	src	a8, a8, a8
400822c1:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400822c4:	13e480        	wsr.intenable	a8
400822c7:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
400822ca:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
400822cc:	0a0c      	movi.n	a10, 0
400822ce:	1186e0        	slli	a8, a6, 2
400822d1:	886a      	add.n	a8, a8, a6
400822d3:	f92a61        	l32r	a6, 4008077c <_iram_text_start+0x22c>
400822d6:	118820        	slli	a8, a8, 14
400822d9:	886a      	add.n	a8, a8, a6
400822db:	0020c0        	memw
400822de:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
400822e1:	0c24c2        	l32i	a12, a4, 48
400822e4:	b4b8      	l32i.n	a11, a4, 44
400822e6:	f90c81        	l32r	a8, 40080718 <_iram_text_start+0x1c8>
400822e9:	0008e0        	callx8	a8

	config->connect_irq();
400822ec:	1468      	l32i.n	a6, a4, 4
400822ee:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
400822f1:	13e650        	wsr.ps	a5
400822f4:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
400822f7:	d4b8      	l32i.n	a11, a4, 52
400822f9:	02ad      	mov.n	a10, a2
400822fb:	20b3b0        	or	a11, a3, a11
400822fe:	ffc9a5        	call8	40081f98 <i2c_esp32_configure>
}
40082301:	0a2d      	mov.n	a2, a10
40082303:	f01d      	retw.n
40082305:	000000        	ill

40082308 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
40082308:	004136        	entry	a1, 32
	int counter = 0;
4008230b:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
4008230d:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
40082310:	199347        	bne	a3, a4, 4008232d <i2c_esp32_wait$isra$1+0x25>
40082313:	000cc6        	j	4008234a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082316:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082318:	059457        	bne	a4, a5, 40082321 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
4008231b:	c4af22        	movi	a2, -60
4008231e:	001206        	j	4008236a <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082321:	58a282        	movi	a8, 0x258
40082324:	05a847        	bge	a8, a4, 4008232d <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
40082327:	201110        	or	a1, a1, a1
4008232a:	00be65        	call8	40082f10 <z_impl_k_yield>
		while (!wait_cmd->done) {
4008232d:	0020c0        	memw
40082330:	0388      	l32i.n	a8, a3, 0
40082332:	fe08d6        	bgez	a8, 40082316 <i2c_esp32_wait$isra$1+0xe>
40082335:	000446        	j	4008234a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082338:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
4008233b:	85a332        	movi	a3, 0x385
4008233e:	d91437        	beq	a4, a3, 4008231b <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082341:	58a232        	movi	a3, 0x258
40082344:	02a347        	bge	a3, a4, 4008234a <i2c_esp32_wait$isra$1+0x42>
40082347:	00bca5        	call8	40082f10 <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
4008234a:	002292        	l32i	a9, a2, 0
4008234d:	f91331        	l32r	a3, 4008079c <_iram_text_start+0x24c>
40082350:	1189e0        	slli	a8, a9, 2
40082353:	808890        	add	a8, a8, a9
40082356:	118820        	slli	a8, a8, 14
40082359:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
4008235b:	0020c0        	memw
4008235e:	0888      	l32i.n	a8, a8, 0
40082360:	031c      	movi.n	a3, 16
40082362:	108830        	and	a8, a8, a3
40082365:	fcf856        	bnez	a8, 40082338 <i2c_esp32_wait$isra$1+0x30>
	return 0;
40082368:	082d      	mov.n	a2, a8
}
4008236a:	f01d      	retw.n

4008236c <i2c_esp32_transfer>:
{
4008236c:	008136        	entry	a1, 64
4008236f:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
40082372:	032222        	l32i	a2, a2, 12
{
40082375:	744040        	extui	a4, a4, 0, 8
40082378:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
4008237b:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
4008237e:	f897c1        	l32r	a12, 400805dc <_iram_text_start+0x8c>
40082381:	f896d1        	l32r	a13, 400805dc <_iram_text_start+0x8c>
40082384:	20a770        	or	a10, a7, a7
40082387:	00c965        	call8	4008301c <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
4008238a:	0228      	l32i.n	a2, a2, 0
4008238c:	ffa392        	movi	a9, 0x3ff
4008238f:	042020        	extui	a2, a2, 0, 1
40082392:	7fa082        	movi	a8, 127
40082395:	938920        	movnez	a8, a9, a2
40082398:	1124f0        	slli	a2, a4, 1
4008239b:	224a      	add.n	a2, a2, a4
4008239d:	1122e0        	slli	a2, a2, 2
400823a0:	232a      	add.n	a2, a3, a2
400823a2:	105850        	and	a5, a8, a5
	addr <<= 1;
400823a5:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
400823a8:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
400823aa:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823ac:	202520        	or	a2, a5, a2
400823af:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
400823b1:	007806        	j	40082595 <i2c_esp32_transfer+0x229>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
400823b4:	012642        	l32i	a4, a6, 4
400823b7:	0123a2        	l32i	a10, a3, 4
400823ba:	002482        	l32i	a8, a4, 0
400823bd:	2398      	l32i.n	a9, a3, 8
400823bf:	1128e0        	slli	a2, a8, 2
400823c2:	228a      	add.n	a2, a2, a8
400823c4:	f8f781        	l32r	a8, 400807a0 <_iram_text_start+0x250>
400823c7:	112220        	slli	a2, a2, 14
400823ca:	228a      	add.n	a2, a2, a8
400823cc:	03c8      	l32i.n	a12, a3, 0
400823ce:	080382        	l8ui	a8, a3, 8
400823d1:	01c9      	s32i.n	a12, a1, 0
400823d3:	048080        	extui	a8, a8, 0, 1
400823d6:	11a9      	s32i.n	a10, a1, 4
400823d8:	2199      	s32i.n	a9, a1, 8
400823da:	b24b      	addi.n	a11, a2, 4
400823dc:	0c3856        	bnez	a8, 400824a3 <i2c_esp32_transfer+0x137>
	*cmd++ = (struct i2c_esp32_cmd) {
400823df:	0020c0        	memw
400823e2:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823e4:	05dd      	mov.n	a13, a5
400823e6:	01cd      	mov.n	a12, a1
400823e8:	06ad      	mov.n	a10, a6
400823ea:	ffae65        	call8	40081ed0 <i2c_esp32_write_addr>
400823ed:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
400823ef:	022c      	movi.n	a2, 32
400823f1:	002986        	j	4008249b <i2c_esp32_transfer+0x12f>
400823f4:	882000        	lsi	f0, a0, 0x220
400823f7:	cdd163        	lsi	f6, a1, 0x334
				    I2C_DATA_APB_REG(config->index));
400823fa:	adf8      	l32i.n	a15, a13, 40
400823fc:	7608      	l32i.n	a0, a6, 28
400823fe:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
40082400:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
40082402:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
40082404:	c91b      	addi.n	a12, a9, 1
40082406:	01c9      	s32i.n	a12, a1, 0
40082408:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
4008240b:	119ee0        	slli	a9, a14, 2
4008240e:	99ea      	add.n	a9, a9, a14
40082410:	119920        	slli	a9, a9, 14
40082413:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
40082415:	0020c0        	memw
40082418:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
4008241a:	990c      	movi.n	a9, 9
4008241c:	11a980        	slli	a10, a9, 8
4008241f:	749080        	extui	a9, a8, 0, 8
40082422:	2099a0        	or	a9, a9, a10
40082425:	0020c0        	memw
40082428:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
4008242a:	1198      	l32i.n	a9, a1, 4
4008242c:	c08980        	sub	a8, a9, a8
4008242f:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082431:	c8dc      	bnez.n	a8, 40082451 <i2c_esp32_transfer+0xe5>
40082433:	080192        	l8ui	a9, a1, 8
40082436:	176917        	bbci	a9, 1, 40082451 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082439:	0020c0        	memw
4008243c:	1b89      	s32i.n	a8, a11, 4
4008243e:	f88291        	l32r	a9, 40080648 <_iram_text_start+0xf8>
40082441:	0020c0        	memw
40082444:	1b88      	l32i.n	a8, a11, 4
40082446:	108890        	and	a8, a8, a9
40082449:	f8d691        	l32r	a9, 400807a4 <_iram_text_start+0x254>
4008244c:	000586        	j	40082466 <i2c_esp32_transfer+0xfa>
4008244f:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
40082452:	c008      	l32i.n	a0, a0, 48
40082454:	890020        	lsi	f2, a0, 0x224
40082457:	911b      	addi.n	a9, a1, 1
40082459:	f87c      	movi.n	a8, -1
4008245b:	0020c0        	memw
4008245e:	1b88      	l32i.n	a8, a11, 4
40082460:	108890        	and	a8, a8, a9
40082463:	f87a91        	l32r	a9, 4008064c <_iram_text_start+0xfc>
40082466:	208890        	or	a8, a8, a9
40082469:	0020c0        	memw
4008246c:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
4008246e:	06ad      	mov.n	a10, a6
40082470:	61b9      	s32i.n	a11, a1, 24
40082472:	ffd865        	call8	400821f8 <i2c_esp32_transmit>
40082475:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082477:	61b8      	l32i.n	a11, a1, 24
40082479:	7acc      	bnez.n	a10, 40082484 <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
4008247b:	16a8      	l32i.n	a10, a6, 4
4008247d:	bb4b      	addi.n	a11, a11, 4
4008247f:	ffe8a5        	call8	40082308 <i2c_esp32_wait$isra$1>
40082482:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082484:	109896        	bltz	a8, 40082591 <i2c_esp32_transfer+0x225>
		i2c_esp32_reset_fifo(config);
40082487:	04a8      	l32i.n	a10, a4, 0
40082489:	ffa125        	call8	40081e9c <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
4008248c:	0488      	l32i.n	a8, a4, 0
4008248e:	11b8e0        	slli	a11, a8, 2
40082491:	bb8a      	add.n	a11, a11, a8
40082493:	f8c381        	l32r	a8, 400807a0 <_iram_text_start+0x250>
40082496:	11bb20        	slli	a11, a11, 14
40082499:	bb8a      	add.n	a11, a11, a8
4008249b:	1188      	l32i.n	a8, a1, 4
4008249d:	f54856        	bnez	a8, 400823f5 <i2c_esp32_transfer+0x89>
400824a0:	003b46        	j	40082591 <i2c_esp32_transfer+0x225>
	*cmd++ = (struct i2c_esp32_cmd) {
400824a3:	080c      	movi.n	a8, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400824a5:	51d8      	l32i.n	a13, a1, 20
	*cmd++ = (struct i2c_esp32_cmd) {
400824a7:	0020c0        	memw
400824aa:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400824ac:	01cd      	mov.n	a12, a1
400824ae:	20a660        	or	a10, a6, a6
400824b1:	ffa1e5        	call8	40081ed0 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400824b4:	003506        	j	4008258c <i2c_esp32_transfer+0x220>
400824b7:	000000        	ill
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
400824ba:	280b      	addi.n	a2, a8, -1
400824bc:	092c      	movi.n	a9, 32
400824be:	632290        	minu	a2, a2, a9
		if (to_read) {
400824c1:	0f1826        	beqi	a8, 1, 400824d4 <i2c_esp32_transfer+0x168>
			*cmd++ = (struct i2c_esp32_cmd) {
400824c4:	f889c1        	l32r	a12, 400806e8 <_iram_text_start+0x198>
400824c7:	74b020        	extui	a11, a2, 0, 8
400824ca:	20bbc0        	or	a11, a11, a12
400824cd:	0020c0        	memw
400824d0:	0ab9      	s32i.n	a11, a10, 0
400824d2:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
400824d4:	c08820        	sub	a8, a8, a2
400824d7:	3728f6        	bgeui	a8, 2, 40082512 <i2c_esp32_transfer+0x1a6>
			*cmd++ = (struct i2c_esp32_cmd) {
400824da:	f8b381        	l32r	a8, 400807a8 <_iram_text_start+0x258>
400824dd:	ba4b      	addi.n	a11, a10, 4
400824df:	0020c0        	memw
400824e2:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
400824e4:	080182        	l8ui	a8, a1, 8
			to_read++;
400824e7:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
400824e9:	236817        	bbci	a8, 1, 40082510 <i2c_esp32_transfer+0x1a4>
				*cmd++ = (struct i2c_esp32_cmd) {
400824ec:	080c      	movi.n	a8, 0
400824ee:	0020c0        	memw
400824f1:	1a89      	s32i.n	a8, a10, 4
400824f3:	0020c0        	memw
400824f6:	1a88      	l32i.n	a8, a10, 4
400824f8:	f854c1        	l32r	a12, 40080648 <_iram_text_start+0xf8>
400824fb:	1088c0        	and	a8, a8, a12
400824fe:	f8a9c1        	l32r	a12, 400807a4 <_iram_text_start+0x254>
40082501:	2088c0        	or	a8, a8, a12
40082504:	0020c0        	memw
40082507:	1a89      	s32i.n	a8, a10, 4
40082509:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
4008250b:	3b8c      	beqz.n	a11, 40082512 <i2c_esp32_transfer+0x1a6>
4008250d:	000786        	j	4008252f <i2c_esp32_transfer+0x1c3>
			*cmd++ = (struct i2c_esp32_cmd) {
40082510:	0bad      	mov.n	a10, a11
			*cmd++ = (struct i2c_esp32_cmd) {
40082512:	0b0c      	movi.n	a11, 0
40082514:	0020c0        	memw
40082517:	0ab9      	s32i.n	a11, a10, 0
40082519:	0020c0        	memw
4008251c:	0a88      	l32i.n	a8, a10, 0
4008251e:	f84ac1        	l32r	a12, 40080648 <_iram_text_start+0xf8>
40082521:	1088c0        	and	a8, a8, a12
40082524:	f84ac1        	l32r	a12, 4008064c <_iram_text_start+0xfc>
40082527:	2088c0        	or	a8, a8, a12
4008252a:	0020c0        	memw
4008252d:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
4008252f:	06ad      	mov.n	a10, a6
40082531:	61b9      	s32i.n	a11, a1, 24
40082533:	ffcc65        	call8	400821f8 <i2c_esp32_transmit>
40082536:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082538:	61b8      	l32i.n	a11, a1, 24
4008253a:	006a56        	bnez	a10, 40082544 <i2c_esp32_transfer+0x1d8>
		return i2c_esp32_wait(dev, wait_cmd);
4008253d:	16a8      	l32i.n	a10, a6, 4
4008253f:	ffdca5        	call8	40082308 <i2c_esp32_wait$isra$1>
40082542:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082544:	049896        	bltz	a8, 40082591 <i2c_esp32_transfer+0x225>
		for (i = 0U; i < to_read; i++) {
40082547:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082549:	f878b1        	l32r	a11, 4008072c <_iram_text_start+0x1dc>
4008254c:	000786        	j	4008256e <i2c_esp32_transfer+0x202>
4008254f:	24c200        	extui	a12, a0, 2, 3
40082552:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
40082555:	8ce001        	l32r	a0, 400658d8 <esp32_rom_gpio_matrix_out+0x5b9cc>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082558:	88ca11        	l32r	a1, 40064880 <esp32_rom_gpio_matrix_out+0x5a974>
4008255b:	118820        	slli	a8, a8, 14
4008255e:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
40082560:	0020c0        	memw
40082563:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
40082565:	0188      	l32i.n	a8, a1, 0
40082567:	d81b      	addi.n	a13, a8, 1
40082569:	01d9      	s32i.n	a13, a1, 0
4008256b:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
4008256e:	de9a27        	bne	a10, a2, 40082550 <i2c_esp32_transfer+0x1e4>
		msg.len -= to_read;
40082571:	1188      	l32i.n	a8, a1, 4
40082573:	c0a8a0        	sub	a10, a8, a10
40082576:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
40082578:	04a8      	l32i.n	a10, a4, 0
4008257a:	ff9225        	call8	40081e9c <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
4008257d:	0488      	l32i.n	a8, a4, 0
4008257f:	11a8e0        	slli	a10, a8, 2
40082582:	aa8a      	add.n	a10, a10, a8
40082584:	f88781        	l32r	a8, 400807a0 <_iram_text_start+0x250>
40082587:	11aa20        	slli	a10, a10, 14
4008258a:	aa8a      	add.n	a10, a10, a8
4008258c:	1188      	l32i.n	a8, a1, 4
4008258e:	f28856        	bnez	a8, 400824ba <i2c_esp32_transfer+0x14e>
		if (ret < 0) {
40082591:	33cb      	addi.n	a3, a3, 12
40082593:	88cc      	bnez.n	a8, 4008259f <i2c_esp32_transfer+0x233>
	for (i = 0U; i < num_msgs; i++) {
40082595:	4128      	l32i.n	a2, a1, 16
40082597:	021237        	beq	a2, a3, 4008259d <i2c_esp32_transfer+0x231>
4008259a:	ff8586        	j	400823b4 <i2c_esp32_transfer+0x48>
4008259d:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
4008259f:	07ad      	mov.n	a10, a7
400825a1:	6189      	s32i.n	a8, a1, 24
400825a3:	00a3e5        	call8	40082fe0 <z_impl_k_sem_give>
}
400825a6:	6188      	l32i.n	a8, a1, 24
400825a8:	082d      	mov.n	a2, a8
400825aa:	f01d      	retw.n

400825ac <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
400825ac:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
400825af:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
400825b1:	0d0c      	movi.n	a13, 0
400825b3:	34b8      	l32i.n	a11, a4, 12
400825b5:	0724a2        	l32i	a10, a4, 28
400825b8:	0dcd      	mov.n	a12, a13
400825ba:	f86081        	l32r	a8, 4008073c <_iram_text_start+0x1ec>
400825bd:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
400825c0:	44b8      	l32i.n	a11, a4, 16
400825c2:	84a8      	l32i.n	a10, a4, 32
400825c4:	0c0c      	movi.n	a12, 0
400825c6:	f85e81        	l32r	a8, 40080740 <_iram_text_start+0x1f0>
400825c9:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
400825cc:	a4a8      	l32i.n	a10, a4, 40
400825ce:	aa8c      	beqz.n	a10, 400825dc <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
400825d0:	0d0c      	movi.n	a13, 0
400825d2:	64b8      	l32i.n	a11, a4, 24
400825d4:	0dcd      	mov.n	a12, a13
400825d6:	f85981        	l32r	a8, 4008073c <_iram_text_start+0x1ec>
400825d9:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
400825dc:	94a8      	l32i.n	a10, a4, 36
400825de:	8a8c      	beqz.n	a10, 400825ea <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
400825e0:	54b8      	l32i.n	a11, a4, 20
400825e2:	0c0c      	movi.n	a12, 0
400825e4:	f85781        	l32r	a8, 40080740 <_iram_text_start+0x1f0>
400825e7:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
400825ea:	3248      	l32i.n	a4, a2, 12
400825ec:	1258      	l32i.n	a5, a2, 4
400825ee:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
400825f0:	b5b8      	l32i.n	a11, a5, 44
400825f2:	2a48      	l32i.n	a4, a10, 8
400825f4:	0448      	l32i.n	a4, a4, 0
400825f6:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
400825f9:	12b8      	l32i.n	a11, a2, 4
400825fb:	0b58      	l32i.n	a5, a11, 0
400825fd:	000106        	j	40082605 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
40082600:	0020c0        	memw
40082603:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082605:	0020c0        	memw
40082608:	7548      	l32i.n	a4, a5, 28
4008260a:	744040        	extui	a4, a4, 0, 8
4008260d:	fef456        	bnez	a4, 40082600 <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
40082610:	040342        	l8ui	a4, a3, 4
40082613:	0d1426        	beqi	a4, 1, 40082624 <uart_esp32_configure+0x78>
40082616:	249c      	beqz.n	a4, 4008262c <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
40082618:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
4008261b:	022426        	beqi	a4, 2, 40082621 <uart_esp32_configure+0x75>
4008261e:	002606        	j	400826ba <uart_esp32_configure+0x10e>
40082621:	0001c6        	j	4008262c <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
40082624:	f86251        	l32r	a5, 400807ac <_iram_text_start+0x25c>
40082627:	000106        	j	4008262f <uart_esp32_configure+0x83>
4008262a:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
4008262d:	f80b      	addi.n	a15, a8, -1
	}

	switch (cfg->stop_bits) {
4008262f:	050382        	l8ui	a8, a3, 5
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
40082632:	ddaf92        	movi	a9, -35
	switch (cfg->stop_bits) {
40082635:	480b      	addi.n	a4, a8, -1
40082637:	7f34f6        	bgeui	a4, 3, 400826ba <uart_esp32_configure+0x10e>
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
4008263a:	11a8c0        	slli	a10, a8, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
4008263d:	060382        	l8ui	a8, a3, 6
40082640:	7648f6        	bgeui	a8, 4, 400826ba <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
40082643:	1148e0        	slli	a4, a8, 2
40082646:	2044a0        	or	a4, a4, a10
40082649:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
4008264c:	070352        	l8ui	a5, a3, 7
4008264f:	d58c      	beqz.n	a5, 40082660 <uart_esp32_configure+0xb4>
40082651:	651566        	bnei	a5, 1, 400826ba <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
40082654:	f80e51        	l32r	a5, 4008068c <_iram_text_start+0x13c>
40082657:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
4008265a:	f85551        	l32r	a5, 400807b0 <_iram_text_start+0x260>
		break;
4008265d:	000086        	j	40082663 <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
40082660:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
40082663:	080c      	movi.n	a8, 0
40082665:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082667:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
40082669:	bbb8      	l32i.n	a11, a11, 44
4008266b:	28a8      	l32i.n	a10, a8, 8
4008266d:	01cd      	mov.n	a12, a1
4008266f:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
40082671:	002362        	l32i	a6, a3, 0
40082674:	032882        	l32i	a8, a8, 12
40082677:	0008e0        	callx8	a8
4008267a:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
4008267c:	6aec      	bnez.n	a10, 400826a6 <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
4008267e:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082680:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
40082682:	1188c0        	slli	a8, a8, 4
40082685:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
40082688:	0020c0        	memw
4008268b:	7a98      	l32i.n	a9, a10, 28
4008268d:	759090        	extui	a9, a9, 16, 8
40082690:	ff4956        	bnez	a9, 40082688 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
40082693:	f90c      	movi.n	a9, 15
40082695:	0db987        	bgeu	a9, a8, 400826a6 <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
40082698:	419480        	srli	a9, a8, 4
4008269b:	348080        	extui	a8, a8, 0, 4
4008269e:	208980        	or	a8, a9, a8
400826a1:	0020c0        	memw
400826a4:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400826a6:	0338      	l32i.n	a3, a3, 0
400826a8:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
400826aa:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400826ac:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
400826ae:	0b28      	l32i.n	a2, a11, 0
400826b0:	0020c0        	memw
400826b3:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
400826b5:	0020c0        	memw
400826b8:	9259      	s32i.n	a5, a2, 36
}
400826ba:	092d      	mov.n	a2, a9
400826bc:	f01d      	retw.n
	...

400826c0 <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
400826c0:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826c3:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
400826c6:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826c9:	0228a2        	l32i	a10, a8, 8
400826cc:	000965        	call8	40082764 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400826cf:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826d1:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400826d3:	02ad      	mov.n	a10, a2
400826d5:	ffed65        	call8	400825ac <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
400826d8:	020c      	movi.n	a2, 0
400826da:	f01d      	retw.n

400826dc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
400826dc:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400826df:	f83581        	l32r	a8, 400807b4 <_iram_text_start+0x264>
400826e2:	1132e0        	slli	a3, a2, 2
400826e5:	221b      	addi.n	a2, a2, 1
400826e7:	1122e0        	slli	a2, a2, 2
400826ea:	383a      	add.n	a3, a8, a3
400826ec:	282a      	add.n	a2, a8, a2
400826ee:	0338      	l32i.n	a3, a3, 0
400826f0:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
400826f2:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400826f4:	000d86        	j	4008272e <z_sys_init_run_level+0x52>
400826f7:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
400826fa:	0388      	l32i.n	a8, a3, 0
400826fc:	02ad      	mov.n	a10, a2
400826fe:	0008e0        	callx8	a8
40082701:	7aec      	bnez.n	a10, 4008272c <z_sys_init_run_level+0x50>
40082703:	52ac      	beqz.n	a2, 4008272c <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
40082705:	f82c81        	l32r	a8, 400807b8 <_iram_text_start+0x268>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082708:	f82d91        	l32r	a9, 400807bc <_iram_text_start+0x26c>
4008270b:	c02280        	sub	a2, a2, a8
4008270e:	212420        	srai	a2, a2, 4
40082711:	418520        	srli	a8, a2, 5
40082714:	1188e0        	slli	a8, a8, 2
40082717:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082719:	0020c0        	memw
4008271c:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
4008271e:	401200        	ssl	a2
40082721:	a12500        	sll	a2, a5
40082724:	202290        	or	a2, a2, a9
40082727:	0020c0        	memw
4008272a:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
4008272c:	338b      	addi.n	a3, a3, 8
4008272e:	c63347        	bltu	a3, a4, 400826f8 <z_sys_init_run_level+0x1c>
		}
	}
}
40082731:	f01d      	retw.n
	...

40082734 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082734:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
40082737:	f82081        	l32r	a8, 400807b8 <_iram_text_start+0x268>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
4008273a:	f82091        	l32r	a9, 400807bc <_iram_text_start+0x26c>
4008273d:	c08280        	sub	a8, a2, a8
40082740:	218480        	srai	a8, a8, 4
40082743:	412580        	srli	a2, a8, 5
40082746:	1122e0        	slli	a2, a2, 2
40082749:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
4008274b:	0020c0        	memw
4008274e:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
40082750:	190c      	movi.n	a9, 1
40082752:	401800        	ssl	a8
40082755:	a12900        	sll	a2, a9
40082758:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
4008275b:	080c      	movi.n	a8, 0
4008275d:	938920        	movnez	a8, a9, a2
40082760:	082d      	mov.n	a2, a8
}
40082762:	f01d      	retw.n

40082764 <z_impl_device_get_binding>:
{
40082764:	004136        	entry	a1, 32
40082767:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
40082769:	f81321        	l32r	a2, 400807b8 <_iram_text_start+0x268>
4008276c:	f81431        	l32r	a3, 400807bc <_iram_text_start+0x26c>
4008276f:	025d      	mov.n	a5, a2
40082771:	000486        	j	40082787 <z_impl_device_get_binding+0x23>
40082774:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
40082777:	fba520        	f64subc	a2, a5, 1, 0
4008277a:	ff          	.byte 0xff
4008277b:	005a16        	beqz	a10, 40082784 <z_impl_device_get_binding+0x20>
4008277e:	002282        	l32i	a8, a2, 0
40082781:	2f1847        	beq	a8, a4, 400827b4 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
40082784:	10c222        	addi	a2, a2, 16
40082787:	ea9237        	bne	a2, a3, 40082775 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
4008278a:	052d      	mov.n	a2, a5
4008278c:	0007c6        	j	400827af <z_impl_device_get_binding+0x4b>
4008278f:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
40082792:	02ad      	mov.n	a10, a2
40082794:	fff9e5        	call8	40082734 <z_device_ready>
40082797:	7acc      	bnez.n	a10, 400827a2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
40082799:	10c222        	addi	a2, a2, 16
4008279c:	0003c6        	j	400827af <z_impl_device_get_binding+0x4b>
4008279f:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400827a2:	02b8      	l32i.n	a11, a2, 0
400827a4:	04ad      	mov.n	a10, a4
400827a6:	00df25        	call8	40083598 <strcmp>
400827a9:	feca56        	bnez	a10, 40082799 <z_impl_device_get_binding+0x35>
400827ac:	000106        	j	400827b4 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400827af:	df9237        	bne	a2, a3, 40082792 <z_impl_device_get_binding+0x2e>
	return NULL;
400827b2:	020c      	movi.n	a2, 0
}
400827b4:	f01d      	retw.n
	...

400827b8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
400827b8:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
400827bb:	02ad      	mov.n	a10, a2
400827bd:	010365        	call8	400837f4 <arch_system_halt>

400827c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400827c0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827c3:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
400827c6:	0080e5        	call8	40082fd4 <z_impl_k_current_get>
400827c9:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
400827cc:	03bd      	mov.n	a11, a3
400827ce:	02ad      	mov.n	a10, a2
400827d0:	fffe65        	call8	400827b8 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
400827d3:	13e650        	wsr.ps	a5
400827d6:	002010        	rsync
	z_impl_k_thread_abort(thread);
400827d9:	04ad      	mov.n	a10, a4
400827db:	009b25        	call8	4008318c <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
400827de:	f01d      	retw.n

400827e0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
400827e0:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
400827e3:	f7f781        	l32r	a8, 400807c0 <_iram_text_start+0x270>
400827e6:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400827e8:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
400827eb:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
400827ee:	ffeee5        	call8	400826dc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
400827f1:	f7f4c1        	l32r	a12, 400807c4 <_iram_text_start+0x274>
400827f4:	f7f5b1        	l32r	a11, 400807c8 <_iram_text_start+0x278>
400827f7:	f7f5a1        	l32r	a10, 400807cc <_iram_text_start+0x27c>
400827fa:	fe7ba5        	call8	40080fb4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
400827fd:	3a0c      	movi.n	a10, 3
400827ff:	ffede5        	call8	400826dc <z_sys_init_run_level>

	z_init_static_threads();
40082802:	009125        	call8	40083114 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
40082805:	fe3525        	call8	40080b58 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
40082808:	f7f291        	l32r	a9, 400807d0 <_iram_text_start+0x280>
4008280b:	ea7c      	movi.n	a10, -2
4008280d:	0c0982        	l8ui	a8, a9, 12
40082810:	1088a0        	and	a8, a8, a10
40082813:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
40082816:	f01d      	retw.n

40082818 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
40082818:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
4008281b:	f75521        	l32r	a2, 40080570 <_iram_text_start+0x20>
4008281e:	030c      	movi.n	a3, 0
40082820:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
40082822:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
40082825:	01a142        	movi	a4, 0x101
40082828:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
4008282b:	10c142        	addi	a4, a1, 16
4008282e:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
40082830:	03ad      	mov.n	a10, a3
40082832:	ffeaa5        	call8	400826dc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082835:	1a0c      	movi.n	a10, 1
40082837:	ffea65        	call8	400826dc <z_sys_init_run_level>
	z_sched_init();
4008283a:	006ba5        	call8	40082ef4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
4008283d:	f7e441        	l32r	a4, 400807d0 <_iram_text_start+0x280>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082840:	f7e751        	l32r	a5, 400807dc <_iram_text_start+0x28c>
	_kernel.ready_q.cache = &z_main_thread;
40082843:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082845:	3159      	s32i.n	a5, a1, 12
40082847:	f7e3d1        	l32r	a13, 400807d4 <_iram_text_start+0x284>
4008284a:	150c      	movi.n	a5, 1
4008284c:	f789c1        	l32r	a12, 40080670 <_iram_text_start+0x120>
4008284f:	f7e2b1        	l32r	a11, 400807d8 <_iram_text_start+0x288>
40082852:	03fd      	mov.n	a15, a3
40082854:	03ed      	mov.n	a14, a3
40082856:	1139      	s32i.n	a3, a1, 4
40082858:	0139      	s32i.n	a3, a1, 0
4008285a:	2159      	s32i.n	a5, a1, 8
4008285c:	04ad      	mov.n	a10, a4
4008285e:	008065        	call8	40083064 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082861:	0d0462        	l8ui	a6, a4, 13
40082864:	b77c      	movi.n	a7, -5
40082866:	106670        	and	a6, a6, a7
40082869:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
4008286c:	04ad      	mov.n	a10, a4
4008286e:	002ce5        	call8	40082b3c <z_ready_thread>
	z_setup_new_thread(thread, stack,
40082871:	f7dd41        	l32r	a4, 400807e8 <_iram_text_start+0x298>
40082874:	f90c      	movi.n	a9, 15
40082876:	f7dad1        	l32r	a13, 400807e0 <_iram_text_start+0x290>
40082879:	f7dab1        	l32r	a11, 400807e4 <_iram_text_start+0x294>
4008287c:	3139      	s32i.n	a3, a1, 12
4008287e:	1199      	s32i.n	a9, a1, 4
40082880:	0139      	s32i.n	a3, a1, 0
40082882:	03fd      	mov.n	a15, a3
40082884:	03ed      	mov.n	a14, a3
40082886:	2159      	s32i.n	a5, a1, 8
40082888:	00a4c2        	movi	a12, 0x400
4008288b:	04ad      	mov.n	a10, a4
4008288d:	346192        	s32i	a9, a1, 208
40082890:	007d25        	call8	40083064 <z_setup_new_thread>
40082893:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
40082896:	144232        	s8i	a3, a2, 20
40082899:	106670        	and	a6, a6, a7
4008289c:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
4008289f:	f7d361        	l32r	a6, 400807ec <_iram_text_start+0x29c>
	z_setup_new_thread(thread, stack,
400828a2:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
400828a5:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
400828a7:	f7d361        	l32r	a6, 400807f4 <_iram_text_start+0x2a4>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400828aa:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
400828ac:	f7cdd1        	l32r	a13, 400807e0 <_iram_text_start+0x290>
400828af:	f7d0b1        	l32r	a11, 400807f0 <_iram_text_start+0x2a0>
400828b2:	3139      	s32i.n	a3, a1, 12
400828b4:	0139      	s32i.n	a3, a1, 0
400828b6:	03fd      	mov.n	a15, a3
400828b8:	03ed      	mov.n	a14, a3
400828ba:	2159      	s32i.n	a5, a1, 8
400828bc:	1199      	s32i.n	a9, a1, 4
400828be:	00a4c2        	movi	a12, 0x400
400828c1:	06ad      	mov.n	a10, a6
400828c3:	007a25        	call8	40083064 <z_setup_new_thread>
400828c6:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400828c9:	9269      	s32i.n	a6, a2, 36
400828cb:	103370        	and	a3, a3, a7
400828ce:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
400828d1:	f7c931        	l32r	a3, 400807f8 <_iram_text_start+0x2a8>
		_kernel.cpus[i].id = i;
400828d4:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400828d7:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
400828d9:	f7c831        	l32r	a3, 400807fc <_iram_text_start+0x2ac>
400828dc:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
400828de:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400828e0:	006350        	rsil	a5, 3
	old_thread = _current;
400828e3:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
400828e5:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
400828e7:	121437        	beq	a4, a3, 400828fd <z_cstart+0xe5>
		z_reset_time_slice();
400828ea:	0001a5        	call8	40082904 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
400828ed:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
400828ef:	1423a2        	l32i	a10, a3, 80
400828f2:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
400828f5:	2239      	s32i.n	a3, a2, 8
400828f7:	50c4b2        	addi	a11, a4, 80
400828fa:	fef0e5        	call8	40081808 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
400828fd:	13e650        	wsr.ps	a5
40082900:	002010        	rsync
	...

40082904 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
40082904:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
40082907:	f7be21        	l32r	a2, 40080800 <_iram_text_start+0x2b0>
4008290a:	002282        	l32i	a8, a2, 0
4008290d:	013816        	beqz	a8, 40082924 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
40082910:	fede65        	call8	400816f8 <z_clock_elapsed>
40082913:	002282        	l32i	a8, a2, 0
40082916:	f71621        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082919:	a8aa      	add.n	a10, a8, a10
4008291b:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
4008291d:	0b0c      	movi.n	a11, 0
4008291f:	08ad      	mov.n	a10, a8
40082921:	00a9e5        	call8	400833c0 <z_set_timeout_expiry>
	}
}
40082924:	f01d      	retw.n
	...

40082928 <z_swap_irqlock>:
{
40082928:	004136        	entry	a1, 32
	old_thread = _current;
4008292b:	f71131        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008292e:	2358      	l32i.n	a5, a3, 8
40082930:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082932:	121547        	beq	a5, a4, 40082948 <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082935:	fffce5        	call8	40082904 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082938:	587c      	movi.n	a8, -11
4008293a:	1424a2        	l32i	a10, a4, 80
4008293d:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082940:	2349      	s32i.n	a4, a3, 8
40082942:	50c5b2        	addi	a11, a5, 80
40082945:	feec25        	call8	40081808 <xtensa_switch>
40082948:	13e620        	wsr.ps	a2
4008294b:	002010        	rsync
	return _current->swap_retval;
4008294e:	2338      	l32i.n	a3, a3, 8
}
40082950:	132322        	l32i	a2, a3, 76
40082953:	f01d      	retw.n
40082955:	000000        	ill

40082958 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
40082958:	004136        	entry	a1, 32
	old_thread = _current;
4008295b:	f70531        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008295e:	2358      	l32i.n	a5, a3, 8
40082960:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082962:	121547        	beq	a5, a4, 40082978 <z_swap$isra$14+0x20>
		z_reset_time_slice();
40082965:	fff9e5        	call8	40082904 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082968:	587c      	movi.n	a8, -11
4008296a:	1424a2        	l32i	a10, a4, 80
4008296d:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082970:	2349      	s32i.n	a4, a3, 8
40082972:	50c5b2        	addi	a11, a5, 80
40082975:	fee925        	call8	40081808 <xtensa_switch>
40082978:	13e620        	wsr.ps	a2
4008297b:	002010        	rsync
	return _current->swap_retval;
4008297e:	2338      	l32i.n	a3, a3, 8
}
40082980:	132322        	l32i	a2, a3, 76
40082983:	f01d      	retw.n
40082985:	000000        	ill

40082988 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
40082988:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008298b:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
4008298e:	f6f881        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082991:	00a092        	movi	a9, 0
40082994:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
40082997:	1182e0        	slli	a8, a2, 2
4008299a:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
4008299d:	f79821        	l32r	a2, 40080800 <_iram_text_start+0x2b0>
400829a0:	1188f0        	slli	a8, a8, 1
400829a3:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
400829a5:	f79721        	l32r	a2, 40080804 <_iram_text_start+0x2b4>
400829a8:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
400829aa:	fff5a5        	call8	40082904 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
400829ad:	13e640        	wsr.ps	a4
400829b0:	002010        	rsync
	}
}
400829b3:	f01d      	retw.n
400829b5:	000000        	ill

400829b8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
400829b8:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
400829bb:	348030        	extui	a8, a3, 0, 4
400829be:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400829c1:	017856        	bnez	a8, 400829dc <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
400829c4:	03f480        	rsr.misc0	a8
400829c7:	002882        	l32i	a8, a8, 0
400829ca:	e8cc      	bnez.n	a8, 400829dc <z_reschedule+0x24>
400829cc:	f6e981        	l32r	a8, 40080570 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
400829cf:	e898      	l32i.n	a9, a8, 56
400829d1:	2888      	l32i.n	a8, a8, 8
400829d3:	051987        	beq	a9, a8, 400829dc <z_reschedule+0x24>
		z_swap(lock, key);
400829d6:	fff825        	call8	40082958 <z_swap$isra$14>
400829d9:	000146        	j	400829e2 <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
400829dc:	13e6a0        	wsr.ps	a10
400829df:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
400829e2:	f01d      	retw.n

400829e4 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
400829e4:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
400829e7:	348020        	extui	a8, a2, 0, 4
400829ea:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
400829ed:	00f856        	bnez	a8, 40082a00 <z_reschedule_irqlock+0x1c>
400829f0:	03f480        	rsr.misc0	a8
400829f3:	002882        	l32i	a8, a8, 0
400829f6:	006856        	bnez	a8, 40082a00 <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
400829f9:	fff2e5        	call8	40082928 <z_swap_irqlock>
400829fc:	000186        	j	40082a06 <z_reschedule_irqlock+0x22>
400829ff:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
40082a02:	201013        	lsi	f1, a0, 128
40082a05:	f01d00        	subx8	a1, a13, a0

40082a08 <z_reschedule_unlocked>:
{
40082a08:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a0b:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40082a0e:	fffd65        	call8	400829e4 <z_reschedule_irqlock>
}
40082a11:	f01d      	retw.n
	...

40082a14 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
40082a14:	004136        	entry	a1, 32
40082a17:	0063a0        	rsil	a10, 3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
40082a1a:	f6d581        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082a1d:	2898      	l32i.n	a9, a8, 8
40082a1f:	0f0982        	l8ui	a8, a9, 15
40082a22:	880b      	addi.n	a8, a8, -1
40082a24:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
40082a27:	13e6a0        	wsr.ps	a10
40082a2a:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
40082a2d:	f01d      	retw.n
	...

40082a30 <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
40082a30:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
40082a33:	f6cf81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082a36:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082a38:	e898      	l32i.n	a9, a8, 56
40082a3a:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082a3d:	011a97        	beq	a10, a9, 40082a42 <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
40082a40:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
40082a42:	2888      	l32i.n	a8, a8, 8
}
40082a44:	142822        	l32i	a2, a8, 80
40082a47:	f01d      	retw.n
40082a49:	000000        	ill

40082a4c <update_cache>:
{
40082a4c:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082a4f:	f76ea1        	l32r	a10, 40080808 <_iram_text_start+0x2b8>
40082a52:	00dc25        	call8	40083814 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082a55:	f6c631        	l32r	a3, 40080570 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082a58:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082a5b:	022382        	l32i	a8, a3, 8
40082a5e:	0d0892        	l8ui	a9, a8, 13
40082a61:	086957        	bbci	a9, 5, 40082a6d <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
40082a64:	08a0a2        	movi	a10, 8
40082a67:	2099a0        	or	a9, a9, a10
40082a6a:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
40082a6d:	04cc      	bnez.n	a4, 40082a71 <update_cache+0x25>
40082a6f:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
40082a71:	42dc      	bnez.n	a2, 40082a89 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
40082a73:	0d0892        	l8ui	a9, a8, 13
40082a76:	449090        	extui	a9, a9, 0, 5
40082a79:	c9cc      	bnez.n	a9, 40082a89 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
40082a7b:	071892        	l16ui	a9, a8, 14
40082a7e:	7fa0a2        	movi	a10, 127
40082a81:	04ba97        	bgeu	a10, a9, 40082a89 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
40082a84:	e389      	s32i.n	a8, a3, 56
40082a86:	000286        	j	40082a94 <update_cache+0x48>
		if (thread != _current) {
40082a89:	051847        	beq	a8, a4, 40082a92 <update_cache+0x46>
			z_reset_time_slice();
40082a8c:	201110        	or	a1, a1, a1
40082a8f:	ffe765        	call8	40082904 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
40082a92:	e349      	s32i.n	a4, a3, 56
}
40082a94:	f01d      	retw.n
	...

40082a98 <k_sched_unlock>:
{
40082a98:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a9b:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
40082a9e:	f6b481        	l32r	a8, 40080570 <_iram_text_start+0x20>
		update_cache(0);
40082aa1:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
40082aa4:	022892        	l32i	a9, a8, 8
40082aa7:	0f0982        	l8ui	a8, a9, 15
40082aaa:	01c882        	addi	a8, a8, 1
40082aad:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
40082ab0:	fff9a5        	call8	40082a4c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082ab3:	13e620        	wsr.ps	a2
40082ab6:	002010        	rsync
	z_reschedule_unlocked();
40082ab9:	fff4e5        	call8	40082a08 <z_reschedule_unlocked>
}
40082abc:	f01d      	retw.n
	...

40082ac0 <ready_thread>:
{
40082ac0:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082ac3:	0d0282        	l8ui	a8, a2, 13
40082ac6:	448080        	extui	a8, a8, 0, 5
40082ac9:	06b856        	bnez	a8, 40082b38 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
40082acc:	62b8      	l32i.n	a11, a2, 24
40082ace:	066b56        	bnez	a11, 40082b38 <ready_thread+0x78>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
40082ad1:	f6a7a1        	l32r	a10, 40080570 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082ad4:	1f0c      	movi.n	a15, 1
40082ad6:	fa88      	l32i.n	a8, a10, 60
40082ad8:	0bcd      	mov.n	a12, a11
40082ada:	93cf80        	movnez	a12, a15, a8
40082add:	74c0c0        	extui	a12, a12, 0, 8
40082ae0:	102ad2        	l32i	a13, a10, 64
40082ae3:	f749e1        	l32r	a14, 40080808 <_iram_text_start+0x2b8>
40082ae6:	fcac      	beqz.n	a12, 40082b19 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
40082ae8:	c098e0        	sub	a9, a8, a14
40082aeb:	93bf90        	movnez	a11, a15, a9
40082aee:	7490b0        	extui	a9, a11, 0, 8
40082af1:	49ac      	beqz.n	a9, 40082b19 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
40082af3:	0e0292        	l8ui	a9, a2, 14
40082af6:	239900        	sext	a9, a9, 7
40082af9:	0e08b2        	l8ui	a11, a8, 14
40082afc:	23bb00        	sext	a11, a11, 7
40082aff:	0da9b7        	bge	a9, a11, 40082b10 <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
40082b02:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
40082b04:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082b06:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
40082b08:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
40082b0a:	1829      	s32i.n	a2, a8, 4
40082b0c:	0005c6        	j	40082b27 <ready_thread+0x67>
40082b0f:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
40082b12:	288205        	call0	400ab334 <_iram_text_end+0x27602>
40082b15:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082b18:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
40082b1a:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
40082b1d:	102a      	add.n	a1, a0, a2
	node->next = list;
40082b1f:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
40082b22:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082b24:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
40082b27:	0d0282        	l8ui	a8, a2, 13
40082b2a:	80af92        	movi	a9, -128
40082b2d:	208890        	or	a8, a8, a9
40082b30:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
40082b33:	0a0c      	movi.n	a10, 0
40082b35:	fff165        	call8	40082a4c <update_cache>
}
40082b38:	f01d      	retw.n
	...

40082b3c <z_ready_thread>:
{
40082b3c:	004136        	entry	a1, 32
40082b3f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b41:	006330        	rsil	a3, 3
		ready_thread(thread);
40082b44:	fff7a5        	call8	40082ac0 <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082b47:	13e630        	wsr.ps	a3
40082b4a:	002010        	rsync
}
40082b4d:	f01d      	retw.n
	...

40082b50 <z_thread_timeout>:
{
40082b50:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082b53:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082b56:	022342        	l32i	a4, a3, 8
40082b59:	f5c222        	addi	a2, a2, -11
40082b5c:	01c416        	beqz	a4, 40082b7c <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b5f:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082b62:	03ad      	mov.n	a10, a3
40082b64:	00c9a5        	call8	40083800 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082b67:	000282        	l8ui	a8, a2, 0
40082b6a:	d97c      	movi.n	a9, -3
40082b6c:	108890        	and	a8, a8, a9
40082b6f:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082b72:	080c      	movi.n	a8, 0
40082b74:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082b76:	13e640        	wsr.ps	a4
40082b79:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082b7c:	000282        	l8ui	a8, a2, 0
40082b7f:	b96c      	movi.n	a9, -21
40082b81:	108890        	and	a8, a8, a9
40082b84:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082b87:	03ad      	mov.n	a10, a3
40082b89:	fffb25        	call8	40082b3c <z_ready_thread>
}
40082b8c:	f01d      	retw.n
	...

40082b90 <z_sched_start>:
{
40082b90:	004136        	entry	a1, 32
40082b93:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b95:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082b98:	0d0a82        	l8ui	a8, a10, 13
40082b9b:	0be827        	bbsi	a8, 2, 40082baa <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082b9e:	13e620        	wsr.ps	a2
40082ba1:	002010        	rsync
		return;
40082ba4:	0005c6        	j	40082bbf <z_sched_start+0x2f>
40082ba7:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082baa:	fbaf92        	movi	a9, -5
40082bad:	108890        	and	a8, a8, a9
40082bb0:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082bb3:	fff0e5        	call8	40082ac0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082bb6:	f715a1        	l32r	a10, 4008080c <_iram_text_start+0x2bc>
40082bb9:	20b220        	or	a11, a2, a2
40082bbc:	ffdfa5        	call8	400829b8 <z_reschedule>
}
40082bbf:	000090        	retw
	...

40082bc4 <z_move_thread_to_end_of_prio_q>:
{
40082bc4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bc7:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082bca:	0d0282        	l8ui	a8, a2, 13
40082bcd:	056877        	bbci	a8, 7, 40082bd6 <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082bd0:	20a220        	or	a10, a2, a2
40082bd3:	00c2e5        	call8	40083800 <sys_dlist_remove>
	return list->head == list;
40082bd6:	f66691        	l32r	a9, 40080570 <_iram_text_start+0x20>
40082bd9:	f70bd1        	l32r	a13, 40080808 <_iram_text_start+0x2b8>
40082bdc:	0f2982        	l32i	a8, a9, 60
40082bdf:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082be2:	027816        	beqz	a8, 40082c0d <z_move_thread_to_end_of_prio_q+0x49>
40082be5:	2418d7        	beq	a8, a13, 40082c0d <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082be8:	0e02a2        	l8ui	a10, a2, 14
40082beb:	23aa00        	sext	a10, a10, 7
40082bee:	0e08b2        	l8ui	a11, a8, 14
40082bf1:	23bb00        	sext	a11, a11, 7
40082bf4:	0caab7        	bge	a10, a11, 40082c04 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082bf7:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082bf9:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082bfb:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082bfd:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082bff:	1829      	s32i.n	a2, a8, 4
40082c01:	000586        	j	40082c1b <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082c04:	051c87        	beq	a12, a8, 40082c0d <z_move_thread_to_end_of_prio_q+0x49>
40082c07:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082c0a:	fe0856        	bnez	a8, 40082bee <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082c0d:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082c10:	102982        	l32i	a8, a9, 64
	node->next = list;
40082c13:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082c16:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082c18:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082c1b:	0d0282        	l8ui	a8, a2, 13
40082c1e:	80afa2        	movi	a10, -128
40082c21:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082c24:	29a8      	l32i.n	a10, a9, 8
40082c26:	0d4282        	s8i	a8, a2, 13
40082c29:	c0aa20        	sub	a10, a10, a2
40082c2c:	180c      	movi.n	a8, 1
40082c2e:	020c      	movi.n	a2, 0
40082c30:	8328a0        	moveqz	a2, a8, a10
40082c33:	02ad      	mov.n	a10, a2
40082c35:	ffe165        	call8	40082a4c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082c38:	13e630        	wsr.ps	a3
40082c3b:	002010        	rsync
}
40082c3e:	f01d      	retw.n

40082c40 <z_time_slice>:
{
40082c40:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082c43:	f6ef81        	l32r	a8, 40080800 <_iram_text_start+0x2b0>
40082c46:	002892        	l32i	a9, a8, 0
40082c49:	f64981        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082c4c:	039916        	beqz	a9, 40082c89 <z_time_slice+0x49>
40082c4f:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082c51:	7fa0b2        	movi	a11, 127
40082c54:	071a92        	l16ui	a9, a10, 14
40082c57:	2e3b97        	bltu	a11, a9, 40082c89 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082c5a:	f6ea91        	l32r	a9, 40080804 <_iram_text_start+0x2b4>
40082c5d:	0e0ab2        	l8ui	a11, a10, 14
40082c60:	0998      	l32i.n	a9, a9, 0
40082c62:	23bb00        	sext	a11, a11, 7
40082c65:	202b97        	blt	a11, a9, 40082c89 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082c68:	f6e091        	l32r	a9, 400807e8 <_iram_text_start+0x298>
40082c6b:	1a1a97        	beq	a10, a9, 40082c89 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082c6e:	6a98      	l32i.n	a9, a10, 24
40082c70:	015956        	bnez	a9, 40082c89 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082c73:	4898      	l32i.n	a9, a8, 16
40082c75:	082297        	blt	a2, a9, 40082c81 <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082c78:	fff4a5        	call8	40082bc4 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082c7b:	ffc8a5        	call8	40082904 <z_reset_time_slice>
40082c7e:	0002c6        	j	40082c8d <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082c81:	c09920        	sub	a9, a9, a2
40082c84:	4899      	s32i.n	a9, a8, 16
40082c86:	0000c6        	j	40082c8d <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082c89:	020c      	movi.n	a2, 0
40082c8b:	4829      	s32i.n	a2, a8, 16
}
40082c8d:	f01d      	retw.n
	...

40082c90 <z_impl_k_thread_suspend>:
{
40082c90:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082c93:	18c2a2        	addi	a10, a2, 24
40082c96:	006f65        	call8	4008338c <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c99:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082c9c:	0d0242        	l8ui	a4, a2, 13
40082c9f:	0d6477        	bbci	a4, 7, 40082cb0 <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082ca2:	02ad      	mov.n	a10, a2
40082ca4:	00b5a5        	call8	40083800 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082ca7:	0d0282        	l8ui	a8, a2, 13
40082caa:	648080        	extui	a8, a8, 0, 7
40082cad:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082cb0:	0d0282        	l8ui	a8, a2, 13
40082cb3:	041c      	movi.n	a4, 16
40082cb5:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082cb8:	f62e41        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082cbb:	0d4282        	s8i	a8, a2, 13
40082cbe:	24a8      	l32i.n	a10, a4, 8
40082cc0:	190c      	movi.n	a9, 1
40082cc2:	c0aa20        	sub	a10, a10, a2
40082cc5:	080c      	movi.n	a8, 0
40082cc7:	8389a0        	moveqz	a8, a9, a10
40082cca:	08ad      	mov.n	a10, a8
40082ccc:	ffd7e5        	call8	40082a4c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082ccf:	13e630        	wsr.ps	a3
40082cd2:	002010        	rsync
	if (thread == _current) {
40082cd5:	2438      	l32i.n	a3, a4, 8
40082cd7:	029327        	bne	a3, a2, 40082cdd <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082cda:	ffd2e5        	call8	40082a08 <z_reschedule_unlocked>
}
40082cdd:	f01d      	retw.n
	...

40082ce0 <z_thread_single_abort>:
{
40082ce0:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082ce3:	112232        	l32i	a3, a2, 68
40082ce6:	002316        	beqz	a3, 40082cec <z_thread_single_abort+0xc>
		thread->fn_abort();
40082ce9:	0003e0        	callx8	a3
40082cec:	18c2a2        	addi	a10, a2, 24
40082cef:	0069e5        	call8	4008338c <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cf2:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082cf5:	0d0232        	l8ui	a3, a2, 13
40082cf8:	445030        	extui	a5, a3, 0, 5
40082cfb:	032556        	bnez	a5, 40082d31 <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082cfe:	062252        	l32i	a5, a2, 24
40082d01:	c5ec      	bnez.n	a5, 40082d31 <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082d03:	233300        	sext	a3, a3, 7
40082d06:	00e3d6        	bgez	a3, 40082d18 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d09:	20a220        	or	a10, a2, a2
40082d0c:	00af25        	call8	40083800 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082d0f:	0d0232        	l8ui	a3, a2, 13
40082d12:	643030        	extui	a3, a3, 0, 7
40082d15:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082d18:	f61631        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082d1b:	150c      	movi.n	a5, 1
40082d1d:	23a8      	l32i.n	a10, a3, 8
40082d1f:	030c      	movi.n	a3, 0
40082d21:	c0aa20        	sub	a10, a10, a2
40082d24:	8335a0        	moveqz	a3, a5, a10
40082d27:	03ad      	mov.n	a10, a3
40082d29:	ffd225        	call8	40082a4c <update_cache>
40082d2c:	000606        	j	40082d48 <z_thread_single_abort+0x68>
40082d2f:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082d32:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d35:	aca502        	movi	a0, 0x5ac
40082d38:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082d3b:	7c0d      	lsi	f0, a12, 48
40082d3d:	3350d5        	call4	400b624c <_iram_text_end+0x3251a>
40082d40:	423210        	xorb	b3, b2, b1
40082d43:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082d45:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082d48:	0d0232        	l8ui	a3, a2, 13
40082d4b:	850c      	movi.n	a5, 8
40082d4d:	203350        	or	a3, a3, a5
40082d50:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082d53:	000886        	j	40082d79 <z_thread_single_abort+0x99>
40082d56:	a20000        	muluh	a0, a0, a0
40082d59:	2518c3        	lsi	f12, a8, 148
40082d5c:	300063        	lsi	f6, a0, 192
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d5f:	e520a3        	lsi	f10, a0, 0x394
40082d62:	00a9      	s32i.n	a10, a0, 0
40082d64:	0d0382        	l8ui	a8, a3, 13
40082d67:	d97c      	movi.n	a9, -3
40082d69:	108890        	and	a8, a8, a9
40082d6c:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082d6f:	2359      	s32i.n	a5, a3, 8
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082d71:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082d74:	03ad      	mov.n	a10, a3
40082d76:	ffd4a5        	call8	40082ac0 <ready_thread>
	return list->head == list;
40082d79:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082d7c:	00a052        	movi	a5, 0
40082d7f:	051357        	beq	a3, a5, 40082d88 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082d82:	30c282        	addi	a8, a2, 48
40082d85:	cf9387        	bne	a3, a8, 40082d58 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082d88:	13e640        	wsr.ps	a4
40082d8b:	002010        	rsync
}
40082d8e:	f01d      	retw.n

40082d90 <unready_thread>:
{
40082d90:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082d93:	0d0282        	l8ui	a8, a2, 13
40082d96:	0e6877        	bbci	a8, 7, 40082da8 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d99:	20a220        	or	a10, a2, a2
40082d9c:	00a625        	call8	40083800 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082d9f:	0d0282        	l8ui	a8, a2, 13
40082da2:	648080        	extui	a8, a8, 0, 7
40082da5:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082da8:	f5f281        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082dab:	0228a2        	l32i	a10, a8, 8
40082dae:	180c      	movi.n	a8, 1
40082db0:	c0aa20        	sub	a10, a10, a2
40082db3:	020c      	movi.n	a2, 0
40082db5:	8328a0        	moveqz	a2, a8, a10
40082db8:	02ad      	mov.n	a10, a2
40082dba:	ffc925        	call8	40082a4c <update_cache>
}
40082dbd:	f01d      	retw.n
	...

40082dc0 <z_remove_thread_from_ready_q>:
{
40082dc0:	004136        	entry	a1, 32
40082dc3:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082dc5:	006330        	rsil	a3, 3
		unready_thread(thread);
40082dc8:	fffc65        	call8	40082d90 <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082dcb:	13e630        	wsr.ps	a3
40082dce:	002010        	rsync
}
40082dd1:	f01d      	retw.n
	...

40082dd4 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082dd4:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082dd7:	007065        	call8	400834dc <z_tick_get_32>
40082dda:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ddd:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082de0:	f5e441        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082de3:	0224a2        	l32i	a10, a4, 8
40082de6:	fffda5        	call8	40082dc0 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082de9:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082dec:	f689b1        	l32r	a11, 40080810 <_iram_text_start+0x2c0>
40082def:	02cd      	mov.n	a12, a2
40082df1:	31df20        	srai	a13, a2, 31
40082df4:	18caa2        	addi	a10, a10, 24
40082df7:	004525        	call8	40083248 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082dfa:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082dfc:	041c      	movi.n	a4, 16
40082dfe:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082e01:	05ad      	mov.n	a10, a5
40082e03:	208840        	or	a8, a8, a4
40082e06:	0d4282        	s8i	a8, a2, 13
40082e09:	ffb4e5        	call8	40082958 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082e0c:	006ce5        	call8	400834dc <z_tick_get_32>
40082e0f:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082e12:	020c      	movi.n	a2, 0
40082e14:	532a20        	max	a2, a10, a2
40082e17:	f01d      	retw.n
40082e19:	000000        	ill

40082e1c <add_to_waitq_locked>:
{
40082e1c:	004136        	entry	a1, 32
	unready_thread(thread);
40082e1f:	02ad      	mov.n	a10, a2
40082e21:	fff6e5        	call8	40082d90 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082e24:	0d0282        	l8ui	a8, a2, 13
40082e27:	290c      	movi.n	a9, 2
40082e29:	208890        	or	a8, a8, a9
40082e2c:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082e2f:	93bc      	beqz.n	a3, 40082e6c <add_to_waitq_locked+0x50>
40082e31:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082e33:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e35:	78ac      	beqz.n	a8, 40082e60 <add_to_waitq_locked+0x44>
40082e37:	251387        	beq	a3, a8, 40082e60 <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082e3a:	0e0292        	l8ui	a9, a2, 14
40082e3d:	239900        	sext	a9, a9, 7
40082e40:	0e08a2        	l8ui	a10, a8, 14
40082e43:	23aa00        	sext	a10, a10, 7
40082e46:	0ca9a7        	bge	a9, a10, 40082e56 <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082e49:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082e4b:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082e4d:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082e4f:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082e51:	1829      	s32i.n	a2, a8, 4
40082e53:	000546        	j	40082e6c <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082e56:	13a8      	l32i.n	a10, a3, 4
40082e58:	0418a7        	beq	a8, a10, 40082e60 <add_to_waitq_locked+0x44>
40082e5b:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082e5d:	fdf856        	bnez	a8, 40082e40 <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082e60:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082e62:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082e64:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082e66:	1388      	l32i.n	a8, a3, 4
40082e68:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082e6a:	1329      	s32i.n	a2, a3, 4
}
40082e6c:	f01d      	retw.n
	...

40082e70 <pend>:
{
40082e70:	004136        	entry	a1, 32
40082e73:	20b330        	or	a11, a3, a3
40082e76:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082e79:	20a220        	or	a10, a2, a2
40082e7c:	fff9e5        	call8	40082e1c <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082e7f:	13e660        	wsr.ps	a6
40082e82:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082e85:	020466        	bnei	a4, -1, 40082e8b <pend+0x1b>
40082e88:	0c0526        	beqi	a5, -1, 40082e98 <pend+0x28>
40082e8b:	f661b1        	l32r	a11, 40080810 <_iram_text_start+0x2c0>
40082e8e:	04cd      	mov.n	a12, a4
40082e90:	05dd      	mov.n	a13, a5
40082e92:	18c2a2        	addi	a10, a2, 24
40082e95:	003b25        	call8	40083248 <z_add_timeout>
}
40082e98:	f01d      	retw.n
	...

40082e9c <z_pend_curr>:
{
40082e9c:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082e9f:	f5b481        	l32r	a8, 40080570 <_iram_text_start+0x20>
{
40082ea2:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40082ea5:	0228a2        	l32i	a10, a8, 8
40082ea8:	06cd      	mov.n	a12, a6
40082eaa:	04bd      	mov.n	a11, a4
40082eac:	fffc25        	call8	40082e70 <pend>
	return z_swap(lock, key);
40082eaf:	03ad      	mov.n	a10, a3
40082eb1:	ffaa65        	call8	40082958 <z_swap$isra$14>
}
40082eb4:	0a2d      	mov.n	a2, a10
40082eb6:	f01d      	retw.n

40082eb8 <z_unpend_first_thread>:
{
40082eb8:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ebb:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
40082ebe:	20a220        	or	a10, a2, a2
40082ec1:	009525        	call8	40083814 <z_priq_dumb_best>
40082ec4:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
40082ec6:	13e630        	wsr.ps	a3
40082ec9:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
40082ecc:	0aac      	beqz.n	a10, 40082ef0 <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ece:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082ed1:	0092e5        	call8	40083800 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082ed4:	0d0282        	l8ui	a8, a2, 13
40082ed7:	d97c      	movi.n	a9, -3
40082ed9:	108890        	and	a8, a8, a9
40082edc:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
40082edf:	080c      	movi.n	a8, 0
40082ee1:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082ee4:	13e630        	wsr.ps	a3
40082ee7:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
40082eea:	18c2a2        	addi	a10, a2, 24
40082eed:	0049e5        	call8	4008338c <z_abort_timeout>
}
40082ef0:	f01d      	retw.n
	...

40082ef4 <z_sched_init>:
{
40082ef4:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
40082ef7:	f59e81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082efa:	f64391        	l32r	a9, 40080808 <_iram_text_start+0x2b8>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
40082efd:	00a0b2        	movi	a11, 0
40082f00:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
40082f03:	106892        	s32i	a9, a8, 64
40082f06:	20abb0        	or	a10, a11, a11
40082f09:	ffa7e5        	call8	40082988 <k_sched_time_slice_set>
}
40082f0c:	f01d      	retw.n
	...

40082f10 <z_impl_k_yield>:
{
40082f10:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
40082f13:	f59721        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082f16:	f63431        	l32r	a3, 400807e8 <_iram_text_start+0x298>
40082f19:	2288      	l32i.n	a8, a2, 8
40082f1b:	671837        	beq	a8, a3, 40082f86 <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082f1e:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
40082f21:	22a8      	l32i.n	a10, a2, 8
40082f23:	008de5        	call8	40083800 <sys_dlist_remove>
	return list->head == list;
40082f26:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40082f28:	022282        	l32i	a8, a2, 8
40082f2b:	f637c1        	l32r	a12, 40080808 <_iram_text_start+0x2b8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082f2e:	c9ac      	beqz.n	a9, 40082f5e <z_impl_k_yield+0x4e>
40082f30:	2a19c7        	beq	a9, a12, 40082f5e <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
40082f33:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40082f36:	1022d2        	l32i	a13, a2, 64
40082f39:	23aa00        	sext	a10, a10, 7
40082f3c:	0e09b2        	l8ui	a11, a9, 14
40082f3f:	23bb00        	sext	a11, a11, 7
40082f42:	0faab7        	bge	a10, a11, 40082f55 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40082f45:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40082f47:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40082f49:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40082f4b:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40082f4d:	1989      	s32i.n	a8, a9, 4
40082f4f:	0006c6        	j	40082f6e <z_impl_k_yield+0x5e>
40082f52:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40082f55:	0519d7        	beq	a9, a13, 40082f5e <z_impl_k_yield+0x4e>
40082f58:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082f5b:	fdd956        	bnez	a9, 40082f3c <z_impl_k_yield+0x2c>
	node->prev = list->tail;
40082f5e:	102292        	l32i	a9, a2, 64
	node->next = list;
40082f61:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40082f64:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40082f66:	102292        	l32i	a9, a2, 64
40082f69:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40082f6b:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
40082f6e:	0d0822        	l8ui	a2, a8, 13
40082f71:	80af92        	movi	a9, -128
40082f74:	202290        	or	a2, a2, a9
40082f77:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40082f7a:	01a0a2        	movi	a10, 1
40082f7d:	fface5        	call8	40082a4c <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082f80:	13e630        	wsr.ps	a3
40082f83:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082f86:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40082f89:	ff9ce5        	call8	40082958 <z_swap$isra$14>
}
40082f8c:	f01d      	retw.n
	...

40082f90 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
40082f90:	004136        	entry	a1, 32
40082f93:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082f96:	140266        	bnei	a2, -1, 40082fae <z_impl_k_sleep+0x1e>
40082f99:	110366        	bnei	a3, -1, 40082fae <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40082f9c:	f57581        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082f9f:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
40082fa2:	ffcee5        	call8	40082c90 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40082fa5:	20a330        	or	a10, a3, a3
40082fa8:	000846        	j	40082fcd <z_impl_k_sleep+0x3d>
40082fab:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
40082fae:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
40082fb0:	4acc      	bnez.n	a10, 40082fb8 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
40082fb2:	fff5e5        	call8	40082f10 <z_impl_k_yield>
40082fb5:	000146        	j	40082fbe <z_impl_k_sleep+0x2e>
40082fb8:	ffe1a5        	call8	40082dd4 <z_tick_sleep$part$23>
40082fbb:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
40082fbe:	f615c1        	l32r	a12, 40080814 <_iram_text_start+0x2c4>
40082fc1:	f592d1        	l32r	a13, 4008060c <_iram_text_start+0xbc>
40082fc4:	20a330        	or	a10, a3, a3
40082fc7:	31bf30        	srai	a11, a3, 31
40082fca:	008865        	call8	40083850 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
40082fcd:	0a2d      	mov.n	a2, a10
40082fcf:	f01d      	retw.n
40082fd1:	000000        	ill

40082fd4 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
40082fd4:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
40082fd7:	f56681        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082fda:	2828      	l32i.n	a2, a8, 8
40082fdc:	f01d      	retw.n
	...

40082fe0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
40082fe0:	004136        	entry	a1, 32
40082fe3:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
40082fe6:	20a220        	or	a10, a2, a2
40082fe9:	ffece5        	call8	40082eb8 <z_unpend_first_thread>

	if (thread != NULL) {
40082fec:	00da16        	beqz	a10, 40082ffd <z_impl_k_sem_give+0x1d>
40082fef:	00a022        	movi	a2, 0
40082ff2:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
40082ff5:	ffb465        	call8	40082b3c <z_ready_thread>
40082ff8:	000506        	j	40083010 <z_impl_k_sem_give+0x30>
40082ffb:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
40082ffe:	820222        	l8ui	a2, a2, 130
40083001:	b20322        	l8ui	a2, a3, 178
40083004:	9001a0        	addx2	a0, a1, a10
40083007:	c088      	l32i.n	a8, a0, 48
40083009:	93ab80        	movnez	a10, a11, a8
4008300c:	8a9a      	add.n	a8, a10, a9
4008300e:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
40083010:	f602a1        	l32r	a10, 40080818 <_iram_text_start+0x2c8>
40083013:	03bd      	mov.n	a11, a3
40083015:	ff9a25        	call8	400829b8 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40083018:	f01d      	retw.n
	...

4008301c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
4008301c:	004136        	entry	a1, 32
4008301f:	02cd      	mov.n	a12, a2
40083021:	04ed      	mov.n	a14, a4
40083023:	05fd      	mov.n	a15, a5
40083025:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40083028:	2288      	l32i.n	a8, a2, 8
4008302a:	e88c      	beqz.n	a8, 4008303c <z_impl_k_sem_take+0x20>
		sem->count--;
4008302c:	880b      	addi.n	a8, a8, -1
4008302e:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40083030:	13e6b0        	wsr.ps	a11
40083033:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40083036:	0a0c      	movi.n	a10, 0
		goto out;
40083038:	000586        	j	40083052 <z_impl_k_sem_take+0x36>
4008303b:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
4008303e:	98cc20        	lsi	f2, a12, 0x260
40083041:	13e6b0        	wsr.ps	a11
40083044:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40083047:	0a7c      	movi.n	a10, -16
		goto out;
40083049:	000146        	j	40083052 <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
4008304c:	f5f3a1        	l32r	a10, 40080818 <_iram_text_start+0x2c8>
4008304f:	ffe4e5        	call8	40082e9c <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
40083052:	0a2d      	mov.n	a2, a10
40083054:	f01d      	retw.n
	...

40083058 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
40083058:	004136        	entry	a1, 32
	z_sched_start(thread);
4008305b:	02ad      	mov.n	a10, a2
4008305d:	ffb325        	call8	40082b90 <z_sched_start>
}
40083060:	f01d      	retw.n
	...

40083064 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40083064:	006136        	entry	a1, 48
40083067:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40083069:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
4008306b:	30c282        	addi	a8, a2, 48
4008306e:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
40083071:	470c      	movi.n	a7, 4
40083073:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40083076:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40083078:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
4008307a:	d289      	s32i.n	a8, a2, 52
4008307c:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
4008307f:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
40083081:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40083083:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40083085:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40083088:	104480        	and	a4, a4, a8
	node->next = NULL;
4008308b:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
4008308d:	c188      	l32i.n	a8, a1, 48
4008308f:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
40083091:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
40083093:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40083095:	02ad      	mov.n	a10, a2
{
40083097:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40083099:	0189      	s32i.n	a8, a1, 0
4008309b:	06ed      	mov.n	a14, a6
4008309d:	05dd      	mov.n	a13, a5
4008309f:	04cd      	mov.n	a12, a4
400830a1:	fe8d65        	call8	40081978 <arch_new_thread>
	new_thread->init_data = NULL;
400830a4:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
400830a7:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
400830aa:	f53171        	l32r	a7, 40080570 <_iram_text_start+0x20>
400830ad:	2778      	l32i.n	a7, a7, 8
400830af:	152772        	l32i	a7, a7, 84
400830b2:	156272        	s32i	a7, a2, 84
}
400830b5:	042d      	mov.n	a2, a4
400830b7:	f01d      	retw.n
400830b9:	000000        	ill

400830bc <z_impl_k_thread_create>:
{
400830bc:	008136        	entry	a1, 64
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400830bf:	00a092        	movi	a9, 0
400830c2:	036192        	s32i	a9, a1, 12
400830c5:	122192        	l32i	a9, a1, 72
{
400830c8:	142182        	l32i	a8, a1, 80
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400830cb:	2199      	s32i.n	a9, a1, 8
400830cd:	112192        	l32i	a9, a1, 68
{
400830d0:	07fd      	mov.n	a15, a7
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400830d2:	1199      	s32i.n	a9, a1, 4
400830d4:	102192        	l32i	a9, a1, 64
400830d7:	06ed      	mov.n	a14, a6
400830d9:	0199      	s32i.n	a9, a1, 0
400830db:	05dd      	mov.n	a13, a5
400830dd:	04cd      	mov.n	a12, a4
400830df:	03bd      	mov.n	a11, a3
400830e1:	02ad      	mov.n	a10, a2
400830e3:	4189      	s32i.n	a8, a1, 16
{
400830e5:	152172        	l32i	a7, a1, 84
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400830e8:	fff7a5        	call8	40083064 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
400830eb:	4188      	l32i.n	a8, a1, 16
400830ed:	020866        	bnei	a8, -1, 400830f3 <z_impl_k_thread_create+0x37>
400830f0:	1b0726        	beqi	a7, -1, 4008310f <z_impl_k_thread_create+0x53>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
400830f3:	209780        	or	a9, a7, a8
400830f6:	69cc      	bnez.n	a9, 40083100 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
400830f8:	02ad      	mov.n	a10, a2
400830fa:	ffa965        	call8	40082b90 <z_sched_start>
400830fd:	000386        	j	4008310f <z_impl_k_thread_create+0x53>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40083100:	f5c4b1        	l32r	a11, 40080810 <_iram_text_start+0x2c0>
40083103:	20c880        	or	a12, a8, a8
40083106:	20d770        	or	a13, a7, a7
40083109:	18c2a2        	addi	a10, a2, 24
4008310c:	0013a5        	call8	40083248 <z_add_timeout>
}
4008310f:	000090        	retw
	...

40083114 <z_init_static_threads>:
{
40083114:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40083117:	f5c121        	l32r	a2, 4008081c <_iram_text_start+0x2cc>
4008311a:	f5c031        	l32r	a3, 4008081c <_iram_text_start+0x2cc>
4008311d:	024d      	mov.n	a4, a2
4008311f:	000a46        	j	4008314c <z_init_static_threads+0x38>
		z_setup_new_thread(
40083122:	0b2282        	l32i	a8, a2, 44
40083125:	036182        	s32i	a8, a1, 12
40083128:	8288      	l32i.n	a8, a2, 32
4008312a:	2189      	s32i.n	a8, a1, 8
4008312c:	7288      	l32i.n	a8, a2, 28
4008312e:	1189      	s32i.n	a8, a1, 4
40083130:	6288      	l32i.n	a8, a2, 24
40083132:	0189      	s32i.n	a8, a1, 0
40083134:	52f8      	l32i.n	a15, a2, 20
40083136:	42e8      	l32i.n	a14, a2, 16
40083138:	32d8      	l32i.n	a13, a2, 12
4008313a:	22c8      	l32i.n	a12, a2, 8
4008313c:	12b8      	l32i.n	a11, a2, 4
4008313e:	0022a2        	l32i	a10, a2, 0
40083141:	fff225        	call8	40083064 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40083144:	0288      	l32i.n	a8, a2, 0
40083146:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40083149:	30c222        	addi	a2, a2, 48
4008314c:	d23237        	bltu	a2, a3, 40083122 <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
4008314f:	042d      	mov.n	a2, a4
	k_sched_lock();
40083151:	ff8c25        	call8	40082a14 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40083154:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083156:	000a86        	j	40083184 <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40083159:	92d8      	l32i.n	a13, a2, 36
4008315b:	220d26        	beqi	a13, -1, 40083181 <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
4008315e:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
40083160:	53dd40        	max	a13, a13, a4
40083163:	82cd80        	mull	a12, a13, a8
40083166:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40083169:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
4008316b:	208cd0        	or	a8, a12, a13
4008316e:	006856        	bnez	a8, 40083178 <z_init_static_threads+0x64>
	z_sched_start(thread);
40083171:	ffa1e5        	call8	40082b90 <z_sched_start>
40083174:	000246        	j	40083181 <z_init_static_threads+0x6d>
40083177:	a6b100        	lsi	f0, a1, 0x298
4008317a:	caa2f5        	call12	4004dba8 <esp32_rom_gpio_matrix_out+0x43c9c>
4008317d:	a518      	l32i.n	a1, a5, 40
4008317f:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083181:	30c222        	addi	a2, a2, 48
40083184:	d13237        	bltu	a2, a3, 40083159 <z_init_static_threads+0x45>
	k_sched_unlock();
40083187:	ff9125        	call8	40082a98 <k_sched_unlock>
}
4008318a:	f01d      	retw.n

4008318c <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
4008318c:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
4008318f:	02ad      	mov.n	a10, a2
40083191:	ffb4e5        	call8	40082ce0 <z_thread_single_abort>
40083194:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40083197:	0338      	l32i.n	a3, a3, 0
40083199:	23fc      	bnez.n	a3, 400831cf <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
4008319b:	f4f531        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008319e:	2348      	l32i.n	a4, a3, 8
400831a0:	259427        	bne	a4, a2, 400831c9 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831a3:	006350        	rsil	a5, 3
	old_thread = _current;
400831a6:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
400831a8:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
400831aa:	121427        	beq	a4, a2, 400831c0 <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
400831ad:	ff7565        	call8	40082904 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
400831b0:	587c      	movi.n	a8, -11
400831b2:	1422a2        	l32i	a10, a2, 80
400831b5:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
400831b8:	2329      	s32i.n	a2, a3, 8
400831ba:	50c4b2        	addi	a11, a4, 80
400831bd:	fe64a5        	call8	40081808 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
400831c0:	13e650        	wsr.ps	a5
400831c3:	002010        	rsync
	return _current->swap_retval;
400831c6:	000146        	j	400831cf <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400831c9:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
400831cc:	ff8165        	call8	400829e4 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
400831cf:	f01d      	retw.n
400831d1:	000000        	ill

400831d4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
400831d4:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
400831d7:	f59281        	l32r	a8, 40080820 <_iram_text_start+0x2d0>
400831da:	0a0c      	movi.n	a10, 0
400831dc:	0888      	l32i.n	a8, a8, 0
400831de:	0298a7        	bne	a8, a10, 400831e4 <elapsed+0x10>
400831e1:	fe5165        	call8	400816f8 <z_clock_elapsed>
}
400831e4:	0a2d      	mov.n	a2, a10
400831e6:	f01d      	retw.n

400831e8 <remove_timeout>:
{
400831e8:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400831eb:	0288      	l32i.n	a8, a2, 0
400831ed:	12ac      	beqz.n	a2, 40083212 <remove_timeout+0x2a>
400831ef:	f58d91        	l32r	a9, 40080824 <_iram_text_start+0x2d4>
	return (node == list->tail) ? NULL : node->next;
400831f2:	1998      	l32i.n	a9, a9, 4
400831f4:	1a1297        	beq	a2, a9, 40083212 <remove_timeout+0x2a>
	if (next(t) != NULL) {
400831f7:	789c      	beqz.n	a8, 40083212 <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
400831f9:	48c8      	l32i.n	a12, a8, 16
400831fb:	42a8      	l32i.n	a10, a2, 16
400831fd:	58b8      	l32i.n	a11, a8, 20
400831ff:	acaa      	add.n	a10, a12, a10
40083201:	52d8      	l32i.n	a13, a2, 20
40083203:	190c      	movi.n	a9, 1
40083205:	013ac7        	bltu	a10, a12, 4008320a <remove_timeout+0x22>
40083208:	090c      	movi.n	a9, 0
4008320a:	bbda      	add.n	a11, a11, a13
4008320c:	99ba      	add.n	a9, a9, a11
4008320e:	48a9      	s32i.n	a10, a8, 16
40083210:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
40083212:	1298      	l32i.n	a9, a2, 4
40083214:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083216:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083218:	080c      	movi.n	a8, 0
4008321a:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
4008321c:	1289      	s32i.n	a8, a2, 4
}
4008321e:	f01d      	retw.n

40083220 <next_timeout>:

static int32_t next_timeout(void)
{
40083220:	004136        	entry	a1, 32
	return list->head == list;
40083223:	f58081        	l32r	a8, 40080824 <_iram_text_start+0x2d4>
40083226:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083228:	019287        	bne	a2, a8, 4008322d <next_timeout+0xd>
4008322b:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
4008322d:	fffa65        	call8	400831d4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
40083230:	f57e81        	l32r	a8, 40080828 <_iram_text_start+0x2d8>
40083233:	328c      	beqz.n	a2, 4008323a <next_timeout+0x1a>
40083235:	4288      	l32i.n	a8, a2, 16
40083237:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
4008323a:	f4cd21        	l32r	a2, 40080570 <_iram_text_start+0x20>
4008323d:	4228      	l32i.n	a2, a2, 16
4008323f:	128c      	beqz.n	a2, 40083244 <next_timeout+0x24>
40083241:	012287        	blt	a2, a8, 40083246 <next_timeout+0x26>
40083244:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
40083246:	f01d      	retw.n

40083248 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
40083248:	006136        	entry	a1, 48
4008324b:	046d      	mov.n	a6, a4
4008324d:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40083250:	050466        	bnei	a4, -1, 40083259 <z_add_timeout+0x11>
40083253:	020566        	bnei	a5, -1, 40083259 <z_add_timeout+0x11>
40083256:	004b86        	j	40083388 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
40083259:	441b      	addi.n	a4, a4, 1
4008325b:	180c      	movi.n	a8, 1
4008325d:	013467        	bltu	a4, a6, 40083262 <z_add_timeout+0x1a>
40083260:	080c      	movi.n	a8, 0
40083262:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083264:	e57c      	movi.n	a5, -2
40083266:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
40083269:	047d      	mov.n	a7, a4
4008326b:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
4008326d:	190c      	movi.n	a9, 1
4008326f:	0235a7        	bltu	a5, a10, 40083275 <z_add_timeout+0x2d>
40083272:	00a092        	movi	a9, 0
40083275:	f57c      	movi.n	a5, -1
40083277:	c05580        	sub	a5, a5, a8
4008327a:	c05590        	sub	a5, a5, a9
4008327d:	045596        	bltz	a5, 400832c6 <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
40083280:	0189      	s32i.n	a8, a1, 0
40083282:	fff525        	call8	400831d4 <elapsed>
40083285:	f56951        	l32r	a5, 4008082c <_iram_text_start+0x2dc>
40083288:	e97c      	movi.n	a9, -2
4008328a:	0568      	l32i.n	a6, a5, 0
4008328c:	15b8      	l32i.n	a11, a5, 4
4008328e:	c06960        	sub	a6, a9, a6
40083291:	170c      	movi.n	a7, 1
40083293:	0188      	l32i.n	a8, a1, 0
40083295:	013967        	bltu	a9, a6, 4008329a <z_add_timeout+0x52>
40083298:	070c      	movi.n	a7, 0
4008329a:	f57c      	movi.n	a5, -1
4008329c:	c055b0        	sub	a5, a5, a11
4008329f:	c04640        	sub	a4, a6, a4
400832a2:	c05570        	sub	a5, a5, a7
400832a5:	170c      	movi.n	a7, 1
400832a7:	023647        	bltu	a6, a4, 400832ad <z_add_timeout+0x65>
400832aa:	00a072        	movi	a7, 0
400832ad:	c05580        	sub	a5, a5, a8
400832b0:	c05570        	sub	a5, a5, a7
400832b3:	c074a0        	sub	a7, a4, a10
400832b6:	318fa0        	srai	a8, a10, 31
400832b9:	160c      	movi.n	a6, 1
400832bb:	013477        	bltu	a4, a7, 400832c0 <z_add_timeout+0x78>
400832be:	060c      	movi.n	a6, 0
400832c0:	c05580        	sub	a5, a5, a8
400832c3:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
400832c6:	026232        	s32i	a3, a2, 8
400832c9:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
400832cc:	fff065        	call8	400831d4 <elapsed>
	ticks = MAX(1, ticks);
400832cf:	205770        	or	a5, a7, a7
400832d2:	204660        	or	a4, a6, a6
400832d5:	0716e6        	bgei	a6, 1, 400832e0 <z_add_timeout+0x98>
400832d8:	06cc      	bnez.n	a6, 400832dc <z_add_timeout+0x94>
400832da:	27cc      	bnez.n	a7, 400832e0 <z_add_timeout+0x98>
400832dc:	150c      	movi.n	a5, 1
400832de:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
400832e0:	317fa0        	srai	a7, a10, 31
400832e3:	a5aa      	add.n	a10, a5, a10
400832e5:	160c      	movi.n	a6, 1
400832e7:	013a57        	bltu	a10, a5, 400832ec <z_add_timeout+0xa4>
400832ea:	060c      	movi.n	a6, 0
400832ec:	447a      	add.n	a4, a4, a7
400832ee:	464a      	add.n	a4, a6, a4
400832f0:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
400832f2:	f54c41        	l32r	a4, 40080824 <_iram_text_start+0x2d4>
400832f5:	42a9      	s32i.n	a10, a2, 16
400832f7:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400832f9:	029547        	bne	a5, a4, 400832ff <z_add_timeout+0xb7>
400832fc:	001e46        	j	40083379 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400832ff:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
40083301:	1b0c      	movi.n	a11, 1
40083303:	0c0c      	movi.n	a12, 0
40083305:	001386        	j	40083357 <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
40083308:	5588      	l32i.n	a8, a5, 20
4008330a:	5268      	l32i.n	a6, a2, 20
4008330c:	4578      	l32i.n	a7, a5, 16
4008330e:	4298      	l32i.n	a9, a2, 16
40083310:	053687        	bltu	a6, a8, 40083319 <z_add_timeout+0xd1>
40083313:	259867        	bne	a8, a6, 4008333c <z_add_timeout+0xf4>
40083316:	22b977        	bgeu	a9, a7, 4008333c <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
40083319:	c09790        	sub	a9, a7, a9
4008331c:	1a0c      	movi.n	a10, 1
4008331e:	023797        	bltu	a7, a9, 40083324 <z_add_timeout+0xdc>
40083321:	00a0a2        	movi	a10, 0
40083324:	c06860        	sub	a6, a8, a6
40083327:	c066a0        	sub	a6, a6, a10
4008332a:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
4008332c:	1568      	l32i.n	a6, a5, 4
4008332e:	4599      	s32i.n	a9, a5, 16
40083330:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
40083332:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
40083334:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
40083336:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
40083338:	000886        	j	4008335e <z_add_timeout+0x116>
4008333b:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
4008333e:	dbb0c0        	movt.s	f11, f0, b12
40083341:	397720        	lsi	f2, a7, 228
40083344:	dcc002        	addi	a0, a0, -36
40083347:	668020        	lsi	f2, a0, 0x198
4008334a:	66d0c0        	lsi	f12, a0, 0x198
4008334d:	4279c0        	xorb	b7, b9, b12
40083350:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
40083352:	2315a7        	beq	a5, a10, 40083379 <z_add_timeout+0x131>
40083355:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
40083357:	fad556        	bnez	a5, 40083308 <z_add_timeout+0xc0>
4008335a:	0006c6        	j	40083379 <z_add_timeout+0x131>
4008335d:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
40083360:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
40083363:	470b      	addi.n	a4, a7, -1
40083365:	a50815        	call4	400283e8 <esp32_rom_gpio_matrix_out+0x1e4dc>
			z_clock_set_timeout(next_timeout(), false);
40083368:	ffeb      	addi.n	a15, a15, 14
4008336a:	00a0b2        	movi	a11, 0
4008336d:	fe32a5        	call8	40081698 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083370:	13e630        	wsr.ps	a3
40083373:	002010        	rsync
	LOCKED(&timeout_lock) {
40083376:	000386        	j	40083388 <z_add_timeout+0x140>
	node->prev = list->tail;
40083379:	1458      	l32i.n	a5, a4, 4
	node->next = list;
4008337b:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
4008337d:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
4008337f:	1458      	l32i.n	a5, a4, 4
40083381:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
40083383:	1429      	s32i.n	a2, a4, 4
40083385:	fff546        	j	4008335e <z_add_timeout+0x116>
		}
	}
}
40083388:	f01d      	retw.n
	...

4008338c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
4008338c:	004136        	entry	a1, 32
4008338f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083391:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
40083394:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
40083396:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083398:	004916        	beqz	a9, 400833a0 <z_abort_timeout+0x14>
			remove_timeout(to);
4008339b:	ffe4e5        	call8	400831e8 <remove_timeout>
			ret = 0;
4008339e:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
400833a0:	13e620        	wsr.ps	a2
400833a3:	002010        	rsync
		}
	}

	return ret;
}
400833a6:	082d      	mov.n	a2, a8
400833a8:	f01d      	retw.n
	...

400833ac <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
400833ac:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400833af:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
400833b2:	ffe6e5        	call8	40083220 <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400833b5:	13e620        	wsr.ps	a2
400833b8:	002010        	rsync
	}
	return ret;
}
400833bb:	0a2d      	mov.n	a2, a10
400833bd:	f01d      	retw.n
	...

400833c0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
400833c0:	004136        	entry	a1, 32
400833c3:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400833c6:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
400833c9:	ffe565        	call8	40083220 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
400833cc:	00a0c2        	movi	a12, 0
400833cf:	01ca92        	addi	a9, a10, 1
400833d2:	01a082        	movi	a8, 1
400833d5:	0c5d      	mov.n	a5, a12
400833d7:	835890        	moveqz	a5, a8, a9
400833da:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
400833dc:	0122a7        	blt	a2, a10, 400833e1 <z_set_timeout_expiry+0x21>
400833df:	0c8d      	mov.n	a8, a12
400833e1:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
400833e4:	0b6807        	bbci	a8, 0, 400833f3 <z_set_timeout_expiry+0x33>
400833e7:	082aa6        	blti	a10, 2, 400833f3 <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
400833ea:	20b330        	or	a11, a3, a3
400833ed:	20a220        	or	a10, a2, a2
400833f0:	fe2a65        	call8	40081698 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400833f3:	13e640        	wsr.ps	a4
400833f6:	002010        	rsync
		}
	}
}
400833f9:	000090        	retw

400833fc <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
400833fc:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
400833ff:	02ad      	mov.n	a10, a2
40083401:	ff83e5        	call8	40082c40 <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083404:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
40083407:	f50661        	l32r	a6, 40080820 <_iram_text_start+0x2d0>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
4008340a:	f48041        	l32r	a4, 4008060c <_iram_text_start+0xbc>
	announce_remaining = ticks;
4008340d:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
4008340f:	f47f51        	l32r	a5, 4008060c <_iram_text_start+0xbc>
	while (first() != NULL && first()->dticks <= announce_remaining) {
40083412:	000c86        	j	40083448 <z_clock_announce+0x4c>
		curr_tick += dt;
40083415:	989a      	add.n	a9, a8, a9
40083417:	31bf80        	srai	a11, a8, 31
4008341a:	1a0c      	movi.n	a10, 1
4008341c:	013987        	bltu	a9, a8, 40083421 <z_clock_announce+0x25>
4008341f:	0a0c      	movi.n	a10, 0
40083421:	ebea      	add.n	a14, a11, a14
40083423:	aaea      	add.n	a10, a10, a14
40083425:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
40083427:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
4008342a:	4249      	s32i.n	a4, a2, 16
4008342c:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
4008342e:	02ad      	mov.n	a10, a2
		curr_tick += dt;
40083430:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
40083432:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
40083435:	ffdb25        	call8	400831e8 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083438:	13e630        	wsr.ps	a3
4008343b:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
4008343e:	2238      	l32i.n	a3, a2, 8
40083440:	02ad      	mov.n	a10, a2
40083442:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083445:	006330        	rsil	a3, 3
	return list->head == list;
40083448:	f4f781        	l32r	a8, 40080824 <_iram_text_start+0x2d4>
4008344b:	f4f8d1        	l32r	a13, 4008082c <_iram_text_start+0x2dc>
4008344e:	06c8      	l32i.n	a12, a6, 0
40083450:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
40083452:	31bfc0        	srai	a11, a12, 31
40083455:	0d98      	l32i.n	a9, a13, 0
40083457:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
40083459:	129c      	beqz.n	a2, 4008346e <z_clock_announce+0x72>
4008345b:	0f1287        	beq	a2, a8, 4008346e <z_clock_announce+0x72>
4008345e:	52a8      	l32i.n	a10, a2, 20
40083460:	4288      	l32i.n	a8, a2, 16
40083462:	323ba7        	bltu	a11, a10, 40083498 <z_clock_announce+0x9c>
40083465:	ac9ab7        	bne	a10, a11, 40083415 <z_clock_announce+0x19>
40083468:	a9bc87        	bgeu	a12, a8, 40083415 <z_clock_announce+0x19>
4008346b:	000a46        	j	40083498 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
4008346e:	9c9a      	add.n	a9, a12, a9
40083470:	01a022        	movi	a2, 1
40083473:	0139c7        	bltu	a9, a12, 40083478 <z_clock_announce+0x7c>
40083476:	020c      	movi.n	a2, 0
40083478:	80bbe0        	add	a11, a11, a14
4008347b:	8022b0        	add	a2, a2, a11
4008347e:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
40083480:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
40083482:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
40083484:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
40083486:	ffd9a5        	call8	40083220 <next_timeout>
40083489:	02bd      	mov.n	a11, a2
4008348b:	fe20e5        	call8	40081698 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008348e:	13e630        	wsr.ps	a3
40083491:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
40083494:	f01d      	retw.n
40083496:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083499:	c048      	l32i.n	a4, a0, 48
4008349b:	01a052        	movi	a5, 1
4008349e:	023847        	bltu	a8, a4, 400834a4 <z_clock_announce+0xa8>
400834a1:	00a052        	movi	a5, 0
400834a4:	c0aab0        	sub	a10, a10, a11
400834a7:	c0aa50        	sub	a10, a10, a5
400834aa:	4249      	s32i.n	a4, a2, 16
400834ac:	52a9      	s32i.n	a10, a2, 20
400834ae:	ffef06        	j	4008346e <z_clock_announce+0x72>
400834b1:	000000        	ill

400834b4 <z_tick_get>:

int64_t z_tick_get(void)
{
400834b4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400834b7:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
400834ba:	fe23e5        	call8	400816f8 <z_clock_elapsed>
400834bd:	f4db31        	l32r	a3, 4008082c <_iram_text_start+0x2dc>
400834c0:	002322        	l32i	a2, a3, 0
400834c3:	012382        	l32i	a8, a3, 4
400834c6:	802a20        	add	a2, a10, a2
400834c9:	130c      	movi.n	a3, 1
400834cb:	0132a7        	bltu	a2, a10, 400834d0 <z_tick_get+0x1c>
400834ce:	030c      	movi.n	a3, 0
400834d0:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
400834d2:	13e640        	wsr.ps	a4
400834d5:	002010        	rsync
	}
	return t;
}
400834d8:	f01d      	retw.n
	...

400834dc <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
400834dc:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
400834df:	fffd65        	call8	400834b4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
400834e2:	0a2d      	mov.n	a2, a10
400834e4:	f01d      	retw.n
	...

400834e8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
400834e8:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400834eb:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400834ed:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
400834f0:	ffeba5        	call8	400833ac <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400834f3:	013ae6        	bgei	a10, 3, 400834f8 <idle+0x10>
400834f6:	02ad      	mov.n	a10, a2
400834f8:	02bd      	mov.n	a11, a2
400834fa:	ffec65        	call8	400833c0 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
400834fd:	0008a5        	call8	40083588 <arch_cpu_idle>
40083500:	fffa46        	j	400834ed <idle+0x5>
	...

40083504 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
40083504:	004136        	entry	a1, 32
40083507:	0cc282        	addi	a8, a2, 12
4008350a:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
4008350d:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
40083510:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
40083512:	04cd      	mov.n	a12, a4
40083514:	03bd      	mov.n	a11, a3
40083516:	fdc3e5        	call8	40081154 <sys_heap_init>
}
40083519:	f01d      	retw.n
	...

4008351c <statics_init>:

static int statics_init(const struct device *unused)
{
4008351c:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
4008351f:	f4c421        	l32r	a2, 40080830 <_iram_text_start+0x2e0>
40083522:	000386        	j	40083534 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
40083525:	0222c2        	l32i	a12, a2, 8
40083528:	0122b2        	l32i	a11, a2, 4
4008352b:	20a220        	or	a10, a2, a2
4008352e:	fffd65        	call8	40083504 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
40083531:	14c222        	addi	a2, a2, 20
40083534:	f4c031        	l32r	a3, 40080834 <_iram_text_start+0x2e4>
40083537:	ea3237        	bltu	a2, a3, 40083525 <statics_init+0x9>
	}
	return 0;
}
4008353a:	020c      	movi.n	a2, 0
4008353c:	f01d      	retw.n
	...

40083540 <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
40083540:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
40083543:	380c      	movi.n	a8, 3
{
40083545:	02ad      	mov.n	a10, a2
40083547:	05dd      	mov.n	a13, a5
	msg.buf = buf;
40083549:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
4008354b:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
4008354d:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083550:	2288      	l32i.n	a8, a2, 8
40083552:	1c0c      	movi.n	a12, 1
40083554:	1888      	l32i.n	a8, a8, 4
40083556:	20b110        	or	a11, a1, a1
40083559:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
4008355c:	0a2d      	mov.n	a2, a10
4008355e:	f01d      	retw.n

40083560 <i2c_write>:
{
40083560:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083563:	280c      	movi.n	a8, 2
{
40083565:	02ad      	mov.n	a10, a2
40083567:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
40083569:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
4008356b:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
4008356d:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
40083570:	2288      	l32i.n	a8, a2, 8
40083572:	1c0c      	movi.n	a12, 1
40083574:	1888      	l32i.n	a8, a8, 4
40083576:	20b110        	or	a11, a1, a1
40083579:	0008e0        	callx8	a8
}
4008357c:	0a2d      	mov.n	a2, a10
4008357e:	f01d      	retw.n

40083580 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
40083580:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
40083583:	f01d      	retw.n
40083585:	000000        	ill

40083588 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
40083588:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
4008358b:	007000        	waiti	0
}
4008358e:	f01d      	retw.n

40083590 <z_xtensa_dump_stack>:
{
40083590:	004136        	entry	a1, 32
}
40083593:	f01d      	retw.n
40083595:	000000        	ill

40083598 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083598:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008359b:	0000c6        	j	400835a2 <strcmp+0xa>
		s1++;
4008359e:	221b      	addi.n	a2, a2, 1
		s2++;
400835a0:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
400835a2:	000282        	l8ui	a8, a2, 0
400835a5:	000392        	l8ui	a9, a3, 0
400835a8:	029897        	bne	a8, a9, 400835ae <strcmp+0x16>
400835ab:	fef856        	bnez	a8, 4008359e <strcmp+0x6>
	}

	return *s1 - *s2;
}
400835ae:	c02890        	sub	a2, a8, a9
400835b1:	f01d      	retw.n
	...

400835b4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
400835b4:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
400835b7:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400835ba:	028d      	mov.n	a8, a2
400835bc:	000286        	j	400835ca <memset+0x16>
400835bf:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
400835c2:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
400835c5:	440b00        	extui	a0, a0, 11, 5
		n--;
400835c8:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400835ca:	149080        	extui	a9, a8, 0, 2
400835cd:	08cd      	mov.n	a12, a8
400835cf:	fed956        	bnez	a9, 400835c0 <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
400835d2:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
400835d5:	11a380        	slli	a10, a3, 8
400835d8:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
400835db:	11a300        	slli	a10, a3, 16
400835de:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
400835e1:	41a240        	srli	a10, a4, 2
400835e4:	11dae0        	slli	a13, a10, 2
400835e7:	ed8a      	add.n	a14, a13, a8
400835e9:	0000c6        	j	400835f0 <memset+0x3c>
		*(d_word++) = c_word;
400835ec:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
400835ee:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
400835f0:	f898e7        	bne	a8, a14, 400835ec <memset+0x38>
400835f3:	11aae0        	slli	a10, a10, 2
400835f6:	c044a0        	sub	a4, a4, a10
400835f9:	000206        	j	40083605 <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
400835fc:	39da      	add.n	a3, a9, a13
400835fe:	3c3a      	add.n	a3, a12, a3
40083600:	0043b2        	s8i	a11, a3, 0
		n--;
40083603:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
40083605:	f39497        	bne	a4, a9, 400835fc <memset+0x48>
	}

	return buf;
}
40083608:	f01d      	retw.n
	...

4008360c <_stdout_hook_default>:
{
4008360c:	004136        	entry	a1, 32
}
4008360f:	f27c      	movi.n	a2, -1
40083611:	f01d      	retw.n
	...

40083614 <gpio_esp32_port_get_raw>:
{
40083614:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
40083617:	3288      	l32i.n	a8, a2, 12
}
40083619:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
4008361b:	4888      	l32i.n	a8, a8, 16
4008361d:	0020c0        	memw
40083620:	0888      	l32i.n	a8, a8, 0
40083622:	0389      	s32i.n	a8, a3, 0
}
40083624:	f01d      	retw.n
	...

40083628 <gpio_esp32_port_set_masked_raw>:
{
40083628:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
4008362b:	3288      	l32i.n	a8, a2, 12
4008362d:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083630:	5888      	l32i.n	a8, a8, 20
40083632:	0020c0        	memw
40083635:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
40083637:	304940        	xor	a4, a9, a4
4008363a:	104430        	and	a4, a4, a3
4008363d:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
40083640:	0020c0        	memw
40083643:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083645:	13e6a0        	wsr.ps	a10
40083648:	002010        	rsync
}
4008364b:	020c      	movi.n	a2, 0
4008364d:	f01d      	retw.n
	...

40083650 <gpio_esp32_port_set_bits_raw>:
{
40083650:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
40083653:	3288      	l32i.n	a8, a2, 12
}
40083655:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
40083657:	2888      	l32i.n	a8, a8, 8
40083659:	0020c0        	memw
4008365c:	0839      	s32i.n	a3, a8, 0
}
4008365e:	f01d      	retw.n

40083660 <gpio_esp32_port_clear_bits_raw>:
{
40083660:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
40083663:	3288      	l32i.n	a8, a2, 12
}
40083665:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
40083667:	3888      	l32i.n	a8, a8, 12
40083669:	0020c0        	memw
4008366c:	0839      	s32i.n	a3, a8, 0
}
4008366e:	f01d      	retw.n

40083670 <gpio_esp32_port_toggle_bits>:
{
40083670:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083673:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083675:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
40083678:	5898      	l32i.n	a9, a8, 20
4008367a:	0020c0        	memw
4008367d:	0988      	l32i.n	a8, a9, 0
4008367f:	308830        	xor	a8, a8, a3
40083682:	0020c0        	memw
40083685:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40083687:	13e6a0        	wsr.ps	a10
4008368a:	002010        	rsync
}
4008368d:	020c      	movi.n	a2, 0
4008368f:	f01d      	retw.n
40083691:	000000        	ill

40083694 <gpio_esp32_manage_callback>:
{
40083694:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
40083697:	3288      	l32i.n	a8, a2, 12
{
40083699:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
4008369c:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008369e:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
400836a0:	42cc      	bnez.n	a2, 400836a8 <gpio_esp32_manage_callback+0x14>
400836a2:	000fc6        	j	400836e5 <gpio_esp32_manage_callback+0x51>
400836a5:	0a2d00        	add.s	f2, f13, f0
400836a8:	209327        	bne	a3, a2, 400836cc <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
400836ab:	0328      	l32i.n	a2, a3, 0
400836ad:	b9cc      	bnez.n	a9, 400836bc <gpio_esp32_manage_callback+0x28>
400836af:	a898      	l32i.n	a9, a8, 40
	list->head = node;
400836b1:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
400836b3:	0e9397        	bne	a3, a9, 400836c5 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400836b6:	a829      	s32i.n	a2, a8, 40
400836b8:	000246        	j	400836c5 <gpio_esp32_manage_callback+0x31>
400836bb:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
400836be:	a828      	l32i.n	a2, a8, 40
400836c0:	019327        	bne	a3, a2, 400836c5 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400836c3:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
400836c5:	020c      	movi.n	a2, 0
400836c7:	0329      	s32i.n	a2, a3, 0
400836c9:	000606        	j	400836e5 <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400836cc:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
400836ce:	029d      	mov.n	a9, a2
400836d0:	fd2a56        	bnez	a10, 400836a6 <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
400836d3:	a26c      	movi.n	a2, -22
			if (!set) {
400836d5:	017416        	beqz	a4, 400836f0 <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
400836d8:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
400836da:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
400836dc:	a828      	l32i.n	a2, a8, 40
	list->head = node;
400836de:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
400836e0:	42cc      	bnez.n	a2, 400836e8 <gpio_esp32_manage_callback+0x54>
400836e2:	000206        	j	400836ee <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
400836e5:	fef456        	bnez	a4, 400836d8 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
400836e8:	020c      	movi.n	a2, 0
400836ea:	000086        	j	400836f0 <gpio_esp32_manage_callback+0x5c>
400836ed:	a83900        	lsi	f0, a9, 0x2a0
}
400836f0:	f01d      	retw.n
	...

400836f4 <gpio_esp32_fire_callbacks>:
{
400836f4:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
400836f7:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
400836f9:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
400836fb:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
400836fd:	0020c0        	memw
40083700:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
40083702:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
40083704:	0020c0        	memw
40083707:	0849      	s32i.n	a4, a8, 0
40083709:	8b9c      	beqz.n	a11, 40083725 <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
4008370b:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
4008370d:	2bc8      	l32i.n	a12, a11, 8
4008370f:	10c4c0        	and	a12, a4, a12
40083712:	6c8c      	beqz.n	a12, 4008371c <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
40083714:	1b88      	l32i.n	a8, a11, 4
40083716:	20a220        	or	a10, a2, a2
40083719:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
4008371c:	538c      	beqz.n	a3, 40083725 <gpio_esp32_fire_callbacks+0x31>
4008371e:	03bd      	mov.n	a11, a3
40083720:	0338      	l32i.n	a3, a3, 0
40083722:	fff9c6        	j	4008370d <gpio_esp32_fire_callbacks+0x19>
}
40083725:	f01d      	retw.n
	...

40083728 <i2c_esp32_connect_irq_0>:
{
40083728:	004136        	entry	a1, 32
}
4008372b:	f01d      	retw.n
4008372d:	000000        	ill

40083730 <i2c_esp32_connect_irq_1>:
40083730:	004136        	entry	a1, 32
40083733:	f01d      	retw.n
40083735:	000000        	ill

40083738 <uart_esp32_poll_in>:
{
40083738:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
4008373b:	1228      	l32i.n	a2, a2, 4
4008373d:	0298      	l32i.n	a9, a2, 0
		return -1;
4008373f:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
40083741:	0020c0        	memw
40083744:	7988      	l32i.n	a8, a9, 28
40083746:	748080        	extui	a8, a8, 0, 8
40083749:	888c      	beqz.n	a8, 40083755 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
4008374b:	0020c0        	memw
4008374e:	0928      	l32i.n	a2, a9, 0
40083750:	004322        	s8i	a2, a3, 0
	return 0;
40083753:	020c      	movi.n	a2, 0
}
40083755:	f01d      	retw.n
	...

40083758 <uart_esp32_poll_out>:
{
40083758:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
4008375b:	1288      	l32i.n	a8, a2, 4
{
4008375d:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
40083760:	0898      	l32i.n	a9, a8, 0
40083762:	7ea0a2        	movi	a10, 126
40083765:	0020c0        	memw
40083768:	7988      	l32i.n	a8, a9, 28
4008376a:	758080        	extui	a8, a8, 16, 8
4008376d:	f43a87        	bltu	a10, a8, 40083765 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
40083770:	0020c0        	memw
40083773:	0939      	s32i.n	a3, a9, 0
}
40083775:	f01d      	retw.n
	...

40083778 <uart_esp32_err_check>:
{
40083778:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
4008377b:	1228      	l32i.n	a2, a2, 4
4008377d:	0288      	l32i.n	a8, a2, 0
4008377f:	0020c0        	memw
40083782:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083784:	0020c0        	memw
40083787:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
40083789:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
4008378c:	418380        	srli	a8, a8, 3
4008378f:	202280        	or	a2, a2, a8
}
40083792:	042020        	extui	a2, a2, 0, 1
40083795:	f01d      	retw.n
	...

40083798 <uart_esp32_config_get>:
{
40083798:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
4008379b:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
4008379d:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
4008379f:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
400837a1:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
400837a3:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
400837a5:	0288      	l32i.n	a8, a2, 0
400837a7:	0020c0        	memw
400837aa:	082822        	l32i	a2, a8, 32
400837ad:	076217        	bbci	a2, 1, 400837b8 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
400837b0:	0020c0        	memw
400837b3:	8898      	l32i.n	a9, a8, 32
400837b5:	049090        	extui	a9, a9, 0, 1
400837b8:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
400837bb:	0020c0        	memw
400837be:	8898      	l32i.n	a9, a8, 32
400837c0:	149490        	extui	a9, a9, 4, 2
400837c3:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
400837c6:	0020c0        	memw
400837c9:	082892        	l32i	a9, a8, 32
400837cc:	149290        	extui	a9, a9, 2, 2
400837cf:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
400837d2:	0020c0        	memw
400837d5:	8828      	l32i.n	a2, a8, 32
400837d7:	0562f7        	bbci	a2, 15, 400837e0 <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
400837da:	01a022        	movi	a2, 1
400837dd:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
400837e0:	0020c0        	memw
400837e3:	9828      	l32i.n	a2, a8, 36
400837e5:	047277        	bbci	a2, 23, 400837ed <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
400837e8:	220c      	movi.n	a2, 2
400837ea:	074322        	s8i	a2, a3, 7
}
400837ed:	020c      	movi.n	a2, 0
400837ef:	f01d      	retw.n
400837f1:	000000        	ill

400837f4 <arch_system_halt>:
{
400837f4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400837f7:	006380        	rsil	a8, 3
	for (;;) {
400837fa:	ffff06        	j	400837fa <arch_system_halt+0x6>
400837fd:	000000        	ill

40083800 <sys_dlist_remove>:
{
40083800:	004136        	entry	a1, 32
	node->prev->next = node->next;
40083803:	0288      	l32i.n	a8, a2, 0
40083805:	1298      	l32i.n	a9, a2, 4
40083807:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083809:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
4008380b:	080c      	movi.n	a8, 0
4008380d:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
4008380f:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
40083811:	f01d      	retw.n
	...

40083814 <z_priq_dumb_best>:
{
40083814:	004136        	entry	a1, 32
	return list->head == list;
40083817:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
40083819:	188c      	beqz.n	a8, 4008381e <z_priq_dumb_best+0xa>
4008381b:	019287        	bne	a2, a8, 40083820 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
4008381e:	080c      	movi.n	a8, 0
}
40083820:	082d      	mov.n	a2, a8
40083822:	f01d      	retw.n

40083824 <z_impl_k_sem_init>:
{
40083824:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
40083827:	180c      	movi.n	a8, 1
40083829:	090c      	movi.n	a9, 0
4008382b:	938940        	movnez	a8, a9, a4
4008382e:	748080        	extui	a8, a8, 0, 8
40083831:	0f9897        	bne	a8, a9, 40083844 <z_impl_k_sem_init+0x20>
40083834:	0c3437        	bltu	a4, a3, 40083844 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
40083837:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
40083839:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
4008383b:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
4008383d:	1229      	s32i.n	a2, a2, 4
	return 0;
4008383f:	082d      	mov.n	a2, a8
40083841:	000046        	j	40083846 <z_impl_k_sem_init+0x22>
		return -EINVAL;
40083844:	a26c      	movi.n	a2, -22
}
40083846:	f01d      	retw.n

40083848 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
40083848:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
4008384b:	f01d      	retw.n
4008384d:	000000        	ill

40083850 <__udivdi3>:
40083850:	004136        	entry	a1, 32
40083853:	03dd      	mov.n	a13, a3
40083855:	04ad      	mov.n	a10, a4
40083857:	053d      	mov.n	a3, a5
40083859:	02cd      	mov.n	a12, a2
4008385b:	0d9d      	mov.n	a9, a13
4008385d:	184556        	bnez	a5, 400839e5 <__udivdi3+0x195>
40083860:	023d47        	bltu	a13, a4, 40083866 <__udivdi3+0x16>
40083863:	002086        	j	400838e9 <__udivdi3+0x99>
40083866:	40f420        	nsau	a2, a4
40083869:	c29c      	beqz.n	a2, 40083889 <__udivdi3+0x39>
4008386b:	608020        	neg	a8, a2
4008386e:	400800        	ssr	a8
40083871:	9180c0        	srl	a8, a12
40083874:	401200        	ssl	a2
40083877:	a19d00        	sll	a9, a13
4008387a:	401200        	ssl	a2
4008387d:	a1a400        	sll	a10, a4
40083880:	209890        	or	a9, a8, a9
40083883:	401200        	ssl	a2
40083886:	a1cc00        	sll	a12, a12
40083889:	f580a0        	extui	a8, a10, 16, 16
4008388c:	e2d980        	remu	a13, a9, a8
4008388f:	f440a0        	extui	a4, a10, 0, 16
40083892:	c29980        	quou	a9, a9, a8
40083895:	11dd00        	slli	a13, a13, 16
40083898:	f5b0c0        	extui	a11, a12, 16, 16
4008389b:	822490        	mull	a2, a4, a9
4008389e:	20bdb0        	or	a11, a13, a11
400838a1:	13bb27        	bgeu	a11, a2, 400838b8 <__udivdi3+0x68>
400838a4:	bbaa      	add.n	a11, a11, a10
400838a6:	590b      	addi.n	a5, a9, -1
400838a8:	0a3ba7        	bltu	a11, a10, 400838b6 <__udivdi3+0x66>
400838ab:	07bb27        	bgeu	a11, a2, 400838b6 <__udivdi3+0x66>
400838ae:	fec992        	addi	a9, a9, -2
400838b1:	bbaa      	add.n	a11, a11, a10
400838b3:	000046        	j	400838b8 <__udivdi3+0x68>
400838b6:	059d      	mov.n	a9, a5
400838b8:	c0bb20        	sub	a11, a11, a2
400838bb:	e22b80        	remu	a2, a11, a8
400838be:	c2bb80        	quou	a11, a11, a8
400838c1:	112200        	slli	a2, a2, 16
400838c4:	f4c0c0        	extui	a12, a12, 0, 16
400838c7:	8244b0        	mull	a4, a4, a11
400838ca:	20c2c0        	or	a12, a2, a12
400838cd:	0fbc47        	bgeu	a12, a4, 400838e0 <__udivdi3+0x90>
400838d0:	caca      	add.n	a12, a10, a12
400838d2:	ffcb22        	addi	a2, a11, -1
400838d5:	05bc47        	bgeu	a12, a4, 400838de <__udivdi3+0x8e>
400838d8:	fecbb2        	addi	a11, a11, -2
400838db:	01bca7        	bgeu	a12, a10, 400838e0 <__udivdi3+0x90>
400838de:	02bd      	mov.n	a11, a2
400838e0:	118900        	slli	a8, a9, 16
400838e3:	2088b0        	or	a8, a8, a11
400838e6:	007406        	j	40083aba <__udivdi3+0x26a>
400838e9:	34cc      	bnez.n	a4, 400838f0 <__udivdi3+0xa0>
400838eb:	130c      	movi.n	a3, 1
400838ed:	c2a340        	quou	a10, a3, a4
400838f0:	40fa50        	nsau	a5, a10
400838f3:	c08da0        	sub	a8, a13, a10
400838f6:	130c      	movi.n	a3, 1
400838f8:	089516        	beqz	a5, 40083985 <__udivdi3+0x135>
400838fb:	042c      	movi.n	a4, 32
400838fd:	c04450        	sub	a4, a4, a5
40083900:	401500        	ssl	a5
40083903:	a1aa00        	sll	a10, a10
40083906:	400400        	ssr	a4
40083909:	9130d0        	srl	a3, a13
4008390c:	401500        	ssl	a5
4008390f:	a18d00        	sll	a8, a13
40083912:	400400        	ssr	a4
40083915:	914020        	srl	a4, a2
40083918:	401500        	ssl	a5
4008391b:	a1c200        	sll	a12, a2
4008391e:	f520a0        	extui	a2, a10, 16, 16
40083921:	204480        	or	a4, a4, a8
40083924:	e2b320        	remu	a11, a3, a2
40083927:	f480a0        	extui	a8, a10, 0, 16
4008392a:	c23320        	quou	a3, a3, a2
4008392d:	11bb00        	slli	a11, a11, 16
40083930:	f59040        	extui	a9, a4, 16, 16
40083933:	825830        	mull	a5, a8, a3
40083936:	209b90        	or	a9, a11, a9
40083939:	13b957        	bgeu	a9, a5, 40083950 <__udivdi3+0x100>
4008393c:	99aa      	add.n	a9, a9, a10
4008393e:	b30b      	addi.n	a11, a3, -1
40083940:	0a39a7        	bltu	a9, a10, 4008394e <__udivdi3+0xfe>
40083943:	07b957        	bgeu	a9, a5, 4008394e <__udivdi3+0xfe>
40083946:	fec332        	addi	a3, a3, -2
40083949:	99aa      	add.n	a9, a9, a10
4008394b:	000046        	j	40083950 <__udivdi3+0x100>
4008394e:	0b3d      	mov.n	a3, a11
40083950:	c09950        	sub	a9, a9, a5
40083953:	e2b920        	remu	a11, a9, a2
40083956:	c29920        	quou	a9, a9, a2
40083959:	822890        	mull	a2, a8, a9
4008395c:	11bb00        	slli	a11, a11, 16
4008395f:	f48040        	extui	a8, a4, 0, 16
40083962:	208b80        	or	a8, a11, a8
40083965:	13b827        	bgeu	a8, a2, 4008397c <__udivdi3+0x12c>
40083968:	88aa      	add.n	a8, a8, a10
4008396a:	490b      	addi.n	a4, a9, -1
4008396c:	0a38a7        	bltu	a8, a10, 4008397a <__udivdi3+0x12a>
4008396f:	07b827        	bgeu	a8, a2, 4008397a <__udivdi3+0x12a>
40083972:	fec992        	addi	a9, a9, -2
40083975:	88aa      	add.n	a8, a8, a10
40083977:	000046        	j	4008397c <__udivdi3+0x12c>
4008397a:	049d      	mov.n	a9, a4
4008397c:	113300        	slli	a3, a3, 16
4008397f:	c08820        	sub	a8, a8, a2
40083982:	203390        	or	a3, a3, a9
40083985:	f550a0        	extui	a5, a10, 16, 16
40083988:	e2b850        	remu	a11, a8, a5
4008398b:	f440a0        	extui	a4, a10, 0, 16
4008398e:	c28850        	quou	a8, a8, a5
40083991:	11bb00        	slli	a11, a11, 16
40083994:	f590c0        	extui	a9, a12, 16, 16
40083997:	822480        	mull	a2, a4, a8
4008399a:	209b90        	or	a9, a11, a9
4008399d:	13b927        	bgeu	a9, a2, 400839b4 <__udivdi3+0x164>
400839a0:	99aa      	add.n	a9, a9, a10
400839a2:	b80b      	addi.n	a11, a8, -1
400839a4:	0a39a7        	bltu	a9, a10, 400839b2 <__udivdi3+0x162>
400839a7:	07b927        	bgeu	a9, a2, 400839b2 <__udivdi3+0x162>
400839aa:	fec882        	addi	a8, a8, -2
400839ad:	99aa      	add.n	a9, a9, a10
400839af:	000046        	j	400839b4 <__udivdi3+0x164>
400839b2:	0b8d      	mov.n	a8, a11
400839b4:	c09920        	sub	a9, a9, a2
400839b7:	e22950        	remu	a2, a9, a5
400839ba:	c29950        	quou	a9, a9, a5
400839bd:	112200        	slli	a2, a2, 16
400839c0:	f4c0c0        	extui	a12, a12, 0, 16
400839c3:	824490        	mull	a4, a4, a9
400839c6:	20c2c0        	or	a12, a2, a12
400839c9:	0fbc47        	bgeu	a12, a4, 400839dc <__udivdi3+0x18c>
400839cc:	caca      	add.n	a12, a10, a12
400839ce:	ffc922        	addi	a2, a9, -1
400839d1:	053ca7        	bltu	a12, a10, 400839da <__udivdi3+0x18a>
400839d4:	fec992        	addi	a9, a9, -2
400839d7:	013c47        	bltu	a12, a4, 400839dc <__udivdi3+0x18c>
400839da:	029d      	mov.n	a9, a2
400839dc:	118800        	slli	a8, a8, 16
400839df:	208890        	or	a8, a8, a9
400839e2:	003506        	j	40083aba <__udivdi3+0x26a>
400839e5:	030c      	movi.n	a3, 0
400839e7:	038d      	mov.n	a8, a3
400839e9:	02bd57        	bgeu	a13, a5, 400839ef <__udivdi3+0x19f>
400839ec:	003286        	j	40083aba <__udivdi3+0x26a>
400839ef:	40f5b0        	nsau	a11, a5
400839f2:	179b37        	bne	a11, a3, 40083a0d <__udivdi3+0x1bd>
400839f5:	180c      	movi.n	a8, 1
400839f7:	0235d7        	bltu	a5, a13, 400839fd <__udivdi3+0x1ad>
400839fa:	208bb0        	or	a8, a11, a11
400839fd:	130c      	movi.n	a3, 1
400839ff:	01b247        	bgeu	a2, a4, 40083a04 <__udivdi3+0x1b4>
40083a02:	030c      	movi.n	a3, 0
40083a04:	208830        	or	a8, a8, a3
40083a07:	748080        	extui	a8, a8, 0, 8
40083a0a:	002a86        	j	40083ab8 <__udivdi3+0x268>
40083a0d:	092c      	movi.n	a9, 32
40083a0f:	c099b0        	sub	a9, a9, a11
40083a12:	400900        	ssr	a9
40083a15:	913040        	srl	a3, a4
40083a18:	401b00        	ssl	a11
40083a1b:	a15500        	sll	a5, a5
40083a1e:	205350        	or	a5, a3, a5
40083a21:	400900        	ssr	a9
40083a24:	9180d0        	srl	a8, a13
40083a27:	401b00        	ssl	a11
40083a2a:	a13d00        	sll	a3, a13
40083a2d:	400900        	ssr	a9
40083a30:	919020        	srl	a9, a2
40083a33:	f5d050        	extui	a13, a5, 16, 16
40083a36:	203930        	or	a3, a9, a3
40083a39:	f4c050        	extui	a12, a5, 0, 16
40083a3c:	e298d0        	remu	a9, a8, a13
40083a3f:	c288d0        	quou	a8, a8, a13
40083a42:	119900        	slli	a9, a9, 16
40083a45:	f5e030        	extui	a14, a3, 16, 16
40083a48:	82ac80        	mull	a10, a12, a8
40083a4b:	2099e0        	or	a9, a9, a14
40083a4e:	401b00        	ssl	a11
40083a51:	a14400        	sll	a4, a4
40083a54:	14b9a7        	bgeu	a9, a10, 40083a6c <__udivdi3+0x21c>
40083a57:	995a      	add.n	a9, a9, a5
40083a59:	e80b      	addi.n	a14, a8, -1
40083a5b:	0bb9a7        	bgeu	a9, a10, 40083a6a <__udivdi3+0x21a>
40083a5e:	083957        	bltu	a9, a5, 40083a6a <__udivdi3+0x21a>
40083a61:	fec882        	addi	a8, a8, -2
40083a64:	995a      	add.n	a9, a9, a5
40083a66:	000086        	j	40083a6c <__udivdi3+0x21c>
40083a69:	0e8d00        	lsi	f0, a13, 56
40083a6c:	c0a9a0        	sub	a10, a9, a10
40083a6f:	e29ad0        	remu	a9, a10, a13
40083a72:	c2aad0        	quou	a10, a10, a13
40083a75:	119900        	slli	a9, a9, 16
40083a78:	f43030        	extui	a3, a3, 0, 16
40083a7b:	82cca0        	mull	a12, a12, a10
40083a7e:	203930        	or	a3, a9, a3
40083a81:	13b3c7        	bgeu	a3, a12, 40083a98 <__udivdi3+0x248>
40083a84:	335a      	add.n	a3, a3, a5
40083a86:	9a0b      	addi.n	a9, a10, -1
40083a88:	0a3357        	bltu	a3, a5, 40083a96 <__udivdi3+0x246>
40083a8b:	07b3c7        	bgeu	a3, a12, 40083a96 <__udivdi3+0x246>
40083a8e:	fecaa2        	addi	a10, a10, -2
40083a91:	335a      	add.n	a3, a3, a5
40083a93:	000046        	j	40083a98 <__udivdi3+0x248>
40083a96:	09ad      	mov.n	a10, a9
40083a98:	118800        	slli	a8, a8, 16
40083a9b:	2088a0        	or	a8, a8, a10
40083a9e:	825840        	mull	a5, a8, a4
40083aa1:	a24840        	muluh	a4, a8, a4
40083aa4:	c033c0        	sub	a3, a3, a12
40083aa7:	0b3347        	bltu	a3, a4, 40083ab6 <__udivdi3+0x266>
40083aaa:	401b00        	ssl	a11
40083aad:	a12200        	sll	a2, a2
40083ab0:	04b257        	bgeu	a2, a5, 40083ab8 <__udivdi3+0x268>
40083ab3:	019347        	bne	a3, a4, 40083ab8 <__udivdi3+0x268>
40083ab6:	880b      	addi.n	a8, a8, -1
40083ab8:	030c      	movi.n	a3, 0
40083aba:	082d      	mov.n	a2, a8
40083abc:	f01d      	retw.n
	...

40083ac0 <__umoddi3>:
40083ac0:	004136        	entry	a1, 32
40083ac3:	04bd      	mov.n	a11, a4
40083ac5:	208220        	or	a8, a2, a2
40083ac8:	039d      	mov.n	a9, a3
40083aca:	152556        	bnez	a5, 40083c20 <__umoddi3+0x160>
40083acd:	71b347        	bgeu	a3, a4, 40083b42 <__umoddi3+0x82>
40083ad0:	40f4a0        	nsau	a10, a4
40083ad3:	01da16        	beqz	a10, 40083af4 <__umoddi3+0x34>
40083ad6:	401a00        	ssl	a10
40083ad9:	a19300        	sll	a9, a3
40083adc:	6030a0        	neg	a3, a10
40083adf:	400300        	ssr	a3
40083ae2:	913020        	srl	a3, a2
40083ae5:	401a00        	ssl	a10
40083ae8:	a1b400        	sll	a11, a4
40083aeb:	209390        	or	a9, a3, a9
40083aee:	401a00        	ssl	a10
40083af1:	a18200        	sll	a8, a2
40083af4:	f540b0        	extui	a4, a11, 16, 16
40083af7:	e23940        	remu	a3, a9, a4
40083afa:	f420b0        	extui	a2, a11, 0, 16
40083afd:	c29940        	quou	a9, a9, a4
40083b00:	113300        	slli	a3, a3, 16
40083b03:	f55080        	extui	a5, a8, 16, 16
40083b06:	829290        	mull	a9, a2, a9
40083b09:	203350        	or	a3, a3, a5
40083b0c:	09b397        	bgeu	a3, a9, 40083b19 <__umoddi3+0x59>
40083b0f:	33ba      	add.n	a3, a3, a11
40083b11:	0433b7        	bltu	a3, a11, 40083b19 <__umoddi3+0x59>
40083b14:	01b397        	bgeu	a3, a9, 40083b19 <__umoddi3+0x59>
40083b17:	33ba      	add.n	a3, a3, a11
40083b19:	c09390        	sub	a9, a3, a9
40083b1c:	e23940        	remu	a3, a9, a4
40083b1f:	c29940        	quou	a9, a9, a4
40083b22:	829290        	mull	a9, a2, a9
40083b25:	f48080        	extui	a8, a8, 0, 16
40083b28:	112300        	slli	a2, a3, 16
40083b2b:	208280        	or	a8, a2, a8
40083b2e:	0ab897        	bgeu	a8, a9, 40083b3c <__umoddi3+0x7c>
40083b31:	88ba      	add.n	a8, a8, a11
40083b33:	05b897        	bgeu	a8, a9, 40083b3c <__umoddi3+0x7c>
40083b36:	0238b7        	bltu	a8, a11, 40083b3c <__umoddi3+0x7c>
40083b39:	8088b0        	add	a8, a8, a11
40083b3c:	c08890        	sub	a8, a8, a9
40083b3f:	003406        	j	40083c13 <__umoddi3+0x153>
40083b42:	34cc      	bnez.n	a4, 40083b49 <__umoddi3+0x89>
40083b44:	140c      	movi.n	a4, 1
40083b46:	c2b4b0        	quou	a11, a4, a11
40083b49:	40fba0        	nsau	a10, a11
40083b4c:	5acc      	bnez.n	a10, 40083b55 <__umoddi3+0x95>
40083b4e:	c033b0        	sub	a3, a3, a11
40083b51:	001c86        	j	40083bc7 <__umoddi3+0x107>
40083b54:	042c00        	extui	a2, a0, 12, 1
40083b57:	c044a0        	sub	a4, a4, a10
40083b5a:	401a00        	ssl	a10
40083b5d:	a1bb00        	sll	a11, a11
40083b60:	400400        	ssr	a4
40083b63:	915030        	srl	a5, a3
40083b66:	f5c0b0        	extui	a12, a11, 16, 16
40083b69:	401a00        	ssl	a10
40083b6c:	a13300        	sll	a3, a3
40083b6f:	400400        	ssr	a4
40083b72:	914020        	srl	a4, a2
40083b75:	204430        	or	a4, a4, a3
40083b78:	401a00        	ssl	a10
40083b7b:	a18200        	sll	a8, a2
40083b7e:	f430b0        	extui	a3, a11, 0, 16
40083b81:	e225c0        	remu	a2, a5, a12
40083b84:	c255c0        	quou	a5, a5, a12
40083b87:	112200        	slli	a2, a2, 16
40083b8a:	f59040        	extui	a9, a4, 16, 16
40083b8d:	825350        	mull	a5, a3, a5
40083b90:	202290        	or	a2, a2, a9
40083b93:	09b257        	bgeu	a2, a5, 40083ba0 <__umoddi3+0xe0>
40083b96:	22ba      	add.n	a2, a2, a11
40083b98:	0432b7        	bltu	a2, a11, 40083ba0 <__umoddi3+0xe0>
40083b9b:	01b257        	bgeu	a2, a5, 40083ba0 <__umoddi3+0xe0>
40083b9e:	22ba      	add.n	a2, a2, a11
40083ba0:	c09250        	sub	a9, a2, a5
40083ba3:	e229c0        	remu	a2, a9, a12
40083ba6:	c299c0        	quou	a9, a9, a12
40083ba9:	829390        	mull	a9, a3, a9
40083bac:	112200        	slli	a2, a2, 16
40083baf:	f43040        	extui	a3, a4, 0, 16
40083bb2:	203230        	or	a3, a2, a3
40083bb5:	0bb397        	bgeu	a3, a9, 40083bc4 <__umoddi3+0x104>
40083bb8:	8033b0        	add	a3, a3, a11
40083bbb:	05b397        	bgeu	a3, a9, 40083bc4 <__umoddi3+0x104>
40083bbe:	0233b7        	bltu	a3, a11, 40083bc4 <__umoddi3+0x104>
40083bc1:	8033b0        	add	a3, a3, a11
40083bc4:	c03390        	sub	a3, a3, a9
40083bc7:	f540b0        	extui	a4, a11, 16, 16
40083bca:	e29340        	remu	a9, a3, a4
40083bcd:	f420b0        	extui	a2, a11, 0, 16
40083bd0:	c23340        	quou	a3, a3, a4
40083bd3:	119900        	slli	a9, a9, 16
40083bd6:	f55080        	extui	a5, a8, 16, 16
40083bd9:	823230        	mull	a3, a2, a3
40083bdc:	209950        	or	a9, a9, a5
40083bdf:	09b937        	bgeu	a9, a3, 40083bec <__umoddi3+0x12c>
40083be2:	99ba      	add.n	a9, a9, a11
40083be4:	0439b7        	bltu	a9, a11, 40083bec <__umoddi3+0x12c>
40083be7:	01b937        	bgeu	a9, a3, 40083bec <__umoddi3+0x12c>
40083bea:	99ba      	add.n	a9, a9, a11
40083bec:	c03930        	sub	a3, a9, a3
40083bef:	e25340        	remu	a5, a3, a4
40083bf2:	c23340        	quou	a3, a3, a4
40083bf5:	823230        	mull	a3, a2, a3
40083bf8:	f48080        	extui	a8, a8, 0, 16
40083bfb:	112500        	slli	a2, a5, 16
40083bfe:	208280        	or	a8, a2, a8
40083c01:	0bb837        	bgeu	a8, a3, 40083c10 <__umoddi3+0x150>
40083c04:	8088b0        	add	a8, a8, a11
40083c07:	05b837        	bgeu	a8, a3, 40083c10 <__umoddi3+0x150>
40083c0a:	0238b7        	bltu	a8, a11, 40083c10 <__umoddi3+0x150>
40083c0d:	8088b0        	add	a8, a8, a11
40083c10:	c08830        	sub	a8, a8, a3
40083c13:	400a00        	ssr	a10
40083c16:	912080        	srl	a2, a8
40083c19:	030c      	movi.n	a3, 0
40083c1b:	004446        	j	40083d30 <__umoddi3+0x270>
40083c1e:	570000        	lsi	f0, a0, 0x15c
40083c21:	4602b3        	lsi	f11, a2, 0x118
40083c24:	c00042        	l8ui	a4, a0, 192
40083c27:	dc40f5        	call12	40060034 <esp32_rom_gpio_matrix_out+0x56128>
40083c2a:	37dc      	bnez.n	a7, 40083c41 <__umoddi3+0x181>
40083c2c:	470235        	call12	400cac50 <_iram_text_end+0x46f1e>
40083c2f:	401132        	l16ui	a3, a1, 128
40083c32:	50c082        	addi	a8, a0, 80
40083c35:	92c033        	ssip	f3, a0, 0x248
40083c38:	8701a0        	lsi	f10, a1, 0x21c
40083c3b:	920232        	l8ui	a3, a2, 146
40083c3e:	9000a0        	addx2	a0, a0, a10
40083c41:	2dc093        	ssip	f9, a0, 180
40083c44:	3d08      	l32i.n	a0, a13, 12
40083c46:	4609      	s32i.n	a0, a6, 16
40083c48:	0039      	s32i.n	a3, a0, 0
40083c4a:	092c      	movi.n	a9, 32
40083c4c:	c099c0        	sub	a9, a9, a12
40083c4f:	400900        	ssr	a9
40083c52:	91a040        	srl	a10, a4
40083c55:	401c00        	ssl	a12
40083c58:	a15500        	sll	a5, a5
40083c5b:	205a50        	or	a5, a10, a5
40083c5e:	400900        	ssr	a9
40083c61:	91d020        	srl	a13, a2
40083c64:	400900        	ssr	a9
40083c67:	91a030        	srl	a10, a3
40083c6a:	f5e050        	extui	a14, a5, 16, 16
40083c6d:	401c00        	ssl	a12
40083c70:	a13300        	sll	a3, a3
40083c73:	20dd30        	or	a13, a13, a3
40083c76:	e2bae0        	remu	a11, a10, a14
40083c79:	f43050        	extui	a3, a5, 0, 16
40083c7c:	c2aae0        	quou	a10, a10, a14
40083c7f:	11bb00        	slli	a11, a11, 16
40083c82:	f5f0d0        	extui	a15, a13, 16, 16
40083c85:	8283a0        	mull	a8, a3, a10
40083c88:	20bbf0        	or	a11, a11, a15
40083c8b:	401c00        	ssl	a12
40083c8e:	a14400        	sll	a4, a4
40083c91:	401c00        	ssl	a12
40083c94:	a12200        	sll	a2, a2
40083c97:	15bb87        	bgeu	a11, a8, 40083cb0 <__umoddi3+0x1f0>
40083c9a:	bb5a      	add.n	a11, a11, a5
40083c9c:	fa0b      	addi.n	a15, a10, -1
40083c9e:	0c3b57        	bltu	a11, a5, 40083cae <__umoddi3+0x1ee>
40083ca1:	09bb87        	bgeu	a11, a8, 40083cae <__umoddi3+0x1ee>
40083ca4:	fecaa2        	addi	a10, a10, -2
40083ca7:	bb5a      	add.n	a11, a11, a5
40083ca9:	0000c6        	j	40083cb0 <__umoddi3+0x1f0>
40083cac:	ad0000        	lsi	f0, a0, 0x2b4
40083caf:	0f          	.byte 0xf
40083cb0:	c0bb80        	sub	a11, a11, a8
40083cb3:	e28be0        	remu	a8, a11, a14
40083cb6:	c2bbe0        	quou	a11, a11, a14
40083cb9:	82e3b0        	mull	a14, a3, a11
40083cbc:	118800        	slli	a8, a8, 16
40083cbf:	f430d0        	extui	a3, a13, 0, 16
40083cc2:	203830        	or	a3, a8, a3
40083cc5:	13b3e7        	bgeu	a3, a14, 40083cdc <__umoddi3+0x21c>
40083cc8:	335a      	add.n	a3, a3, a5
40083cca:	8b0b      	addi.n	a8, a11, -1
40083ccc:	0ab3e7        	bgeu	a3, a14, 40083cda <__umoddi3+0x21a>
40083ccf:	073357        	bltu	a3, a5, 40083cda <__umoddi3+0x21a>
40083cd2:	fecbb2        	addi	a11, a11, -2
40083cd5:	335a      	add.n	a3, a3, a5
40083cd7:	000046        	j	40083cdc <__umoddi3+0x21c>
40083cda:	08bd      	mov.n	a11, a8
40083cdc:	11aa00        	slli	a10, a10, 16
40083cdf:	20aab0        	or	a10, a10, a11
40083ce2:	82da40        	mull	a13, a10, a4
40083ce5:	a2aa40        	muluh	a10, a10, a4
40083ce8:	c033e0        	sub	a3, a3, a14
40083ceb:	0abd      	mov.n	a11, a10
40083ced:	0d8d      	mov.n	a8, a13
40083cef:	0533a7        	bltu	a3, a10, 40083cf8 <__umoddi3+0x238>
40083cf2:	1493a7        	bne	a3, a10, 40083d0a <__umoddi3+0x24a>
40083cf5:	11b2d7        	bgeu	a2, a13, 40083d0a <__umoddi3+0x24a>
40083cf8:	c04d40        	sub	a4, a13, a4
40083cfb:	c0aa50        	sub	a10, a10, a5
40083cfe:	1b0c      	movi.n	a11, 1
40083d00:	013d47        	bltu	a13, a4, 40083d05 <__umoddi3+0x245>
40083d03:	0b0c      	movi.n	a11, 0
40083d05:	c0bab0        	sub	a11, a10, a11
40083d08:	048d      	mov.n	a8, a4
40083d0a:	c04280        	sub	a4, a2, a8
40083d0d:	c033b0        	sub	a3, a3, a11
40083d10:	150c      	movi.n	a5, 1
40083d12:	023247        	bltu	a2, a4, 40083d18 <__umoddi3+0x258>
40083d15:	00a052        	movi	a5, 0
40083d18:	c03350        	sub	a3, a3, a5
40083d1b:	401900        	ssl	a9
40083d1e:	a18300        	sll	a8, a3
40083d21:	400c00        	ssr	a12
40083d24:	912040        	srl	a2, a4
40083d27:	202820        	or	a2, a8, a2
40083d2a:	400c00        	ssr	a12
40083d2d:	913030        	srl	a3, a3
40083d30:	f01d      	retw.n
