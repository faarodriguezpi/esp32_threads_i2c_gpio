
zephyr.elf:     file format elf32-xtensa-le


Disassembly of section .iram0.vectors:

40080000 <_WindowOverflow4>:

    .org    0x0
    .global _WindowOverflow4
_WindowOverflow4:

    s32e    a0, a5, -16     /* save a0 to call[j+1]'s stack frame */
40080000:	49c500        	s32e	a0, a5, -16
    s32e    a1, a5, -12     /* save a1 to call[j+1]'s stack frame */
40080003:	49d510        	s32e	a1, a5, -12
    s32e    a2, a5,  -8     /* save a2 to call[j+1]'s stack frame */
40080006:	49e520        	s32e	a2, a5, -8
    s32e    a3, a5,  -4     /* save a3 to call[j+1]'s stack frame */
40080009:	49f530        	s32e	a3, a5, -4
    rfwo                    /* rotates back to call[i] position */
4008000c:	003400        	rfwo
	...

40080040 <_WindowUnderflow4>:

    .org    0x40
    .global _WindowUnderflow4
_WindowUnderflow4:

    l32e    a0, a5, -16     /* restore a0 from call[i+1]'s stack frame */
40080040:	09c500        	l32e	a0, a5, -16
    l32e    a1, a5, -12     /* restore a1 from call[i+1]'s stack frame */
40080043:	09d510        	l32e	a1, a5, -12
    l32e    a2, a5,  -8     /* restore a2 from call[i+1]'s stack frame */
40080046:	09e520        	l32e	a2, a5, -8
    l32e    a3, a5,  -4     /* restore a3 from call[i+1]'s stack frame */
40080049:	09f530        	l32e	a3, a5, -4
    rfwu
4008004c:	003500        	rfwu
	...

40080050 <_xt_alloca_exc>:

    .align  4
    .global _xt_alloca_exc
_xt_alloca_exc:

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
40080050:	034800        	rsr.windowbase	a0
    rotw    -1      /* WINDOWBASE goes to a4, new a0-a3 are scratch */
40080053:	4080f0        	rotw	-1
    rsr     a2, PS
40080056:	03e620        	rsr.ps	a2
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
40080059:	343820        	extui	a3, a2, 8, 4
    xor     a3, a3, a4    /* bits changed from old to current windowbase */
4008005c:	303340        	xor	a3, a3, a4
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
4008005f:	03d140        	rsr.excsave1	a4
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
40080062:	113380        	slli	a3, a3, 8
    xor     a2, a2, a3      /* flip changed bits in old window base */
40080065:	302230        	xor	a2, a2, a3
    wsr     a2, PS          /* update PS.OWB to new window base */
40080068:	13e620        	wsr.ps	a2
    rsync
4008006b:	002010        	rsync

    _bbci.l a4, 31, _WindowUnderflow4
4008006e:	ce74f7        	bbci	a4, 31, 40080040 <_WindowUnderflow4>
    rotw    -1              /* original a0 goes to a8 */
40080071:	4080f0        	rotw	-1
    _bbci.l a8, 30, _WindowUnderflow8
40080074:	4878e7        	bbci	a8, 30, 400800c0 <_WindowUnderflow8>
    rotw    -1
40080077:	4080f0        	rotw	-1
    j               _WindowUnderflow12
4008007a:	003086        	j	40080140 <_WindowUnderflow12>
4008007d:	000000        	ill

40080080 <_WindowOverflow8>:

    .org    0x80
    .global _WindowOverflow8
_WindowOverflow8:

    s32e    a0, a9, -16     /* save a0 to call[j+1]'s stack frame */
40080080:	49c900        	s32e	a0, a9, -16
    l32e    a0, a1, -12     /* a0 <- call[j-1]'s sp
40080083:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1, a9, -12     /* save a1 to call[j+1]'s stack frame */
40080086:	49d910        	s32e	a1, a9, -12
    s32e    a2, a9,  -8     /* save a2 to call[j+1]'s stack frame */
40080089:	49e920        	s32e	a2, a9, -8
    s32e    a3, a9,  -4     /* save a3 to call[j+1]'s stack frame */
4008008c:	49f930        	s32e	a3, a9, -4
    s32e    a4, a0, -32     /* save a4 to call[j]'s stack frame */
4008008f:	498040        	s32e	a4, a0, -32
    s32e    a5, a0, -28     /* save a5 to call[j]'s stack frame */
40080092:	499050        	s32e	a5, a0, -28
    s32e    a6, a0, -24     /* save a6 to call[j]'s stack frame */
40080095:	49a060        	s32e	a6, a0, -24
    s32e    a7, a0, -20     /* save a7 to call[j]'s stack frame */
40080098:	49b070        	s32e	a7, a0, -20
    rfwo                    /* rotates back to call[i] position */
4008009b:	003400        	rfwo
	...

400800c0 <_WindowUnderflow8>:

    .org    0xC0
    .global _WindowUnderflow8
_WindowUnderflow8:

    l32e    a0, a9, -16     /* restore a0 from call[i+1]'s stack frame */
400800c0:	09c900        	l32e	a0, a9, -16
    l32e    a1, a9, -12     /* restore a1 from call[i+1]'s stack frame */
400800c3:	09d910        	l32e	a1, a9, -12
    l32e    a2, a9,  -8     /* restore a2 from call[i+1]'s stack frame */
400800c6:	09e920        	l32e	a2, a9, -8
    l32e    a7, a1, -12     /* a7 <- call[i-1]'s sp
400800c9:	09d170        	l32e	a7, a1, -12
                               (used to find end of call[i]'s frame) */
    l32e    a3, a9,  -4     /* restore a3 from call[i+1]'s stack frame */
400800cc:	09f930        	l32e	a3, a9, -4
    l32e    a4, a7, -32     /* restore a4 from call[i]'s stack frame */
400800cf:	098740        	l32e	a4, a7, -32
    l32e    a5, a7, -28     /* restore a5 from call[i]'s stack frame */
400800d2:	099750        	l32e	a5, a7, -28
    l32e    a6, a7, -24     /* restore a6 from call[i]'s stack frame */
400800d5:	09a760        	l32e	a6, a7, -24
    l32e    a7, a7, -20     /* restore a7 from call[i]'s stack frame */
400800d8:	09b770        	l32e	a7, a7, -20
    rfwu
400800db:	003500        	rfwu
	...

40080100 <_WindowOverflow12>:

    .org    0x100
    .global _WindowOverflow12
_WindowOverflow12:

    s32e    a0,  a13, -16   /* save a0 to call[j+1]'s stack frame */
40080100:	49cd00        	s32e	a0, a13, -16
    l32e    a0,  a1,  -12   /* a0 <- call[j-1]'s sp
40080103:	09d100        	l32e	a0, a1, -12
                               (used to find end of call[j]'s frame) */
    s32e    a1,  a13, -12   /* save a1 to call[j+1]'s stack frame */
40080106:	49dd10        	s32e	a1, a13, -12
    s32e    a2,  a13,  -8   /* save a2 to call[j+1]'s stack frame */
40080109:	49ed20        	s32e	a2, a13, -8
    s32e    a3,  a13,  -4   /* save a3 to call[j+1]'s stack frame */
4008010c:	49fd30        	s32e	a3, a13, -4
    s32e    a4,  a0,  -48   /* save a4 to end of call[j]'s stack frame */
4008010f:	494040        	s32e	a4, a0, -48
    s32e    a5,  a0,  -44   /* save a5 to end of call[j]'s stack frame */
40080112:	495050        	s32e	a5, a0, -44
    s32e    a6,  a0,  -40   /* save a6 to end of call[j]'s stack frame */
40080115:	496060        	s32e	a6, a0, -40
    s32e    a7,  a0,  -36   /* save a7 to end of call[j]'s stack frame */
40080118:	497070        	s32e	a7, a0, -36
    s32e    a8,  a0,  -32   /* save a8 to end of call[j]'s stack frame */
4008011b:	498080        	s32e	a8, a0, -32
    s32e    a9,  a0,  -28   /* save a9 to end of call[j]'s stack frame */
4008011e:	499090        	s32e	a9, a0, -28
    s32e    a10, a0,  -24   /* save a10 to end of call[j]'s stack frame */
40080121:	49a0a0        	s32e	a10, a0, -24
    s32e    a11, a0,  -20   /* save a11 to end of call[j]'s stack frame */
40080124:	49b0b0        	s32e	a11, a0, -20
    rfwo                    /* rotates back to call[i] position */
40080127:	003400        	rfwo
	...

40080140 <_WindowUnderflow12>:

    .org 0x140
    .global _WindowUnderflow12
_WindowUnderflow12:

    l32e    a0,  a13, -16 /* restore a0 from call[i+1]'s stack frame */
40080140:	09cd00        	l32e	a0, a13, -16
    l32e    a1,  a13, -12 /* restore a1 from call[i+1]'s stack frame */
40080143:	09dd10        	l32e	a1, a13, -12
    l32e    a2,  a13,  -8 /* restore a2 from call[i+1]'s stack frame */
40080146:	09ed20        	l32e	a2, a13, -8
    l32e    a11, a1,  -12 /* a11 <- call[i-1]'s sp
40080149:	09d1b0        	l32e	a11, a1, -12
                           * (used to find end of call[i]'s frame) */
    l32e    a3,  a13,  -4 /* restore a3 from call[i+1]'s stack frame */
4008014c:	09fd30        	l32e	a3, a13, -4
    l32e    a4,  a11, -48 /* restore a4 from end of call[i]'s stack frame */
4008014f:	094b40        	l32e	a4, a11, -48
    l32e    a5,  a11, -44 /* restore a5 from end of call[i]'s stack frame */
40080152:	095b50        	l32e	a5, a11, -44
    l32e    a6,  a11, -40 /* restore a6 from end of call[i]'s stack frame */
40080155:	096b60        	l32e	a6, a11, -40
    l32e    a7,  a11, -36 /* restore a7 from end of call[i]'s stack frame */
40080158:	097b70        	l32e	a7, a11, -36
    l32e    a8,  a11, -32 /* restore a8 from end of call[i]'s stack frame */
4008015b:	098b80        	l32e	a8, a11, -32
    l32e    a9,  a11, -28 /* restore a9 from end of call[i]'s stack frame */
4008015e:	099b90        	l32e	a9, a11, -28
    l32e    a10, a11, -24 /* restore a10 from end of call[i]'s stack
40080161:	09aba0        	l32e	a10, a11, -24
    		       * frame */
    l32e    a11, a11, -20   /* restore a11 from end of call[i]'s stack
40080164:	09bbb0        	l32e	a11, a11, -20
    			 * frame */
    rfwu
40080167:	003500        	rfwu
	...

40080180 <_Level2Vector>:
 */

DEF_EXCINT 1, _handle_excint, xtensa_excint1_c

#if XCHAL_NMILEVEL >= 2
DEF_EXCINT 2, _handle_excint, xtensa_int2_c
40080180:	c4c112        	addi	a1, a1, -60
40080183:	7109      	s32i.n	a0, a1, 28
40080185:	9129      	s32i.n	a2, a1, 36
40080187:	a139      	s32i.n	a3, a1, 40
40080189:	03c200        	rsr.eps2	a0
4008018c:	5109      	s32i.n	a0, a1, 20
4008018e:	03b200        	rsr.epc2	a0
40080191:	6109      	s32i.n	a0, a1, 24
40080193:	000246        	j	400801a0 <_after_imms2>
	...

40080198 <_handle_excint_imm2>:
40080198:	1888      	l32i.n	a8, a8, 4
4008019a:	4008      	l32i.n	a0, a0, 16

4008019c <_c_handler_imm2>:
4008019c:	0819c4        	lsi	f12, a9, 32
4008019f:	40          	.byte 0x40

400801a0 <_after_imms2>:
400801a0:	ffff21        	l32r	a2, 4008019c <_c_handler_imm2>
400801a3:	fffd01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801a6:	0000a0        	jx	a0
	...

400801c0 <_Level3Vector>:
#endif

#if XCHAL_NMILEVEL >= 3
DEF_EXCINT 3, _handle_excint, xtensa_int3_c
400801c0:	c4c112        	addi	a1, a1, -60
400801c3:	7109      	s32i.n	a0, a1, 28
400801c5:	9129      	s32i.n	a2, a1, 36
400801c7:	a139      	s32i.n	a3, a1, 40
400801c9:	03c300        	rsr.eps3	a0
400801cc:	5109      	s32i.n	a0, a1, 20
400801ce:	03b300        	rsr.epc3	a0
400801d1:	6109      	s32i.n	a0, a1, 24
400801d3:	000146        	j	400801dc <_after_imms3>
	...

400801d8 <_c_handler_imm3>:
400801d8:	1a18      	l32i.n	a1, a10, 4
400801da:	4008      	l32i.n	a0, a0, 16

400801dc <_after_imms3>:
400801dc:	ffff21        	l32r	a2, 400801d8 <_c_handler_imm3>
400801df:	ffee01        	l32r	a0, 40080198 <_handle_excint_imm2>
400801e2:	0000a0        	jx	a0
	...

40080200 <_Level4Vector>:
#endif

#if XCHAL_NMILEVEL >= 4
DEF_EXCINT 4, _handle_excint, xtensa_int4_c
40080200:	c4c112        	addi	a1, a1, -60
40080203:	7109      	s32i.n	a0, a1, 28
40080205:	9129      	s32i.n	a2, a1, 36
40080207:	a139      	s32i.n	a3, a1, 40
40080209:	03c400        	rsr.eps4	a0
4008020c:	5109      	s32i.n	a0, a1, 20
4008020e:	03b400        	rsr.epc4	a0
40080211:	6109      	s32i.n	a0, a1, 24
40080213:	000146        	j	4008021c <_after_imms4>
	...

40080218 <_c_handler_imm4>:
40080218:	081a94        	lsi	f9, a10, 32
4008021b:	40          	.byte 0x40

4008021c <_after_imms4>:
4008021c:	ffff21        	l32r	a2, 40080218 <_c_handler_imm4>
4008021f:	ffde01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080222:	0000a0        	jx	a0
	...

40080240 <_Level5Vector>:
#endif

#if XCHAL_NMILEVEL >= 5
DEF_EXCINT 5, _handle_excint, xtensa_int5_c
40080240:	c4c112        	addi	a1, a1, -60
40080243:	7109      	s32i.n	a0, a1, 28
40080245:	9129      	s32i.n	a2, a1, 36
40080247:	a139      	s32i.n	a3, a1, 40
40080249:	03c500        	rsr.eps5	a0
4008024c:	5109      	s32i.n	a0, a1, 20
4008024e:	03b500        	rsr.epc5	a0
40080251:	6109      	s32i.n	a0, a1, 24
40080253:	000146        	j	4008025c <_after_imms5>
	...

40080258 <_c_handler_imm5>:
40080258:	1af8      	l32i.n	a15, a10, 4
4008025a:	4008      	l32i.n	a0, a0, 16

4008025c <_after_imms5>:
4008025c:	ffff21        	l32r	a2, 40080258 <_c_handler_imm5>
4008025f:	ffce01        	l32r	a0, 40080198 <_handle_excint_imm2>
40080262:	0000a0        	jx	a0
	...

40080280 <_Level6Vector>:
#endif

#if XCHAL_NMILEVEL >= 6
DEF_EXCINT 6, _handle_excint, xtensa_int6_c
40080280:	c4c112        	addi	a1, a1, -60
40080283:	7109      	s32i.n	a0, a1, 28
40080285:	9129      	s32i.n	a2, a1, 36
40080287:	a139      	s32i.n	a3, a1, 40
40080289:	03c600        	rsr.eps6	a0
4008028c:	5109      	s32i.n	a0, a1, 20
4008028e:	03b600        	rsr.epc6	a0
40080291:	6109      	s32i.n	a0, a1, 24
40080293:	000146        	j	4008029c <_after_imms6>
	...

40080298 <_c_handler_imm6>:
40080298:	081b50        	lsx	f1, a11, a5
4008029b:	40          	.byte 0x40

4008029c <_after_imms6>:
4008029c:	ffff21        	l32r	a2, 40080298 <_c_handler_imm6>
4008029f:	ffbe01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802a2:	0000a0        	jx	a0
	...

400802c0 <_Level7Vector>:
#endif

#if XCHAL_NMILEVEL >= 7
DEF_EXCINT 7, _handle_excint, xtensa_int7_c
400802c0:	c4c112        	addi	a1, a1, -60
400802c3:	7109      	s32i.n	a0, a1, 28
400802c5:	9129      	s32i.n	a2, a1, 36
400802c7:	a139      	s32i.n	a3, a1, 40
400802c9:	03c700        	rsr.eps7	a0
400802cc:	5109      	s32i.n	a0, a1, 20
400802ce:	03b700        	rsr.epc7	a0
400802d1:	6109      	s32i.n	a0, a1, 24
400802d3:	000146        	j	400802dc <_after_imms7>
	...

400802d8 <_c_handler_imm7>:
400802d8:	1b68      	l32i.n	a6, a11, 4
400802da:	4008      	l32i.n	a0, a0, 16

400802dc <_after_imms7>:
400802dc:	ffff21        	l32r	a2, 400802d8 <_c_handler_imm7>
400802df:	ffae01        	l32r	a0, 40080198 <_handle_excint_imm2>
400802e2:	0000a0        	jx	a0
	...

40080300 <_KernelExceptionVector>:
 * out of simple caution in case app code clears the UM bit by mistake.
 */
.pushsection .KernelExceptionVector.text, "ax"
.global _KernelExceptionVector
_KernelExceptionVector:
	j _Level1Vector
40080300:	016906        	j	400808a8 <_Level1Vector>
	...

40080340 <_Level1RealVector>:
	wsr.excsave1 a0
40080340:	13d100        	wsr.excsave1	a0
	rsr.exccause a0
40080343:	03e800        	rsr.exccause	a0
	bnei a0, EXCCAUSE_ALLOCA, _not_alloca
40080346:	025066        	bnei	a0, 5, 4008034c <_not_alloca>
	j _xt_alloca_exc
40080349:	ff40c6        	j	40080050 <_xt_alloca_exc>

4008034c <_not_alloca>:
	rsr.excsave1 a0
4008034c:	03d100        	rsr.excsave1	a0
	j _Level1Vector
4008034f:	015546        	j	400808a8 <_Level1Vector>
	...

400803c0 <_DoubleExceptionVector>:
.pushsection .DoubleExceptionVector.text, "ax"
.global _DoubleExceptionVector
_DoubleExceptionVector:
#if XCHAL_HAVE_DEBUG
/* Signals an unhandled double exception */
1:	break	1, 4
400803c0:	004140        	break	1, 4
#else
1:
#endif
	j	1b
400803c3:	fffe46        	j	400803c0 <_DoubleExceptionVector>
	...

Disassembly of section text:

40080550 <__start-0x2f4>:
40080550:	080000        	lsx	f0, a0, a0
40080553:	0c8040        	lsi	f4, a0, 48
40080556:	3ffb      	addi.n	a3, a15, 15
40080558:	06a8      	l32i.n	a10, a6, 0
4008055a:	3ffb      	addi.n	a3, a15, 15
4008055c:	808c      	beqz.n	a0, 40080568 <_iram_text_start+0x18>
4008055e:	483ff4        	mula.da.ll.ldinc	m3, a15, m0, a15
40080561:	3ff5f0        	f64cmph	a15, a5, a15, 3
40080564:	ff          	.byte 0xff
40080565:	bf          	.byte 0xbf
40080566:	ff          	.byte 0xff
40080567:	ff          	.byte 0xff
40080568:	040023        	lsi	f2, a0, 16
4008056b:	003000        	rfe
4008056e:	d83ff0        	lsi	f15, a15, 0x360
40080571:	fb0a      	add.n	a15, a11, a0
40080573:	3f          	.byte 0x3f
40080574:	000032        	l8ui	a3, a0, 0
40080577:	000000        	ill
4008057a:	b80000        	lsi	f0, a0, 0x2e0
4008057d:	3ffb02        	s32ri	a0, a11, 252
40080580:	02bb      	addi.n	a0, a2, 11
40080582:	3ffb      	addi.n	a3, a15, 15
40080584:	bf          	.byte 0xbf
40080585:	3ffb02        	s32ri	a0, a11, 252
40080588:	fb02e7        	bnone	a2, a14, 40080587 <_iram_text_start+0x37>
4008058b:	3f          	.byte 0x3f
4008058c:	001a00        	movsp	a0, a10
4008058f:	ffff00        	f64cmph	a15, a15, a0, 15
40080592:	ff          	.byte 0xff
40080593:	ff          	.byte 0xff
40080594:	0098      	l32i.n	a9, a0, 0
40080596:	3ffb      	addi.n	a3, a15, 15
40080598:	ee          	.byte 0xee
40080599:	3ffb02        	s32ri	a0, a11, 252
4008059c:	fb02f7        	bnone	a2, a15, 4008059b <_iram_text_start+0x4b>
4008059f:	3f          	.byte 0x3f
400805a0:	fb0300        	f64addc	a0, a3, 0, 0
400805a3:	3f          	.byte 0x3f
400805a4:	fb0306        	j	4007f1b4 <esp32_rom_gpio_matrix_out+0x752a8>
400805a7:	3f          	.byte 0x3f
400805a8:	030c      	movi.n	a3, 0
400805aa:	3ffb      	addi.n	a3, a15, 15
400805ac:	032b      	addi.n	a0, a3, 2
400805ae:	3ffb      	addi.n	a3, a15, 15
400805b0:	fb0361        	l32r	a6, 4007f1bc <esp32_rom_gpio_matrix_out+0x752b0>
400805b3:	3f          	.byte 0x3f
400805b4:	fb0397        	bnone	a3, a9, 400805b3 <_iram_text_start+0x63>
400805b7:	3f          	.byte 0x3f
400805b8:	03ad      	mov.n	a10, a3
400805ba:	3ffb      	addi.n	a3, a15, 15
400805bc:	fb03d6        	bgez	a3, 40080570 <_iram_text_start+0x20>
400805bf:	3f          	.byte 0x3f
400805c0:	fb0403        	lsi	f0, a4, 0x3ec
400805c3:	3f          	.byte 0x3f
400805c4:	042d      	mov.n	a2, a4
400805c6:	3ffb      	addi.n	a3, a15, 15
400805c8:	fb0454        	lsi	f5, a4, 0x3ec
400805cb:	3f          	.byte 0x3f
400805cc:	fb0497        	bnone	a4, a9, 400805cb <_iram_text_start+0x7b>
400805cf:	3f          	.byte 0x3f
400805d0:	ce          	.byte 0xce
400805d1:	3ffb04        	lsi	f0, a11, 252
400805d4:	04eb      	addi.n	a0, a4, 14
400805d6:	3ffb      	addi.n	a3, a15, 15
400805d8:	04fb      	addi.n	a0, a4, 15
400805da:	3ffb      	addi.n	a3, a15, 15
400805dc:	fb0507        	bnone	a5, a0, 400805db <_iram_text_start+0x8b>
400805df:	3f          	.byte 0x3f
400805e0:	000000        	ill
400805e3:	3e          	.byte 0x3e
400805e4:	fb0520        	f64addc	a2, a5, 0, 0
400805e7:	3f          	.byte 0x3f
400805e8:	1388      	l32i.n	a8, a3, 4
400805ea:	e80000        	lsi	f0, a0, 0x3a0
400805ed:	0808      	l32i.n	a0, a8, 0
400805ef:	0c8040        	lsi	f4, a0, 48
400805f2:	3ffb      	addi.n	a3, a15, 15
400805f4:	06a8      	l32i.n	a10, a6, 0
400805f6:	3ffb      	addi.n	a3, a15, 15
400805f8:	0988      	l32i.n	a8, a9, 0
400805fa:	4008      	l32i.n	a0, a0, 16
400805fc:	fb1280        	f64addc	a8, a2, 0, 1
400805ff:	3f          	.byte 0x3f
40080600:	0768      	l32i.n	a6, a7, 0
40080602:	3ffb      	addi.n	a3, a15, 15
40080604:	053c      	movi.n	a5, 48
40080606:	3ffb      	addi.n	a3, a15, 15
40080608:	fb00c0        	f64addc	a12, a0, 0, 0
4008060b:	3f          	.byte 0x3f
4008060c:	080c84        	lsi	f8, a12, 32
4008060f:	7fff40        	f64cmph	a15, a15, a4, 7
40080612:	ff0000        	f64cmph	a0, a0, a0, 15
40080615:	ff          	.byte 0xff
40080616:	000003        	lsi	f0, a0, 0
40080619:	400092        	l8ui	a9, a0, 64
4008061c:	054d      	mov.n	a4, a5
4008061e:	3ffb      	addi.n	a3, a15, 15
40080620:	fb0a70        	f64addc	a7, a10, 0, 0
40080623:	3f          	.byte 0x3f
40080624:	1258      	l32i.n	a5, a2, 4
40080626:	4008      	l32i.n	a0, a0, 16
40080628:	0178      	l32i.n	a7, a1, 0
4008062a:	3ffb      	addi.n	a3, a15, 15
4008062c:	f48070        	extui	a8, a7, 0, 16
4008062f:	3f          	.byte 0x3f
40080630:	fb0170        	f64addc	a7, a1, 0, 0
40080633:	3f          	.byte 0x3f
40080634:	c4b400        	extui	a11, a0, 4, 13
40080637:	600004        	lsi	f0, a0, 0x180
4008063a:	043ff6        	bgeui	a15, 3, 40080642 <_iram_text_start+0xf2>
4008063d:	3ff660        	f64cmph	a15, a6, a6, 3
40080640:	ff          	.byte 0xff
40080641:	ff          	.byte 0xff
40080642:	ff          	.byte 0xff
40080643:	8000e7        	bnone	a0, a14, 400805c7 <_iram_text_start+0x77>
40080646:	bf3ff4        	lsi	f15, a15, 0x2fc
40080649:	fbfa      	add.n	a15, a11, a15
4008064b:	ff          	.byte 0xff
4008064c:	807c      	movi.n	a0, -8
4008064e:	ff3ff4        	lsi	f15, a15, 0x3fc
40080651:	ffffc7        	bbsi	a15, 28, 40080654 <_iram_text_start+0x104>
40080654:	002000        	isync
40080657:	055800        	extui	a5, a0, 24, 1
4008065a:	3ffb      	addi.n	a3, a15, 15
4008065c:	003c      	movi.n	a0, 48
4008065e:	003ff0        	lsi	f15, a15, 0
40080661:	080000        	lsx	f0, a0, a0
40080664:	6008      	l32i.n	a0, a0, 24
40080666:	783ff6        	bgeui	a15, 3, 400806e2 <_iram_text_start+0x192>
40080669:	400092        	l8ui	a9, a0, 64
4008066c:	0041a4        	lsi	f10, a1, 0
4008066f:	058340        	extui	a8, a4, 19, 1
40080672:	3ffb      	addi.n	a3, a15, 15
40080674:	f49000        	extui	a9, a0, 0, 16
40080677:	3f          	.byte 0x3f
40080678:	000800        	lsi	f0, a8, 0
4008067b:	700000        	lsi	f0, a0, 0x1c0
4008067e:	760000        	lsi	f0, a0, 0x1d8
40080681:	3ffb05        	call0	400c0634 <_iram_text_end+0x3c702>
40080684:	f44000        	extui	a4, a0, 0, 16
40080687:	3f          	.byte 0x3f
40080688:	fb0a74        	lsi	f7, a10, 0x3ec
4008068b:	3f          	.byte 0x3f
4008068c:	7619f1        	l32r	a15, 4005def0 <esp32_rom_gpio_matrix_out+0x53fe4>
4008068f:	5dc005        	call0	400de290 <_iram_text_end+0x5a35e>
40080692:	000000        	ill
40080695:	000080        	ret
40080698:	bb0b      	addi.n	a11, a11, -1
4008069a:	bf0002        	l8ui	a0, a0, 191
4008069d:	005d      	mov.n	a5, a0
4008069f:	188300        	lsxp	f8, a3, a0
400806a2:	4008      	l32i.n	a0, a0, 16
400806a4:	0ff8      	l32i.n	a15, a15, 0
400806a6:	4008      	l32i.n	a0, a0, 16
400806a8:	050020        	extui	a0, a2, 16, 1
400806ab:	000000        	ill
400806ae:	0008      	l32i.n	a0, a0, 0
400806b0:	100000        	and	a0, a0, a0
400806b3:	000000        	ill
400806b6:	500020        	lsi	f2, a0, 0x140
400806b9:	400804        	lsi	f0, a8, 0x100
400806bc:	400000        	ssr	a0
400806bf:	000000        	ill
400806c2:	000080        	ret
400806c5:	200000        	or	a0, a0, a0
400806c8:	408800        	lsi	f0, a8, 0x100
400806cb:	000000        	ill
400806ce:	000100        	lsi	f0, a1, 0
400806d1:	020000        	andb	b0, b0, b0
400806d4:	000000        	ill
400806d7:	000010        	lsi	f1, a0, 0
400806da:	004000        	break	0, 0
400806dd:	030000        	rsr.lbeg	a0
400806e0:	010000        	slli	a0, a0, 32
400806e3:	000000        	ill
400806e6:	000400        	lsi	f0, a4, 0
400806e9:	800000        	add	a0, a0, a0
400806ec:	004000        	break	0, 0
400806ef:	100000        	and	a0, a0, a0
400806f2:	000000        	ill
400806f5:	000200        	lsi	f0, a2, 0
400806f8:	040000        	extui	a0, a0, 0, 1
400806fb:	300000        	xor	a0, a0, a0
400806fe:	d40000        	extui	a0, a0, 0, 14
40080701:	3ffb00        	f64cmph	a15, a11, a0, 3
40080704:	060000        	lsi	f0, a0, 24
40080707:	102200        	and	a2, a2, a0
4008070a:	0ffd      	mov.n	a15, a15
4008070c:	7f          	.byte 0x7f
4008070d:	fc1c      	movi.n	a12, 31
4008070f:	ff          	.byte 0xff
40080710:	fb0050        	f64addc	a5, a0, 0, 0
40080713:	3f          	.byte 0x3f
40080714:	fb0040        	f64addc	a4, a0, 0, 0
40080717:	3f          	.byte 0x3f
40080718:	057c      	movi.n	a5, -16
4008071a:	3ffb      	addi.n	a3, a15, 15
4008071c:	0c7c      	movi.n	a12, -16
4008071e:	3ffb      	addi.n	a3, a15, 15
40080720:	681c      	movi.n	a8, 22
40080722:	2c4000        	lsi	f0, a0, 176
40080725:	3ff530        	f64cmph	a15, a5, a3, 3
40080728:	f53024        	lsi	f2, a0, 0x3d4
4008072b:	3f          	.byte 0x3f
4008072c:	3018      	l32i.n	a1, a0, 12
4008072e:	ff3ff5        	call12	4007fb2c <esp32_rom_gpio_matrix_out+0x75c20>
40080731:	cf          	.byte 0xcf
40080732:	ff          	.byte 0xff
40080733:	ff          	.byte 0xff
40080734:	301c      	movi.n	a0, 19
40080736:	b56001        	l32r	a0, 4006dcb8 <esp32_rom_gpio_matrix_out+0x63dac>
40080739:	3ffb05        	call0	400c06ec <_iram_text_end+0x3c7ba>
4008073c:	fb02e7        	bnone	a2, a14, 4008073b <_iram_text_start+0x1eb>
4008073f:	3f          	.byte 0x3f
40080740:	000a16        	beqz	a10, 40080744 <_iram_text_start+0x1f4>
40080743:	9f0c00        	f64cmph	a0, a12, a0, 9
40080746:	dc4000        	lsi	f0, a0, 0x370
40080749:	9e          	.byte 0x9e
4008074a:	104000        	and	a4, a0, a0
4008074d:	3ff530        	f64cmph	a15, a5, a3, 3
40080750:	f53004        	lsi	f0, a0, 0x3d4
40080753:	3f          	.byte 0x3f
40080754:	ff          	.byte 0xff
40080755:	fffff7        	bbsi	a15, 31, 40080758 <_iram_text_start+0x208>
40080758:	fb01b4        	lsi	f11, a1, 0x3ec
4008075b:	3f          	.byte 0x3f
4008075c:	f53000        	extui	a3, a0, 16, 16
4008075f:	3f          	.byte 0x3f
40080760:	3038      	l32i.n	a3, a0, 12
40080762:	403ff5        	call12	400c0b60 <_iram_text_end+0x3cc2e>
40080765:	3ff530        	f64cmph	a15, a5, a3, 3
40080768:	f53044        	lsi	f4, a0, 0x3d4
4008076b:	3f          	.byte 0x3f
4008076c:	3048      	l32i.n	a4, a0, 12
4008076e:	4c3ff5        	call12	400ccb6c <_iram_text_end+0x48c3a>
40080771:	3ff530        	f64cmph	a15, a5, a3, 3
40080774:	f53030        	extui	a3, a3, 16, 16
40080777:	3f          	.byte 0x3f
40080778:	f53034        	lsi	f3, a0, 0x3d4
4008077b:	3f          	.byte 0x3f
4008077c:	300c      	movi.n	a0, 3
4008077e:	403ff5        	call12	400c0b7c <_iram_text_end+0x3cc4a>
40080781:	030d      	mov.n	a0, a3
40080783:	302800        	xor	a2, a8, a0
40080786:	e83ff5        	call12	40068b84 <esp32_rom_gpio_matrix_out+0x5ec78>
40080789:	000003        	lsi	f0, a0, 0
4008078c:	f53020        	extui	a3, a2, 16, 16
4008078f:	3f          	.byte 0x3f
40080790:	0f4240        	f64cmph	a4, a2, a4, 0
40080793:	86a000        	lsi	f0, a0, 0x218
40080796:	800001        	l32r	a0, 40060798 <esp32_rom_gpio_matrix_out+0x5688c>
40080799:	061a      	add.n	a0, a6, a1
4008079b:	e14000        	lsi	f0, a0, 0x384
4008079e:	400033        	lsi	f3, a0, 0x100
400807a1:	4c4b      	addi.n	a4, a12, 4
400807a3:	300800        	xor	a0, a8, a0
400807a6:	583ff5        	call12	400d8ba4 <_iram_text_end+0x54c72>
400807a9:	3ff530        	f64cmph	a15, a5, a3, 3
400807ac:	001800        	movsp	a0, a8
400807af:	140100        	extui	a0, a0, 1, 2
400807b2:	010000        	slli	a0, a0, 32
400807b5:	080000        	lsx	f0, a0, a0
400807b8:	800101        	l32r	a0, 400607bc <esp32_rom_gpio_matrix_out+0x568b0>
400807bb:	02a400        	andb	b10, b4, b0
400807be:	3ffb      	addi.n	a3, a15, 15
400807c0:	fb0000        	f64addc	a0, a0, 0, 0
400807c3:	3f          	.byte 0x3f
400807c4:	fb0080        	f64addc	a8, a0, 0, 0
400807c7:	3f          	.byte 0x3f
400807c8:	0c7d      	mov.n	a7, a12
400807ca:	3ffb      	addi.n	a3, a15, 15
400807cc:	04cd      	mov.n	a12, a4
400807ce:	3ffb      	addi.n	a3, a15, 15
400807d0:	05bc      	beqz.n	a5, 40080804 <_iram_text_start+0x2b4>
400807d2:	3ffb      	addi.n	a3, a15, 15
400807d4:	05d8      	l32i.n	a13, a5, 0
400807d6:	3ffb      	addi.n	a3, a15, 15
400807d8:	09a8      	l32i.n	a10, a9, 0
400807da:	3ffb      	addi.n	a3, a15, 15
400807dc:	082800        	lsx	f2, a8, a0
400807df:	208040        	or	a8, a0, a4
400807e2:	3ffb      	addi.n	a3, a15, 15
400807e4:	ff          	.byte 0xff
400807e5:	3ffb05        	call0	400c0798 <_iram_text_end+0x3c866>
400807e8:	0836d4        	lsi	f13, a6, 32
400807eb:	188040        	lsxp	f8, a0, a4
400807ee:	3ffb      	addi.n	a3, a15, 15
400807f0:	0828      	l32i.n	a2, a8, 0
400807f2:	3ffb      	addi.n	a3, a15, 15
400807f4:	fb3080        	f64addc	a8, a0, 1, 1
400807f7:	3f          	.byte 0x3f
400807f8:	fb1c80        	f64addc	a8, a12, 0, 1
400807fb:	3f          	.byte 0x3f
400807fc:	08e8      	l32i.n	a14, a8, 0
400807fe:	3ffb      	addi.n	a3, a15, 15
40080800:	fb3880        	f64addc	a8, a8, 1, 1
40080803:	3f          	.byte 0x3f
40080804:	0b08      	l32i.n	a0, a11, 0
40080806:	3ffb      	addi.n	a3, a15, 15
40080808:	7e          	.byte 0x7e
40080809:	fb0c      	movi.n	a11, 15
4008080b:	3f          	.byte 0x3f
4008080c:	fb0ad4        	lsi	f13, a10, 0x3ec
4008080f:	3f          	.byte 0x3f
40080810:	fb0ad0        	f64addc	a13, a10, 0, 0
40080813:	3f          	.byte 0x3f
40080814:	fb0b14        	lsi	f1, a11, 0x3ec
40080817:	3f          	.byte 0x3f
40080818:	7e          	.byte 0x7e
40080819:	fb0c      	movi.n	a11, 15
4008081b:	3f          	.byte 0x3f
4008081c:	2cac      	beqz.n	a12, 40080842 <_iram_text_start+0x2f2>
4008081e:	4008      	l32i.n	a0, a0, 16
40080820:	000a      	add.n	a0, a0, a0
40080822:	7e0000        	f64rnd	a0, a0, a0, 3
40080825:	fb0c      	movi.n	a11, 15
40080827:	3f          	.byte 0x3f
40080828:	fb0084        	lsi	f8, a0, 0x3ec
4008082b:	3f          	.byte 0x3f
4008082c:	0b1c      	movi.n	a11, 16
4008082e:	3ffb      	addi.n	a3, a15, 15
40080830:	fb0144        	lsi	f4, a1, 0x3ec
40080833:	3f          	.byte 0x3f
40080834:	ff          	.byte 0xff
40080835:	ff          	.byte 0xff
40080836:	ff          	.byte 0xff
40080837:	7f          	.byte 0x7f
40080838:	0a68      	l32i.n	a6, a10, 0
4008083a:	3ffb      	addi.n	a3, a15, 15
4008083c:	fb0084        	lsi	f8, a0, 0x3ec
4008083f:	3f          	.byte 0x3f
40080840:	0098      	l32i.n	a9, a0, 0
40080842:	3ffb      	addi.n	a3, a15, 15

40080844 <__start>:
 * This is written in C rather than assembly since, during the port bring up,
 * Zephyr is being booted by the Espressif bootloader.  With it, the C stack
 * is already set up.
 */
void __attribute__((section(".iram1"))) __start(void)
{
40080844:	004136        	entry	a1, 32
	extern uint32_t _init_start;
	extern uint32_t _bss_start;
	extern uint32_t _bss_end;

	/* Move the exception vector table to IRAM. */
	__asm__ __volatile__ (
40080847:	ff4281        	l32r	a8, 40080550 <_iram_text_start>
4008084a:	13e780        	wsr.vecbase	a8
		:
		: "r"(&_init_start));

	/* Zero out BSS.  Clobber _bss_start to avoid memset() elision. */
	(void)memset(&_bss_start, 0,
		     (&_bss_end - &_bss_start) * sizeof(_bss_start));
4008084d:	ff42a1        	l32r	a10, 40080558 <_iram_text_start+0x8>
	(void)memset(&_bss_start, 0,
40080850:	ff41c1        	l32r	a12, 40080554 <_iram_text_start+0x4>
40080853:	00a0b2        	movi	a11, 0
40080856:	c0cca0        	sub	a12, a12, a10
40080859:	02f465        	call8	400837a0 <memset>
		: "memory");

	/* The watchdog timer is enabled in the bootloader.  We're done booting,
	 * so disable it.
	 */
	*wdt_rtc_reg &= ~RTC_CNTL_WDT_FLASHBOOT_MOD_EN;
4008085c:	ff4091        	l32r	a9, 4008055c <_iram_text_start+0xc>
4008085f:	ffaba2        	movi	a10, 0xfffffbff
40080862:	0020c0        	memw
40080865:	002982        	l32i	a8, a9, 0
40080868:	1088a0        	and	a8, a8, a10
4008086b:	0020c0        	memw
4008086e:	0989      	s32i.n	a8, a9, 0
	*wdt_timg_reg &= ~TIMG_WDT_FLASHBOOT_MOD_EN;
40080870:	ff3c91        	l32r	a9, 40080560 <_iram_text_start+0x10>
40080873:	ff3ca1        	l32r	a10, 40080564 <_iram_text_start+0x14>
40080876:	0020c0        	memw
40080879:	0988      	l32i.n	a8, a9, 0
4008087b:	1088a0        	and	a8, a8, a10
4008087e:	0020c0        	memw
40080881:	0989      	s32i.n	a8, a9, 0

	/* Disable normal interrupts. */
	__asm__ __volatile__ (
40080883:	ff3981        	l32r	a8, 40080568 <_iram_text_start+0x18>
40080886:	13e680        	wsr.ps	a8
		"wsr %0, PS"
		:
		: "r"(PS_INTLEVEL(XCHAL_EXCM_LEVEL) | PS_UM | PS_WOE));

	/* Disable CPU1 while we figure out how to have SMP in Zephyr. */
	*app_cpu_config_reg &= ~DPORT_APPCPU_CLKGATE_EN;
40080889:	ff3891        	l32r	a9, 4008056c <_iram_text_start+0x1c>
4008088c:	ea7c      	movi.n	a10, -2
4008088e:	0020c0        	memw
40080891:	0988      	l32i.n	a8, a9, 0
40080893:	1088a0        	and	a8, a8, a10
40080896:	0020c0        	memw
40080899:	006982        	s32i	a8, a9, 0

	/* Initialize the architecture CPU pointer.  Some of the
	 * initialization code wants a valid _current before
	 * arch_kernel_init() is invoked.
	 */
	__asm__ volatile("wsr.MISC0 %0; rsync" : : "r"(&_kernel.cpus[0]));
4008089c:	ff3581        	l32r	a8, 40080570 <_iram_text_start+0x20>
4008089f:	13f480        	wsr.misc0	a8
400808a2:	002010        	rsync


	/* Start Zephyr */
	z_cstart();
400808a5:	01f925        	call8	40082838 <z_cstart>

400808a8 <_Level1Vector>:
DEF_EXCINT 1, _handle_excint, xtensa_excint1_c
400808a8:	c4c112        	addi	a1, a1, -60
400808ab:	7109      	s32i.n	a0, a1, 28
400808ad:	9129      	s32i.n	a2, a1, 36
400808af:	a139      	s32i.n	a3, a1, 40
400808b1:	03e600        	rsr.ps	a0
400808b4:	026c      	movi.n	a2, -32
400808b6:	100020        	and	a0, a0, a2
400808b9:	5109      	s32i.n	a0, a1, 20
400808bb:	03b100        	rsr.epc1	a0
400808be:	6109      	s32i.n	a0, a1, 24
400808c0:	000206        	j	400808cc <_after_imms1>
	...

400808c4 <_handle_excint_imm1>:
400808c4:	1888      	l32i.n	a8, a8, 4
400808c6:	4008      	l32i.n	a0, a0, 16

400808c8 <_c_handler_imm1>:
400808c8:	1b9c      	beqz.n	a11, 400808dd <k_msleep$constprop$9+0x5>
400808ca:	4008      	l32i.n	a0, a0, 16

400808cc <_after_imms1>:
400808cc:	ffff21        	l32r	a2, 400808c8 <_c_handler_imm1>
400808cf:	fffd01        	l32r	a0, 400808c4 <_handle_excint_imm1>
400808d2:	0000a0        	jx	a0
400808d5:	000000        	ill

400808d8 <k_msleep$constprop$9>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
400808d8:	004136        	entry	a1, 32
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
400808db:	ff27b1        	l32r	a11, 40080578 <_iram_text_start+0x28>
400808de:	ff25a1        	l32r	a10, 40080574 <_iram_text_start+0x24>
400808e1:	0289a5        	call8	4008317c <z_impl_k_sleep>
{
	return k_sleep(Z_TIMEOUT_MS(ms));
}
400808e4:	0a2d      	mov.n	a2, a10
400808e6:	f01d      	retw.n

400808e8 <blink1>:
const float LM75A_DEGREES_RESOLUTION = 0.125;
const int LM75A_REG_ADDR_TEMP = 0;


void blink1(void *id, void *unused1, void *unused2)
{
400808e8:	004136        	entry	a1, 32
	
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);

	int my_id = POINTER_TO_INT(id);
	printk("Beginning execution; thread data is %d\n", my_id);
400808eb:	ff26a1        	l32r	a10, 40080584 <_iram_text_start+0x34>
400808ee:	20b220        	or	a11, a2, a2
400808f1:	006e25        	call8	40080fd4 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
400808f4:	ff25a1        	l32r	a10, 40080588 <_iram_text_start+0x38>
400808f7:	01e8e5        	call8	40082784 <z_impl_device_get_binding>
400808fa:	202aa0        	or	a2, a10, a10
	const struct device *dev;
	bool led_on = true;
	int ret;
	
	dev = device_get_binding("GPIO_0");
	if(dev == NULL){
400808fd:	083a16        	beqz	a10, 40080984 <blink1+0x9c>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40080900:	3a48      	l32i.n	a4, a10, 12
	return api->pin_configure(port, pin, flags);
40080902:	2a38      	l32i.n	a3, a10, 8
40080904:	ff22c1        	l32r	a12, 4008058c <_iram_text_start+0x3c>
40080907:	0338      	l32i.n	a3, a3, 0
40080909:	2b0c      	movi.n	a11, 2
4008090b:	0003e0        	callx8	a3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
4008090e:	eacc      	bnez.n	a10, 40080920 <blink1+0x38>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40080910:	0438      	l32i.n	a3, a4, 0
40080912:	b57c      	movi.n	a5, -5
40080914:	103350        	and	a3, a3, a5
40080917:	0439      	s32i.n	a3, a4, 0
{
40080919:	130c      	movi.n	a3, 1
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
		value = (value != 0) ? 0 : 1;
4008091b:	035d      	mov.n	a5, a3
4008091d:	0001c6        	j	40080928 <blink1+0x40>
		return;
	}
	
	ret= gpio_pin_configure(dev, LED_PIN, GPIO_OUTPUT_ACTIVE);
	if(ret<0){
40080920:	060a96        	bltz	a10, 40080984 <blink1+0x9c>
40080923:	fffc86        	j	40080919 <blink1+0x31>
40080926:	410000        	srli	a0, a0, 0
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
40080929:	ff1b      	addi.n	a15, a15, 1
4008092b:	ff19c1        	l32r	a12, 40080590 <_iram_text_start+0x40>
4008092e:	ff18d1        	l32r	a13, 40080590 <_iram_text_start+0x40>
40080931:	20a440        	or	a10, a4, a4
40080934:	01fee5        	call8	40082924 <z_impl_k_mutex_lock>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
40080937:	032282        	l32i	a8, a2, 12
4008093a:	002892        	l32i	a9, a8, 0
4008093d:	038d      	mov.n	a8, a3
4008093f:	056927        	bbci	a9, 2, 40080948 <blink1+0x60>
		value = (value != 0) ? 0 : 1;
40080942:	308350        	xor	a8, a3, a5
40080945:	748080        	extui	a8, a8, 0, 8
	if (value != 0)	{
40080948:	588c      	beqz.n	a8, 40080951 <blink1+0x69>
	return api->port_set_bits_raw(port, pins);
4008094a:	2288      	l32i.n	a8, a2, 8
4008094c:	3888      	l32i.n	a8, a8, 12
4008094e:	000146        	j	40080957 <blink1+0x6f>
	return api->port_clear_bits_raw(port, pins);
40080951:	022282        	l32i	a8, a2, 8
40080954:	042882        	l32i	a8, a8, 16
40080957:	04a0b2        	movi	a11, 4
4008095a:	02ad      	mov.n	a10, a2
4008095c:	0008e0        	callx8	a8
	}
	
	while (1){
	    k_mutex_lock(&cliblock, K_FOREVER);
		gpio_pin_set(dev, LED_PIN,  (int)led_on);
		printk("LED1 on\n");
4008095f:	ff0ea1        	l32r	a10, 40080598 <_iram_text_start+0x48>
40080962:	006725        	call8	40080fd4 <printk>
		printk("LED2 %s\n", (led_on ? "on" : "off"));
40080965:	ff05b1        	l32r	a11, 4008057c <_iram_text_start+0x2c>
40080968:	13cc      	bnez.n	a3, 4008096d <blink1+0x85>
4008096a:	ff05b1        	l32r	a11, 40080580 <_iram_text_start+0x30>
4008096d:	ff0ba1        	l32r	a10, 4008059c <_iram_text_start+0x4c>
		led_on = !led_on;
40080970:	303350        	xor	a3, a3, a5
		printk("LED2 %s\n", (led_on ? "on" : "off"));
40080973:	006625        	call8	40080fd4 <printk>
		led_on = !led_on;
40080976:	743030        	extui	a3, a3, 0, 8
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
40080979:	04ad      	mov.n	a10, a4
4008097b:	020725        	call8	400829ec <z_impl_k_mutex_unlock>
4008097e:	ffe986        	j	40080928 <blink1+0x40>
40080981:	000000        	ill

		//k_msleep(SLEEP_TIME);
		k_mutex_unlock(&cliblock);
	}

}
40080984:	f01d      	retw.n
	...

40080988 <temperatura>:

void temperatura(void *id, void *unused1, void *unused2)
{
40080988:	008136        	entry	a1, 64
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);

	int my_id = POINTER_TO_INT(id);
	printk("Beginning execution; thread data is %d\n", my_id);
4008098b:	fefea1        	l32r	a10, 40080584 <_iram_text_start+0x34>
4008098e:	02bd      	mov.n	a11, a2
	//uint8_t cmp_data[16];
	uint8_t data[16];
	//int i, 
	int ret;
	uint16_t temp = 0x00;
    uint8_t pointer = 0x00;
40080990:	00a032        	movi	a3, 0
	printk("Beginning execution; thread data is %d\n", my_id);
40080993:	006425        	call8	40080fd4 <printk>
    uint8_t pointer = 0x00;
40080996:	104132        	s8i	a3, a1, 16
40080999:	ff01a1        	l32r	a10, 400805a0 <_iram_text_start+0x50>
4008099c:	01de65        	call8	40082784 <z_impl_device_get_binding>
4008099f:	0a2d      	mov.n	a2, a10
400809a1:	ff00a1        	l32r	a10, 400805a4 <_iram_text_start+0x54>
400809a4:	01dde5        	call8	40082784 <z_impl_device_get_binding>
400809a7:	0a5d      	mov.n	a5, a10

	i2c_dev = device_get_binding(I2C_DEV);
	i2c_dev1 = device_get_binding(I2C_DEV1);
	if (!i2c_dev1) {
400809a9:	7acc      	bnez.n	a10, 400809b4 <temperatura+0x2c>
		printk("I2C: Device driver not found.\n");
400809ab:	feffa1        	l32r	a10, 400805a8 <_iram_text_start+0x58>
400809ae:	006265        	call8	40080fd4 <printk>
        k_mutex_unlock(&cliblock);
    }
    	
	

}
400809b1:	f01d      	retw.n
400809b3:	fe6100        	f64iter	a6, a1, a0, 3, 1
	printk("----------->> -------------------- <<---------------\n");
400809b6:	fe          	.byte 0xfe
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809b7:	340c      	movi.n	a4, 3
	printk("----------->> -------------------- <<---------------\n");
400809b9:	06ad      	mov.n	a10, a6
400809bb:	0061a5        	call8	40080fd4 <printk>
    printk("---------->>   *** I2C LM75A ***   <<--------------\n\n");
400809be:	fefca1        	l32r	a10, 400805b0 <_iram_text_start+0x60>
400809c1:	006125        	call8	40080fd4 <printk>
	printk("I2C LM75A - Pruebas.\n");
400809c4:	fefca1        	l32r	a10, 400805b4 <_iram_text_start+0x64>
400809c7:	0060e5        	call8	40080fd4 <printk>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809ca:	8d4c      	movi.n	a13, 72
400809cc:	1c0c      	movi.n	a12, 1
400809ce:	10c1b2        	addi	a11, a1, 16
400809d1:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
400809d3:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809d6:	02d765        	call8	4008374c <i2c_write>
	k_msleep(5);
400809d9:	ffefe5        	call8	400808d8 <k_msleep$constprop$9>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
400809dc:	8d4c      	movi.n	a13, 72
400809de:	2c0c      	movi.n	a12, 2
400809e0:	01bd      	mov.n	a11, a1
400809e2:	02ad      	mov.n	a10, a2
400809e4:	02d465        	call8	4008372c <i2c_read>
	k_msleep(5);
400809e7:	ffef25        	call8	400808d8 <k_msleep$constprop$9>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
400809ea:	fef371        	l32r	a7, 400805b8 <_iram_text_start+0x68>
400809ed:	0101c2        	l8ui	a12, a1, 1
400809f0:	0001b2        	l8ui	a11, a1, 0
400809f3:	07ad      	mov.n	a10, a7
400809f5:	005de5        	call8	40080fd4 <printk>
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
400809f8:	280c      	movi.n	a8, 2
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
400809fa:	8d4c      	movi.n	a13, 72
400809fc:	1c0c      	movi.n	a12, 1
400809fe:	10c1b2        	addi	a11, a1, 16
40080a01:	02ad      	mov.n	a10, a2
	pointer = 0x02; //Thyst register pointer - 4B00h por defecto
40080a03:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a06:	02d465        	call8	4008374c <i2c_write>
	k_msleep(5);
40080a09:	ffece5        	call8	400808d8 <k_msleep$constprop$9>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a0c:	8d4c      	movi.n	a13, 72
40080a0e:	2c0c      	movi.n	a12, 2
40080a10:	01bd      	mov.n	a11, a1
40080a12:	02ad      	mov.n	a10, a2
40080a14:	02d165        	call8	4008372c <i2c_read>
	k_msleep(5);
40080a17:	ffec25        	call8	400808d8 <k_msleep$constprop$9>
	printk("----->> Hysteresis - Thyst Register: %x|%x\n\n", data[0], data[1]);
40080a1a:	0101c2        	l8ui	a12, a1, 1
40080a1d:	0001b2        	l8ui	a11, a1, 0
40080a20:	fee7a1        	l32r	a10, 400805bc <_iram_text_start+0x6c>
40080a23:	005b25        	call8	40080fd4 <printk>
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080a26:	180c      	movi.n	a8, 1
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a28:	8d4c      	movi.n	a13, 72
40080a2a:	1c0c      	movi.n	a12, 1
40080a2c:	10c1b2        	addi	a11, a1, 16
40080a2f:	02ad      	mov.n	a10, a2
	pointer = 0x01; //Configuration register pointer - 00h por defecto
40080a31:	104182        	s8i	a8, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a34:	02d165        	call8	4008374c <i2c_write>
	k_msleep(5);
40080a37:	ffea25        	call8	400808d8 <k_msleep$constprop$9>
	ret = i2c_read(i2c_dev, &data[0], 1, LM75A_DEFAULT_ADDRESS);
40080a3a:	8d4c      	movi.n	a13, 72
40080a3c:	1c0c      	movi.n	a12, 1
40080a3e:	01bd      	mov.n	a11, a1
40080a40:	02ad      	mov.n	a10, a2
40080a42:	02cea5        	call8	4008372c <i2c_read>
	k_msleep(5);
40080a45:	ffe925        	call8	400808d8 <k_msleep$constprop$9>
	printk("----->>  Configuration - Register %x|%x\n\n", data[0], data[1]);
40080a48:	0101c2        	l8ui	a12, a1, 1
40080a4b:	0001b2        	l8ui	a11, a1, 0
40080a4e:	fedca1        	l32r	a10, 400805c0 <_iram_text_start+0x70>
40080a51:	005825        	call8	40080fd4 <printk>
	printk("----->>  Writing - Tos Register %x|%x\n", data[0], data[1]);
40080a54:	0101c2        	l8ui	a12, a1, 1
40080a57:	0001b2        	l8ui	a11, a1, 0
40080a5a:	fedaa1        	l32r	a10, 400805c4 <_iram_text_start+0x74>
40080a5d:	005765        	call8	40080fd4 <printk>
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080a60:	8d4c      	movi.n	a13, 72
40080a62:	3c0c      	movi.n	a12, 3
40080a64:	01bd      	mov.n	a11, a1
40080a66:	02ad      	mov.n	a10, a2
	data[1] = temp >> 8;//MSByte
40080a68:	014132        	s8i	a3, a1, 1
	data[2] = (uint16_t)temp & 0x0F;//LSByte
40080a6b:	024132        	s8i	a3, a1, 2
	pointer = 0x03;
40080a6e:	104142        	s8i	a4, a1, 16
	data[0] = pointer;
40080a71:	004142        	s8i	a4, a1, 0
	i2c_write(i2c_dev, &data[0], 3, LM75A_DEFAULT_ADDRESS);
40080a74:	02cd65        	call8	4008374c <i2c_write>
	printk("----->>  Tos Register wrote temp: <%x>, MSByte <%x>, LSByte <%x>\n\n", temp, data[1], data[2]);
40080a77:	0201d2        	l8ui	a13, a1, 2
40080a7a:	0101c2        	l8ui	a12, a1, 1
40080a7d:	fed2a1        	l32r	a10, 400805c8 <_iram_text_start+0x78>
40080a80:	0b3c      	movi.n	a11, 48
40080a82:	005525        	call8	40080fd4 <printk>
	k_msleep(5);
40080a85:	ffe525        	call8	400808d8 <k_msleep$constprop$9>
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a88:	8d4c      	movi.n	a13, 72
40080a8a:	1c0c      	movi.n	a12, 1
40080a8c:	10c1b2        	addi	a11, a1, 16
40080a8f:	02ad      	mov.n	a10, a2
	pointer = 0x03; //Tos register pointer - 5000h por defecto
40080a91:	104142        	s8i	a4, a1, 16
	i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080a94:	02cb65        	call8	4008374c <i2c_write>
	k_msleep(5);
40080a97:	ffe425        	call8	400808d8 <k_msleep$constprop$9>
	ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080a9a:	8d4c      	movi.n	a13, 72
40080a9c:	2c0c      	movi.n	a12, 2
40080a9e:	01bd      	mov.n	a11, a1
40080aa0:	02ad      	mov.n	a10, a2
40080aa2:	02c8a5        	call8	4008372c <i2c_read>
	k_msleep(5);
40080aa5:	ffe325        	call8	400808d8 <k_msleep$constprop$9>
	printk("----->> SetPoint - Tos Register: %x|%x\n\n", data[0], data[1]);
40080aa8:	0101c2        	l8ui	a12, a1, 1
40080aab:	0001b2        	l8ui	a11, a1, 0
40080aae:	07ad      	mov.n	a10, a7
40080ab0:	005225        	call8	40080fd4 <printk>
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080ab3:	8d4c      	movi.n	a13, 72
40080ab5:	1c0c      	movi.n	a12, 1
40080ab7:	10c1b2        	addi	a11, a1, 16
40080aba:	02ad      	mov.n	a10, a2
	pointer = 0x00; // Temp register pointer
40080abc:	104132        	s8i	a3, a1, 16
    i2c_write(i2c_dev, &pointer, 1, LM75A_DEFAULT_ADDRESS);
40080abf:	02c8e5        	call8	4008374c <i2c_write>
    printk("----------->> -------------------- <<---------------\n");
40080ac2:	06ad      	mov.n	a10, a6
40080ac4:	0050e5        	call8	40080fd4 <printk>
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080ac7:	fec1a1        	l32r	a10, 400805cc <_iram_text_start+0x7c>
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
40080aca:	737c      	movi.n	a3, -9
    printk("---------->>   *** I2C BMP280 ***   <<--------------\n\n");
40080acc:	005065        	call8	40080fd4 <printk>
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080acf:	76a0d2        	movi	a13, 118
40080ad2:	1c0c      	movi.n	a12, 1
40080ad4:	10c1b2        	addi	a11, a1, 16
40080ad7:	05ad      	mov.n	a10, a5
	pointer = 0xF7; //Tos register pointer - 5000h por defecto
40080ad9:	104132        	s8i	a3, a1, 16
	i2c_write(i2c_dev1, &pointer, 1, BMP280_DEFAULT_ADDRESS);
40080adc:	02c6e5        	call8	4008374c <i2c_write>
	k_msleep(5);
40080adf:	ffdfa5        	call8	400808d8 <k_msleep$constprop$9>
	ret = i2c_read(i2c_dev1, &data[0], 4, BMP280_DEFAULT_ADDRESS);
40080ae2:	76a0d2        	movi	a13, 118
40080ae5:	4c0c      	movi.n	a12, 4
40080ae7:	01bd      	mov.n	a11, a1
40080ae9:	05ad      	mov.n	a10, a5
40080aeb:	02c425        	call8	4008372c <i2c_read>
	k_msleep(5);
40080aee:	ffdea5        	call8	400808d8 <k_msleep$constprop$9>
	printk("----->> presion %x temp %x\n\n", data[0], data[3]); // data[0] = 0xF7 reg info -  data[3] = 0xFA red info.
40080af1:	0301c2        	l8ui	a12, a1, 3
40080af4:	0001b2        	l8ui	a11, a1, 0
40080af7:	feb6a1        	l32r	a10, 400805d0 <_iram_text_start+0x80>
40080afa:	004da5        	call8	40080fd4 <printk>
	return z_impl_k_mutex_lock(mutex, timeout);
40080afd:	fea531        	l32r	a3, 40080594 <_iram_text_start+0x44>
40080b00:	fea4c1        	l32r	a12, 40080590 <_iram_text_start+0x40>
40080b03:	fea3d1        	l32r	a13, 40080590 <_iram_text_start+0x40>
40080b06:	03ad      	mov.n	a10, a3
40080b08:	01e1a5        	call8	40082924 <z_impl_k_mutex_lock>
        ret = i2c_read(i2c_dev, &data[0], 2, LM75A_DEFAULT_ADDRESS);
40080b0b:	8d4c      	movi.n	a13, 72
40080b0d:	2c0c      	movi.n	a12, 2
40080b0f:	20b110        	or	a11, a1, a1
40080b12:	20a220        	or	a10, a2, a2
40080b15:	02c165        	call8	4008372c <i2c_read>
        if(~ret) {
40080b18:	050a26        	beqi	a10, -1, 40080b21 <temperatura+0x199>
            printk("Succesful read\n");
40080b1b:	feaea1        	l32r	a10, 400805d4 <_iram_text_start+0x84>
40080b1e:	000086        	j	40080b24 <temperatura+0x19c>
            printk("Error read\n");
40080b21:	feada1        	l32r	a10, 400805d8 <_iram_text_start+0x88>
40080b24:	004ae5        	call8	40080fd4 <printk>
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080b27:	0101c2        	l8ui	a12, a1, 1
40080b2a:	0001b2        	l8ui	a11, a1, 0
40080b2d:	feaba1        	l32r	a10, 400805dc <_iram_text_start+0x8c>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b30:	80a052        	movi	a5, 128
        printk("data[0]: %X data[1] %X \n", data[0], data[1]);
40080b33:	004a25        	call8	40080fd4 <printk>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b36:	000182        	l8ui	a8, a1, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080b39:	feaaa1        	l32r	a10, 400805e4 <_iram_text_start+0x94>
        temp = data[0] << 8 | (data[1] & 0x80 );
40080b3c:	114880        	slli	a4, a8, 8
40080b3f:	010182        	l8ui	a8, a1, 1
40080b42:	108850        	and	a8, a8, a5
40080b45:	208840        	or	a8, a8, a4
        temp = temp * LM75A_DEGREES_RESOLUTION;
40080b48:	418580        	srli	a8, a8, 5
40080b4b:	fea541        	l32r	a4, 400805e0 <_iram_text_start+0x90>
40080b4e:	ca0800        	float.s	f0, a8, 0
40080b51:	fa1450        	wfr	f1, a4
40080b54:	2a0010        	mul.s	f0, f0, f1
40080b57:	eab000        	utrunc.s	a11, f0, 0
        printk("Temperatura en Celsius: %d\n", temp); //float not supported by printk
40080b5a:	f4b0b0        	extui	a11, a11, 0, 16
40080b5d:	004765        	call8	40080fd4 <printk>
	return z_impl_k_mutex_unlock(mutex);
40080b60:	03ad      	mov.n	a10, a3
40080b62:	01e8a5        	call8	400829ec <z_impl_k_mutex_unlock>
40080b65:	ffe5c6        	j	40080b00 <temperatura+0x178>

40080b68 <main>:
	k_thread_start(&threads[1]);
	
}

void main(void)
{
40080b68:	008136        	entry	a1, 64
	//display_demo_description();

	#if CONFIG_TIMESLICING
	k_sched_time_slice_set(5000, 0);
40080b6b:	fe9fa1        	l32r	a10, 400805e8 <_iram_text_start+0x98>
40080b6e:	00a0b2        	movi	a11, 0
40080b71:	01f725        	call8	40082ae4 <k_sched_time_slice_set>
	return z_impl_k_mutex_init(mutex);
40080b74:	fe88a1        	l32r	a10, 40080594 <_iram_text_start+0x44>
40080b77:	02e765        	call8	400839ec <z_impl_k_mutex_init>
	k_thread_create(&threads[0], &stacks[0][0], STACK_SIZE,
40080b7a:	fe8541        	l32r	a4, 40080590 <_iram_text_start+0x40>
40080b7d:	fe8451        	l32r	a5, 40080590 <_iram_text_start+0x40>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
40080b80:	fe9d31        	l32r	a3, 400805f4 <_iram_text_start+0xa4>
40080b83:	00a022        	movi	a2, 0
40080b86:	460c      	movi.n	a6, 4
40080b88:	fe99d1        	l32r	a13, 400805ec <_iram_text_start+0x9c>
40080b8b:	fe99b1        	l32r	a11, 400805f0 <_iram_text_start+0xa0>
40080b8e:	4149      	s32i.n	a4, a1, 16
40080b90:	5159      	s32i.n	a5, a1, 20
40080b92:	2169      	s32i.n	a6, a1, 8
40080b94:	1129      	s32i.n	a2, a1, 4
40080b96:	0129      	s32i.n	a2, a1, 0
40080b98:	02fd      	mov.n	a15, a2
40080b9a:	02ed      	mov.n	a14, a2
40080b9c:	00a6c2        	movi	a12, 0x600
40080b9f:	20a330        	or	a10, a3, a3
40080ba2:	027065        	call8	400832a8 <z_impl_k_thread_create>
	z_impl_k_thread_start(thread);
40080ba5:	03ad      	mov.n	a10, a3
40080ba7:	0269e5        	call8	40083244 <z_impl_k_thread_start>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
40080baa:	fe9531        	l32r	a3, 40080600 <_iram_text_start+0xb0>
40080bad:	fe92d1        	l32r	a13, 400805f8 <_iram_text_start+0xa8>
40080bb0:	fe93b1        	l32r	a11, 400805fc <_iram_text_start+0xac>
40080bb3:	4149      	s32i.n	a4, a1, 16
40080bb5:	5159      	s32i.n	a5, a1, 20
40080bb7:	2169      	s32i.n	a6, a1, 8
40080bb9:	1129      	s32i.n	a2, a1, 4
40080bbb:	0129      	s32i.n	a2, a1, 0
40080bbd:	02fd      	mov.n	a15, a2
40080bbf:	1e0c      	movi.n	a14, 1
40080bc1:	00a6c2        	movi	a12, 0x600
40080bc4:	03ad      	mov.n	a10, a3
40080bc6:	026e25        	call8	400832a8 <z_impl_k_thread_create>
	z_impl_k_thread_start(thread);
40080bc9:	03ad      	mov.n	a10, a3
40080bcb:	0267a5        	call8	40083244 <z_impl_k_thread_start>
	 * opportunity to dump some output before coverage data gets emitted
	 */
	k_sleep(K_MSEC(5000));
#endif

}
40080bce:	f01d      	retw.n

40080bd0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
40080bd0:	00a136        	entry	a1, 80
40080bd3:	049d      	mov.n	a9, a4
40080bd5:	744070        	extui	a4, a7, 0, 8
40080bd8:	058d      	mov.n	a8, a5
40080bda:	8149      	s32i.n	a4, a1, 32
40080bdc:	500142        	l8ui	a4, a1, 80
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080bdf:	471c      	movi.n	a7, 20
		buf[i] = "0123456789abcdef"[num % base];
40080be1:	315f60        	srai	a5, a6, 31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080be4:	000e86        	j	40080c22 <print_digits+0x52>
40080be7:	000000        	ill
		buf[i] = "0123456789abcdef"[num % base];
40080bea:	80f170        	add	a15, a1, a7
40080bed:	20c660        	or	a12, a6, a6
40080bf0:	05dd      	mov.n	a13, a5
40080bf2:	09ad      	mov.n	a10, a9
40080bf4:	08bd      	mov.n	a11, a8
40080bf6:	b189      	s32i.n	a8, a1, 44
40080bf8:	a199      	s32i.n	a9, a1, 40
40080bfa:	0961f2        	s32i	a15, a1, 36
40080bfd:	030c25        	call8	40083cc0 <__umoddi3>
40080c00:	fe81b1        	l32r	a11, 40080604 <_iram_text_start+0xb4>
40080c03:	91f8      	l32i.n	a15, a1, 36
40080c05:	abaa      	add.n	a10, a11, a10
40080c07:	000aa2        	l8ui	a10, a10, 0
		num /= base;
40080c0a:	06cd      	mov.n	a12, a6
		buf[i] = "0123456789abcdef"[num % base];
40080c0c:	004fa2        	s8i	a10, a15, 0
		num /= base;
40080c0f:	a198      	l32i.n	a9, a1, 40
40080c11:	b188      	l32i.n	a8, a1, 44
40080c13:	09ad      	mov.n	a10, a9
40080c15:	08bd      	mov.n	a11, a8
40080c17:	05dd      	mov.n	a13, a5
40080c19:	02e365        	call8	40083a50 <__udivdi3>
40080c1c:	0a9d      	mov.n	a9, a10
40080c1e:	0b8d      	mov.n	a8, a11
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
40080c20:	770b      	addi.n	a7, a7, -1
40080c22:	20a980        	or	a10, a9, a8
40080c25:	fc1a56        	bnez	a10, 40080bea <print_digits+0x1a>
	}

	if (i == DIGITS_BUFLEN - 1) {
40080c28:	451c      	movi.n	a5, 20
40080c2a:	079757        	bne	a7, a5, 40080c35 <print_digits+0x65>
		buf[i] = '0';
40080c2d:	053c      	movi.n	a5, 48
40080c2f:	144152        	s8i	a5, a1, 20
40080c32:	000046        	j	40080c37 <print_digits+0x67>
	} else {
		i++;
40080c35:	771b      	addi.n	a7, a7, 1
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
40080c37:	152182        	l32i	a8, a1, 84
40080c3a:	591c      	movi.n	a9, 21
40080c3c:	878a      	add.n	a8, a7, a8
40080c3e:	050c      	movi.n	a5, 0
40080c40:	1c1897        	beq	a8, a9, 40080c60 <print_digits+0x90>
40080c43:	ebc852        	addi	a5, a8, -21
40080c46:	000206        	j	40080c52 <print_digits+0x82>

	for (/**/; pad > 0 && pad_before; pad--) {
		out(pad_char, ctx);
40080c49:	03bd      	mov.n	a11, a3
40080c4b:	04ad      	mov.n	a10, a4
40080c4d:	0002e0        	callx8	a2
	for (/**/; pad > 0 && pad_before; pad--) {
40080c50:	550b      	addi.n	a5, a5, -1
40080c52:	318f50        	srai	a8, a5, 31
40080c55:	c08850        	sub	a8, a8, a5
40080c58:	0048d6        	bgez	a8, 40080c60 <print_digits+0x90>
40080c5b:	8168      	l32i.n	a6, a1, 32
40080c5d:	fe8656        	bnez	a6, 40080c49 <print_digits+0x79>
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c60:	561c      	movi.n	a6, 21
		out(buf[i], ctx);
40080c62:	817a      	add.n	a8, a1, a7
40080c64:	0008a2        	l8ui	a10, a8, 0
40080c67:	20b330        	or	a11, a3, a3
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c6a:	01c772        	addi	a7, a7, 1
		out(buf[i], ctx);
40080c6d:	0002e0        	callx8	a2
	for (/**/; i < DIGITS_BUFLEN; i++) {
40080c70:	ee9767        	bne	a7, a6, 40080c62 <print_digits+0x92>
40080c73:	000206        	j	40080c7f <print_digits+0xaf>
	}
	for (/**/; pad > 0; pad--) {
		out(pad_char, ctx);
40080c76:	03bd      	mov.n	a11, a3
40080c78:	04ad      	mov.n	a10, a4
40080c7a:	0002e0        	callx8	a2
	for (/**/; pad > 0; pad--) {
40080c7d:	550b      	addi.n	a5, a5, -1
40080c7f:	f315e6        	bgei	a5, 1, 40080c76 <print_digits+0xa6>
	}
}
40080c82:	f01d      	retw.n

40080c84 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
40080c84:	004136        	entry	a1, 32
	struct out_context *ctx = ctx_p;

	ctx->count++;
40080c87:	0388      	l32i.n	a8, a3, 0
	return _char_out(c);
40080c89:	02ad      	mov.n	a10, a2
	ctx->count++;
40080c8b:	881b      	addi.n	a8, a8, 1
40080c8d:	0389      	s32i.n	a8, a3, 0
	return _char_out(c);
40080c8f:	fe5e31        	l32r	a3, 40080608 <_iram_text_start+0xb8>
40080c92:	002332        	l32i	a3, a3, 0
40080c95:	0003e0        	callx8	a3
}
40080c98:	0a2d      	mov.n	a2, a10
40080c9a:	f01d      	retw.n

40080c9c <__printk_hook_install>:
{
40080c9c:	004136        	entry	a1, 32
	_char_out = fn;
40080c9f:	fe5a81        	l32r	a8, 40080608 <_iram_text_start+0xb8>
40080ca2:	0829      	s32i.n	a2, a8, 0
}
40080ca4:	f01d      	retw.n
	...

40080ca8 <z_vprintk>:
{
40080ca8:	00a136        	entry	a1, 80
40080cab:	9149      	s32i.n	a4, a1, 36
	char length_mod = 0;
40080cad:	040c      	movi.n	a4, 0
{
40080caf:	4159      	s32i.n	a5, a1, 16
40080cb1:	5169      	s32i.n	a6, a1, 20
40080cb3:	6179      	s32i.n	a7, a1, 24
40080cb5:	7159      	s32i.n	a5, a1, 28
40080cb7:	8169      	s32i.n	a6, a1, 32
40080cb9:	076d      	mov.n	a6, a7
	int min_width = -1;
40080cbb:	f57c      	movi.n	a5, -1
	enum pad_type padding = PAD_NONE;
40080cbd:	047d      	mov.n	a7, a4
	int might_format = 0; /* 1 if encountered a '%' */
40080cbf:	048d      	mov.n	a8, a4
	while (*fmt) {
40080cc1:	00ba46        	j	40080fae <z_vprintk+0x306>
		if (!might_format) {
40080cc4:	08dc      	bnez.n	a8, 40080cd8 <z_vprintk+0x30>
			if (*fmt != '%') {
40080cc6:	592c      	movi.n	a9, 37
40080cc8:	029a97        	bne	a10, a9, 40080cce <z_vprintk+0x26>
40080ccb:	00ad86        	j	40080f85 <z_vprintk+0x2dd>
				out((int)*fmt, ctx);
40080cce:	03bd      	mov.n	a11, a3
40080cd0:	a189      	s32i.n	a8, a1, 40
40080cd2:	0002e0        	callx8	a2
40080cd5:	008046        	j	40080eda <z_vprintk+0x232>
			switch (*fmt) {
40080cd8:	64a092        	movi	a9, 100
40080cdb:	029a97        	bne	a10, a9, 40080ce1 <z_vprintk+0x39>
40080cde:	003186        	j	40080da8 <z_vprintk+0x100>
40080ce1:	3739a7        	bltu	a9, a10, 40080d1c <z_vprintk+0x74>
40080ce4:	993c      	movi.n	a9, 57
40080ce6:	1c39a7        	bltu	a9, a10, 40080d06 <z_vprintk+0x5e>
40080ce9:	193c      	movi.n	a9, 49
40080ceb:	7bba97        	bgeu	a10, a9, 40080d6a <z_vprintk+0xc2>
40080cee:	d92c      	movi.n	a9, 45
40080cf0:	029a97        	bne	a10, a9, 40080cf6 <z_vprintk+0x4e>
40080cf3:	00a646        	j	40080f90 <z_vprintk+0x2e8>
40080cf6:	093c      	movi.n	a9, 48
40080cf8:	681a97        	beq	a10, a9, 40080d64 <z_vprintk+0xbc>
40080cfb:	582c      	movi.n	a8, 37
40080cfd:	021a87        	beq	a10, a8, 40080d03 <z_vprintk+0x5b>
40080d00:	009a86        	j	40080f6e <z_vprintk+0x2c6>
40080d03:	009886        	j	40080f69 <z_vprintk+0x2c1>
40080d06:	885c      	movi.n	a8, 88
40080d08:	029a87        	bne	a10, a8, 40080d0e <z_vprintk+0x66>
40080d0b:	005286        	j	40080e59 <z_vprintk+0x1b1>
40080d0e:	63a082        	movi	a8, 99
40080d11:	029a87        	bne	a10, a8, 40080d17 <z_vprintk+0x6f>
40080d14:	008b06        	j	40080f44 <z_vprintk+0x29c>
40080d17:	0094c6        	j	40080f6e <z_vprintk+0x2c6>
40080d1a:	920000        	lsi	f0, a0, 0x248
40080d1d:	9770a0        	lsi	f10, a0, 0x25c
40080d20:	029a      	add.n	a0, a2, a9
40080d22:	004806        	j	40080e46 <z_vprintk+0x19e>
40080d25:	1339a7        	bltu	a9, a10, 40080d3c <z_vprintk+0x94>
40080d28:	69a092        	movi	a9, 105
40080d2b:	791a97        	beq	a10, a9, 40080da8 <z_vprintk+0x100>
40080d2e:	6ca092        	movi	a9, 108
40080d31:	541a97        	beq	a10, a9, 40080d89 <z_vprintk+0xe1>
40080d34:	68a092        	movi	a9, 104
40080d37:	000886        	j	40080d5d <z_vprintk+0xb5>
40080d3a:	920000        	lsi	f0, a0, 0x248
40080d3d:	9775a0        	lsi	f10, a5, 0x25c
40080d40:	651a      	add.n	a6, a5, a1
40080d42:	0b39a7        	bltu	a9, a10, 40080d51 <z_vprintk+0xa9>
40080d45:	73a082        	movi	a8, 115
40080d48:	029a87        	bne	a10, a8, 40080d4e <z_vprintk+0xa6>
40080d4b:	006446        	j	40080ee0 <z_vprintk+0x238>
40080d4e:	008706        	j	40080f6e <z_vprintk+0x2c6>
40080d51:	78a092        	movi	a9, 120
40080d54:	029a97        	bne	a10, a9, 40080d5a <z_vprintk+0xb2>
40080d57:	003f86        	j	40080e59 <z_vprintk+0x1b1>
40080d5a:	7aa092        	movi	a9, 122
40080d5d:	281a97        	beq	a10, a9, 40080d89 <z_vprintk+0xe1>
40080d60:	008286        	j	40080f6e <z_vprintk+0x2c6>
40080d63:	25d600        	extui	a13, a0, 22, 3
				if (min_width < 0 && padding == PAD_NONE) {
40080d66:	a71600        	lsi	f0, a6, 0x29c
40080d69:	65d622        	addmi	a2, a6, 0x6500
				if (min_width < 0) {
40080d6c:	ca5200        	float.s	f5, a2, 0
					min_width = *fmt - '0';
40080d6f:	0346d0        	lsi	f13, a6, 12
40080d72:	e00000        	subx4	a0, a0, a0
					min_width = 10 * min_width + *fmt - '0';
40080d75:	5a1195        	call4	400dae90 <_iram_text_end+0x56f5e>
40080d78:	f059      	s32i.n	a5, a0, 60
40080d7a:	521155        	call4	400d2e90 <_iram_text_end+0x4ef5e>
40080d7d:	5ad0c5        	call0	400dba8c <_iram_text_end+0x57b5a>
40080d80:	565a      	add.n	a5, a6, a5
				if (padding == PAD_NONE) {
40080d82:	0c2237        	blt	a2, a3, 40080d92 <z_vprintk+0xea>
					padding = PAD_SPACE_BEFORE;
40080d85:	878627        	bany	a6, a2, 40080d10 <z_vprintk+0x68>
40080d88:	a09200        	addx4	a9, a2, a0
				if (*fmt == 'h' && length_mod == 'h') {
40080d8b:	9768      	l32i.n	a6, a7, 36
40080d8d:	059a      	add.n	a0, a5, a9
40080d8f:	0d94a7        	bne	a4, a10, 40080da0 <z_vprintk+0xf8>
40080d92:	008146        	j	40080f9b <z_vprintk+0x2f3>
				} else if (*fmt == 'l' && length_mod == 'l') {
40080d95:	94c492        	addi	a9, a4, -108
40080d98:	49cc      	bnez.n	a9, 40080da0 <z_vprintk+0xf8>
40080d9a:	94ca92        	addi	a9, a10, -108
40080d9d:	1ff916        	beqz	a9, 40080fa0 <z_vprintk+0x2f8>
				} else if (length_mod == 0) {
40080da0:	202416        	beqz	a4, 40080fa6 <z_vprintk+0x2fe>
					out((int)'%', ctx);
40080da3:	0071c6        	j	40080f6e <z_vprintk+0x2c6>
40080da6:	920000        	lsi	f0, a0, 0x248
				if (length_mod == 'z') {
40080da9:	1c7aa0        	lsi	f10, a10, 112
40080dac:	9788      	l32i.n	a8, a7, 36
40080dae:	060394        	lsi	f9, a3, 24
					d = va_arg(ap, ssize_t);
40080db1:	000c      	movi.n	a0, 0
40080db3:	a09200        	addx4	a9, a2, a0
				} else if (length_mod == 'l') {
40080db6:	976c      	movi.n	a7, -23
40080db8:	860294        	lsi	f9, a2, 0x218
					d = va_arg(ap, long);
40080dbb:	0009      	s32i.n	a0, a0, 0
				} else if (length_mod == 'L') {
40080dbd:	c94c      	movi.n	a9, 76
40080dbf:	219497        	bne	a4, a9, 40080de4 <z_vprintk+0x13c>
					long long lld = va_arg(ap, long long);
40080dc2:	897c      	movi.n	a9, -8
40080dc4:	c67b      	addi.n	a12, a6, 7
40080dc6:	10cc90        	and	a12, a12, a9
40080dc9:	9c8b      	addi.n	a9, a12, 8
40080dcb:	81b8      	l32i.n	a11, a1, 32
40080dcd:	07a897        	bge	a8, a9, 40080dd8 <z_vprintk+0x130>
40080dd0:	0228c7        	blt	a8, a12, 40080dd6 <z_vprintk+0x12e>
40080dd3:	28a092        	movi	a9, 40
40080dd6:	71b8      	l32i.n	a11, a1, 28
40080dd8:	8b9a      	add.n	a8, a11, a9
40080dda:	f8c882        	addi	a8, a8, -8
					d = (printk_val_t) lld;
40080ddd:	08c8      	l32i.n	a12, a8, 0
40080ddf:	1868      	l32i.n	a6, a8, 4
40080de1:	0005c6        	j	40080dfc <z_vprintk+0x154>
					d = va_arg(ap, int);
40080de4:	964b      	addi.n	a9, a6, 4
40080de6:	81b8      	l32i.n	a11, a1, 32
40080de8:	06a897        	bge	a8, a9, 40080df2 <z_vprintk+0x14a>
40080deb:	012867        	blt	a8, a6, 40080df0 <z_vprintk+0x148>
40080dee:	492c      	movi.n	a9, 36
40080df0:	71b8      	l32i.n	a11, a1, 28
40080df2:	bb9a      	add.n	a11, a11, a9
40080df4:	fccbb2        	addi	a11, a11, -4
40080df7:	0bc8      	l32i.n	a12, a11, 0
40080df9:	316fc0        	srai	a6, a12, 31
				if (*fmt != 'u' && negative(d)) {
40080dfc:	75a082        	movi	a8, 117
40080dff:	251a87        	beq	a10, a8, 40080e28 <z_vprintk+0x180>
40080e02:	0226d6        	bgez	a6, 40080e28 <z_vprintk+0x180>
					out((int)'-', ctx);
40080e05:	03bd      	mov.n	a11, a3
40080e07:	da2c      	movi.n	a10, 45
40080e09:	0b6192        	s32i	a9, a1, 44
40080e0c:	0a61c2        	s32i	a12, a1, 40
40080e0f:	0002e0        	callx8	a2
					d = -d;
40080e12:	a1c8      	l32i.n	a12, a1, 40
40080e14:	180c      	movi.n	a8, 1
40080e16:	60c0c0        	neg	a12, a12
40080e19:	0a0c      	movi.n	a10, 0
40080e1b:	838ac0        	moveqz	a8, a10, a12
40080e1e:	60d060        	neg	a13, a6
					min_width--;
40080e21:	b198      	l32i.n	a9, a1, 44
					d = -d;
40080e23:	c06d80        	sub	a6, a13, a8
					min_width--;
40080e26:	550b      	addi.n	a5, a5, -1
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
40080e28:	fdc7a2        	addi	a10, a7, -3
40080e2b:	080c      	movi.n	a8, 0
40080e2d:	1f0c      	movi.n	a15, 1
40080e2f:	0e3c      	movi.n	a14, 48
40080e31:	83f8a0        	moveqz	a15, a8, a10
40080e34:	0b2c      	movi.n	a11, 32
40080e36:	a70b      	addi.n	a10, a7, -1
40080e38:	83bea0        	moveqz	a11, a14, a10
40080e3b:	1159      	s32i.n	a5, a1, 4
40080e3d:	01b9      	s32i.n	a11, a1, 0
40080e3f:	ae0c      	movi.n	a14, 10
40080e41:	06dd      	mov.n	a13, a6
40080e43:	002106        	j	40080ecb <z_vprintk+0x223>
				out('0', ctx);
40080e46:	03bd      	mov.n	a11, a3
40080e48:	0a3c      	movi.n	a10, 48
40080e4a:	0002e0        	callx8	a2
				out('x', ctx);
40080e4d:	03bd      	mov.n	a11, a3
40080e4f:	78a0a2        	movi	a10, 120
40080e52:	0002e0        	callx8	a2
				min_width = sizeof(void *) * 2;
40080e55:	850c      	movi.n	a5, 8
				padding = PAD_ZERO_BEFORE;
40080e57:	170c      	movi.n	a7, 1
				if (*fmt == 'p') {
40080e59:	9198      	l32i.n	a9, a1, 36
40080e5b:	881c      	movi.n	a8, 24
40080e5d:	0009a2        	l8ui	a10, a9, 0
40080e60:	70a092        	movi	a9, 112
40080e63:	029a97        	bne	a10, a9, 40080e69 <z_vprintk+0x1c1>
					x = (uintptr_t)va_arg(ap, void *);
40080e66:	000b86        	j	40080e98 <z_vprintk+0x1f0>
				} else if (length_mod == 'l') {
40080e69:	6ca092        	movi	a9, 108
40080e6c:	029497        	bne	a4, a9, 40080e72 <z_vprintk+0x1ca>
					x = va_arg(ap, unsigned long);
40080e6f:	000946        	j	40080e98 <z_vprintk+0x1f0>
				} else if (length_mod == 'L') {
40080e72:	c94c      	movi.n	a9, 76
40080e74:	209497        	bne	a4, a9, 40080e98 <z_vprintk+0x1f0>
					x = va_arg(ap, unsigned long long);
40080e77:	897c      	movi.n	a9, -8
40080e79:	c67b      	addi.n	a12, a6, 7
40080e7b:	10cc90        	and	a12, a12, a9
40080e7e:	9c8b      	addi.n	a9, a12, 8
40080e80:	81a8      	l32i.n	a10, a1, 32
40080e82:	06a897        	bge	a8, a9, 40080e8c <z_vprintk+0x1e4>
40080e85:	0128c7        	blt	a8, a12, 40080e8a <z_vprintk+0x1e2>
40080e88:	892c      	movi.n	a9, 40
40080e8a:	71a8      	l32i.n	a10, a1, 28
40080e8c:	8a9a      	add.n	a8, a10, a9
40080e8e:	f8c882        	addi	a8, a8, -8
40080e91:	08c8      	l32i.n	a12, a8, 0
40080e93:	18d8      	l32i.n	a13, a8, 4
40080e95:	000646        	j	40080eb2 <z_vprintk+0x20a>
					x = va_arg(ap, unsigned int);
40080e98:	964b      	addi.n	a9, a6, 4
40080e9a:	81a8      	l32i.n	a10, a1, 32
40080e9c:	06a897        	bge	a8, a9, 40080ea6 <z_vprintk+0x1fe>
40080e9f:	012867        	blt	a8, a6, 40080ea4 <z_vprintk+0x1fc>
40080ea2:	492c      	movi.n	a9, 36
40080ea4:	71a8      	l32i.n	a10, a1, 28
40080ea6:	80aa90        	add	a10, a10, a9
40080ea9:	fccaa2        	addi	a10, a10, -4
40080eac:	002ac2        	l32i	a12, a10, 0
40080eaf:	00a0d2        	movi	a13, 0
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
40080eb2:	fdc7a2        	addi	a10, a7, -3
40080eb5:	080c      	movi.n	a8, 0
40080eb7:	1f0c      	movi.n	a15, 1
40080eb9:	0e3c      	movi.n	a14, 48
40080ebb:	83f8a0        	moveqz	a15, a8, a10
40080ebe:	0b2c      	movi.n	a11, 32
40080ec0:	a70b      	addi.n	a10, a7, -1
40080ec2:	83bea0        	moveqz	a11, a14, a10
40080ec5:	1159      	s32i.n	a5, a1, 4
40080ec7:	01b9      	s32i.n	a11, a1, 0
40080ec9:	0e1c      	movi.n	a14, 16
40080ecb:	03bd      	mov.n	a11, a3
40080ecd:	02ad      	mov.n	a10, a2
40080ecf:	b199      	s32i.n	a9, a1, 44
40080ed1:	a189      	s32i.n	a8, a1, 40
40080ed3:	ffcfe5        	call8	40080bd0 <print_digits>
40080ed6:	b198      	l32i.n	a9, a1, 44
40080ed8:	096d      	mov.n	a6, a9
			might_format = 0;
40080eda:	a188      	l32i.n	a8, a1, 40
40080edc:	003206        	j	40080fa8 <z_vprintk+0x300>
40080edf:	964b00        	lsi	f0, a11, 0x258
				char *s = va_arg(ap, char *);
40080ee2:	881c      	movi.n	a8, 24
40080ee4:	0ca897        	bge	a8, a9, 40080ef4 <z_vprintk+0x24c>
40080ee7:	012867        	blt	a8, a6, 40080eec <z_vprintk+0x244>
40080eea:	492c      	movi.n	a9, 36
40080eec:	096d      	mov.n	a6, a9
40080eee:	7188      	l32i.n	a8, a1, 28
40080ef0:	000106        	j	40080ef8 <z_vprintk+0x250>
40080ef3:	818800        	src	a8, a8, a0
40080ef6:	096d      	mov.n	a6, a9
40080ef8:	889a      	add.n	a8, a8, a9
40080efa:	fcc882        	addi	a8, a8, -4
40080efd:	08d8      	l32i.n	a13, a8, 0
40080eff:	0d9d      	mov.n	a9, a13
				while (*s) {
40080f01:	0003c6        	j	40080f14 <z_vprintk+0x26c>
					out((int)(*s++), ctx);
40080f04:	991b      	addi.n	a9, a9, 1
40080f06:	03bd      	mov.n	a11, a3
40080f08:	b199      	s32i.n	a9, a1, 44
40080f0a:	0a61d2        	s32i	a13, a1, 40
40080f0d:	0002e0        	callx8	a2
40080f10:	a1d8      	l32i.n	a13, a1, 40
40080f12:	b198      	l32i.n	a9, a1, 44
				while (*s) {
40080f14:	0009a2        	l8ui	a10, a9, 0
40080f17:	fe9a56        	bnez	a10, 40080f04 <z_vprintk+0x25c>
			might_format = 0;
40080f1a:	0a8d      	mov.n	a8, a10
				if (padding == PAD_SPACE_AFTER) {
40080f1c:	023726        	beqi	a7, 3, 40080f22 <z_vprintk+0x27a>
40080f1f:	002146        	j	40080fa8 <z_vprintk+0x300>
					int remaining = min_width - (s - start);
40080f22:	c099d0        	sub	a9, a9, a13
40080f25:	c09590        	sub	a9, a5, a9
						out(' ', ctx);
40080f28:	082c      	movi.n	a8, 32
					while (remaining-- > 0) {
40080f2a:	000406        	j	40080f3e <z_vprintk+0x296>
						out(' ', ctx);
40080f2d:	08ad      	mov.n	a10, a8
40080f2f:	03bd      	mov.n	a11, a3
40080f31:	a189      	s32i.n	a8, a1, 40
40080f33:	b199      	s32i.n	a9, a1, 44
40080f35:	0002e0        	callx8	a2
40080f38:	b198      	l32i.n	a9, a1, 44
40080f3a:	a188      	l32i.n	a8, a1, 40
40080f3c:	990b      	addi.n	a9, a9, -1
					while (remaining-- > 0) {
40080f3e:	eb19e6        	bgei	a9, 1, 40080f2d <z_vprintk+0x285>
40080f41:	000ec6        	j	40080f80 <z_vprintk+0x2d8>
				int c = va_arg(ap, int);
40080f44:	964b      	addi.n	a9, a6, 4
40080f46:	8a1c      	movi.n	a10, 24
40080f48:	8188      	l32i.n	a8, a1, 32
40080f4a:	06aa97        	bge	a10, a9, 40080f54 <z_vprintk+0x2ac>
40080f4d:	012a67        	blt	a10, a6, 40080f52 <z_vprintk+0x2aa>
40080f50:	492c      	movi.n	a9, 36
40080f52:	7188      	l32i.n	a8, a1, 28
40080f54:	889a      	add.n	a8, a8, a9
40080f56:	fcc882        	addi	a8, a8, -4
				out(c, ctx);
40080f59:	08a8      	l32i.n	a10, a8, 0
40080f5b:	03bd      	mov.n	a11, a3
40080f5d:	b199      	s32i.n	a9, a1, 44
40080f5f:	0002e0        	callx8	a2
				break;
40080f62:	b198      	l32i.n	a9, a1, 44
40080f64:	096d      	mov.n	a6, a9
40080f66:	000586        	j	40080f80 <z_vprintk+0x2d8>
				out((int)'%', ctx);
40080f69:	03bd      	mov.n	a11, a3
40080f6b:	000386        	j	40080f7d <z_vprintk+0x2d5>
				out((int)'%', ctx);
40080f6e:	03bd      	mov.n	a11, a3
40080f70:	25a0a2        	movi	a10, 37
40080f73:	0002e0        	callx8	a2
				out((int)*fmt, ctx);
40080f76:	9188      	l32i.n	a8, a1, 36
40080f78:	03bd      	mov.n	a11, a3
40080f7a:	0008a2        	l8ui	a10, a8, 0
40080f7d:	0002e0        	callx8	a2
			might_format = 0;
40080f80:	080c      	movi.n	a8, 0
				break;
40080f82:	000886        	j	40080fa8 <z_vprintk+0x300>
				length_mod = 0;
40080f85:	084d      	mov.n	a4, a8
				padding = PAD_NONE;
40080f87:	087d      	mov.n	a7, a8
				min_width = -1;
40080f89:	f57c      	movi.n	a5, -1
				might_format = 1;
40080f8b:	180c      	movi.n	a8, 1
40080f8d:	0005c6        	j	40080fa8 <z_vprintk+0x300>
				padding = PAD_SPACE_AFTER;
40080f90:	370c      	movi.n	a7, 3
40080f92:	000486        	j	40080fa8 <z_vprintk+0x300>
					padding = PAD_ZERO_BEFORE;
40080f95:	170c      	movi.n	a7, 1
40080f97:	000346        	j	40080fa8 <z_vprintk+0x300>
40080f9a:	844c00        	extui	a4, a0, 12, 9
					length_mod = 'H';
40080f9d:	0001c6        	j	40080fa8 <z_vprintk+0x300>
					length_mod = 'L';
40080fa0:	c44c      	movi.n	a4, 76
40080fa2:	000086        	j	40080fa8 <z_vprintk+0x300>
40080fa5:	0a4d00        	add.s	f4, f13, f0
		++fmt;
40080fa8:	9198      	l32i.n	a9, a1, 36
40080faa:	991b      	addi.n	a9, a9, 1
40080fac:	9199      	s32i.n	a9, a1, 36
	while (*fmt) {
40080fae:	9198      	l32i.n	a9, a1, 36
40080fb0:	0009a2        	l8ui	a10, a9, 0
40080fb3:	d0da56        	bnez	a10, 40080cc4 <z_vprintk+0x1c>
}
40080fb6:	f01d      	retw.n

40080fb8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
40080fb8:	008136        	entry	a1, 64
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
40080fbb:	fd94a1        	l32r	a10, 4008060c <_iram_text_start+0xbc>
	struct out_context ctx = { 0 };
40080fbe:	00a082        	movi	a8, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080fc1:	20d330        	or	a13, a3, a3
40080fc4:	20e440        	or	a14, a4, a4
40080fc7:	05fd      	mov.n	a15, a5
40080fc9:	02cd      	mov.n	a12, a2
40080fcb:	01bd      	mov.n	a11, a1
	struct out_context ctx = { 0 };
40080fcd:	0189      	s32i.n	a8, a1, 0
	z_vprintk(char_out, &ctx, fmt, ap);
40080fcf:	ffcda5        	call8	40080ca8 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
40080fd2:	f01d      	retw.n

40080fd4 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
40080fd4:	00a136        	entry	a1, 80
	va_list ap;

	va_start(ap, fmt);
40080fd7:	10c1c2        	addi	a12, a1, 16
40080fda:	30c1b2        	addi	a11, a1, 48
40080fdd:	4d0c      	movi.n	a13, 4

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
40080fdf:	02ad      	mov.n	a10, a2
	va_start(ap, fmt);
40080fe1:	5139      	s32i.n	a3, a1, 20
40080fe3:	6149      	s32i.n	a4, a1, 24
40080fe5:	7159      	s32i.n	a5, a1, 28
40080fe7:	8169      	s32i.n	a6, a1, 32
40080fe9:	9179      	s32i.n	a7, a1, 36
40080feb:	11c9      	s32i.n	a12, a1, 4
40080fed:	01b9      	s32i.n	a11, a1, 0
40080fef:	21d9      	s32i.n	a13, a1, 8
		vprintk(fmt, ap);
40080ff1:	fffc65        	call8	40080fb8 <vprintk>
	}
	va_end(ap);
}
40080ff4:	f01d      	retw.n
	...

40080ff8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
40080ff8:	004136        	entry	a1, 32
	entry(p1, p2, p3);
40080ffb:	20c550        	or	a12, a5, a5
40080ffe:	20b440        	or	a11, a4, a4
40081001:	03ad      	mov.n	a10, a3
40081003:	0002e0        	callx8	a2
	return z_impl_k_current_get();
40081006:	021ba5        	call8	400831c0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
40081009:	0236e5        	call8	40083378 <z_impl_k_thread_abort>

4008100c <chunk_field>:
	return (chunk_unit_t *)h;
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
4008100c:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
4008100f:	1133d0        	slli	a3, a3, 3
40081012:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40081014:	fd7f81        	l32r	a8, 40080610 <_iram_text_start+0xc0>
40081017:	2228      	l32i.n	a2, a2, 8
40081019:	0bb827        	bgeu	a8, a2, 40081028 <chunk_field+0x1c>
		return ((uint32_t *)cmem)[f];
4008101c:	1144e0        	slli	a4, a4, 2
4008101f:	334a      	add.n	a3, a3, a4
40081021:	0328      	l32i.n	a2, a3, 0
40081023:	000246        	j	40081030 <chunk_field+0x24>
40081026:	f00000        	subx8	a0, a0, a0
	} else {
		return ((uint16_t *)cmem)[f];
40081029:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
4008102c:	132233        	lsi	f3, a2, 76
4008102f:	f01d00        	subx8	a1, a13, a0
	...

40081034 <chunk_set>:
	}
}

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
40081034:	004136        	entry	a1, 32
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40081037:	1133d0        	slli	a3, a3, 3
4008103a:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
4008103c:	fd7581        	l32r	a8, 40080610 <_iram_text_start+0xc0>
4008103f:	2228      	l32i.n	a2, a2, 8
40081041:	0bb827        	bgeu	a8, a2, 40081050 <chunk_set+0x1c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
40081044:	1144e0        	slli	a4, a4, 2
40081047:	334a      	add.n	a3, a3, a4
40081049:	0359      	s32i.n	a5, a3, 0
4008104b:	000246        	j	40081058 <chunk_set+0x24>
4008104e:	f00000        	subx8	a0, a0, a0
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
40081051:	4a1144        	mula.da.lh.ldinc	m1, a1, m0, a4
40081054:	535233        	lsi	f3, a2, 0x14c
40081057:	f01d00        	subx8	a1, a13, a0
	...

4008105c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
4008105c:	004136        	entry	a1, 32
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
4008105f:	1c0c      	movi.n	a12, 1
40081061:	03bd      	mov.n	a11, a3
40081063:	02ad      	mov.n	a10, a2
40081065:	fffa65        	call8	4008100c <chunk_field>
}
40081068:	4121a0        	srli	a2, a10, 1
4008106b:	f01d      	retw.n
4008106d:	000000        	ill

40081070 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
40081070:	004136        	entry	a1, 32
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
40081073:	1133d0        	slli	a3, a3, 3
40081076:	323a      	add.n	a3, a2, a3

	if (big_heap(h)) {
40081078:	fd6681        	l32r	a8, 40080610 <_iram_text_start+0xc0>
4008107b:	2228      	l32i.n	a2, a2, 8
4008107d:	17b827        	bgeu	a8, a2, 40081098 <set_chunk_used+0x28>
		if (used) {
40081080:	1388      	l32i.n	a8, a3, 4
40081082:	648c      	beqz.n	a4, 4008108c <set_chunk_used+0x1c>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
40081084:	120c      	movi.n	a2, 1
40081086:	208820        	or	a8, a8, a2
40081089:	000106        	j	40081091 <set_chunk_used+0x21>
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
4008108c:	e27c      	movi.n	a2, -2
4008108e:	108820        	and	a8, a8, a2
40081091:	1389      	s32i.n	a8, a3, 4
40081093:	000586        	j	400810ad <set_chunk_used+0x3d>
40081096:	820000        	mull	a0, a0, a0
		}
	} else {
		if (used) {
40081099:	8c0113        	lsi	f1, a1, 0x230
4008109c:	120c64        	lsi	f6, a12, 72
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
4008109f:	208820        	or	a8, a8, a2
400810a2:	000106        	j	400810aa <set_chunk_used+0x3a>
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
400810a5:	e27c      	movi.n	a2, -2
400810a7:	108820        	and	a8, a8, a2
400810aa:	015382        	s16i	a8, a3, 2
		}
	}
}
400810ad:	f01d      	retw.n
	...

400810b0 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
400810b0:	004136        	entry	a1, 32
	chunk_set(h, c, SIZE_AND_USED, size << 1);
400810b3:	11d4f0        	slli	a13, a4, 1
400810b6:	01a0c2        	movi	a12, 1
400810b9:	20b330        	or	a11, a3, a3
400810bc:	20a220        	or	a10, a2, a2
400810bf:	fff765        	call8	40081034 <chunk_set>
}
400810c2:	f01d      	retw.n

400810c4 <bucket_idx>:
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
400810c4:	004136        	entry	a1, 32
	return big_heap(h) ? 8 : 4;
400810c7:	fd5291        	l32r	a9, 40080610 <_iram_text_start+0xc0>
400810ca:	2228      	l32i.n	a2, a2, 8
400810cc:	880c      	movi.n	a8, 8
400810ce:	023927        	bltu	a9, a2, 400810d4 <bucket_idx+0x10>
400810d1:	04a082        	movi	a8, 4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
400810d4:	888b      	addi.n	a8, a8, 8
400810d6:	412380        	srli	a2, a8, 3
	size_t usable_sz = sz - min_chunk_size(h) + 1;
400810d9:	331b      	addi.n	a3, a3, 1
400810db:	c03320        	sub	a3, a3, a2
	return 31 - __builtin_clz(usable_sz);
400810de:	40f330        	nsau	a3, a3
}
400810e1:	f21c      	movi.n	a2, 31
400810e3:	c02230        	sub	a2, a2, a3
400810e6:	f01d      	retw.n

400810e8 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
400810e8:	004136        	entry	a1, 32
	return sizeof(void *) > 4 || chunks > 0x7fff;
400810eb:	03bd      	mov.n	a11, a3
400810ed:	02ad      	mov.n	a10, a2
400810ef:	fff6e5        	call8	4008105c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
400810f2:	fd4751        	l32r	a5, 40080610 <_iram_text_start+0xc0>
400810f5:	2248      	l32i.n	a4, a2, 8
400810f7:	05b547        	bgeu	a5, a4, 40081100 <free_list_add+0x18>
	if (!solo_free_header(h, c)) {
400810fa:	021a66        	bnei	a10, 1, 40081100 <free_list_add+0x18>
400810fd:	001bc6        	j	40081170 <free_list_add+0x88>
		int bidx = bucket_idx(h, chunk_size(h, c));
40081100:	0abd      	mov.n	a11, a10
40081102:	02ad      	mov.n	a10, a2
40081104:	fffbe5        	call8	400810c4 <bucket_idx>
	if (b->next == 0) {
40081107:	118ae0        	slli	a8, a10, 2
4008110a:	828a      	add.n	a8, a2, a8
4008110c:	4848      	l32i.n	a4, a8, 16
4008110e:	44ec      	bnez.n	a4, 40081136 <free_list_add+0x4e>
		h->avail_buckets |= (1 << bidx);
40081110:	140c      	movi.n	a4, 1
40081112:	401a00        	ssl	a10
40081115:	a14400        	sll	a4, a4
40081118:	32a8      	l32i.n	a10, a2, 12
	chunk_set(h, c, FREE_PREV, prev);
4008111a:	03dd      	mov.n	a13, a3
4008111c:	20aa40        	or	a10, a10, a4
4008111f:	32a9      	s32i.n	a10, a2, 12
40081121:	2c0c      	movi.n	a12, 2
40081123:	03bd      	mov.n	a11, a3
		b->next = c;
40081125:	4839      	s32i.n	a3, a8, 16
40081127:	02ad      	mov.n	a10, a2
40081129:	fff0a5        	call8	40081034 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
4008112c:	03dd      	mov.n	a13, a3
4008112e:	3c0c      	movi.n	a12, 3
40081130:	03bd      	mov.n	a11, a3
40081132:	000d46        	j	4008116b <free_list_add+0x83>
40081135:	a0c200        	addx4	a12, a2, a0
	return chunk_field(h, c, FREE_PREV);
40081138:	b44002        	s8i	a0, a0, 180
4008113b:	a22020        	muluh	a2, a0, a2
4008113e:	ece520        	lsi	f2, a5, 0x3b0
40081141:	ff          	.byte 0xff
	chunk_set(h, c, FREE_PREV, prev);
40081142:	0add      	mov.n	a13, a10
	return chunk_field(h, c, FREE_PREV);
40081144:	0a5d      	mov.n	a5, a10
	chunk_set(h, c, FREE_PREV, prev);
40081146:	2c0c      	movi.n	a12, 2
40081148:	03bd      	mov.n	a11, a3
4008114a:	02ad      	mov.n	a10, a2
4008114c:	ffee65        	call8	40081034 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
4008114f:	04dd      	mov.n	a13, a4
40081151:	3c0c      	movi.n	a12, 3
40081153:	03bd      	mov.n	a11, a3
40081155:	02ad      	mov.n	a10, a2
40081157:	ffede5        	call8	40081034 <chunk_set>
4008115a:	03dd      	mov.n	a13, a3
4008115c:	3c0c      	movi.n	a12, 3
4008115e:	05bd      	mov.n	a11, a5
40081160:	02ad      	mov.n	a10, a2
40081162:	ffed25        	call8	40081034 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
40081165:	03dd      	mov.n	a13, a3
40081167:	2c0c      	movi.n	a12, 2
40081169:	04bd      	mov.n	a11, a4
4008116b:	02ad      	mov.n	a10, a2
4008116d:	ffec65        	call8	40081034 <chunk_set>
		free_list_add_bidx(h, c, bidx);
	}
}
40081170:	f01d      	retw.n
	...

40081174 <sys_heap_init>:
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
40081174:	004136        	entry	a1, 32
	return big_heap_bytes(size) ? 8 : 4;
40081177:	fd2751        	l32r	a5, 40080614 <_iram_text_start+0xc4>
4008117a:	890c      	movi.n	a9, 8
4008117c:	013547        	bltu	a5, a4, 40081181 <sys_heap_init+0xd>
4008117f:	490c      	movi.n	a9, 4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
40081181:	c04490        	sub	a4, a4, a9

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
40081184:	887c      	movi.n	a8, -8
40081186:	537b      	addi.n	a5, a3, 7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
40081188:	334a      	add.n	a3, a3, a4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
4008118a:	105580        	and	a5, a5, a8
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
4008118d:	103380        	and	a3, a3, a8
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
40081190:	fcfa91        	l32r	a9, 40080578 <_iram_text_start+0x28>
40081193:	fcf981        	l32r	a8, 40080578 <_iram_text_start+0x28>
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
40081196:	c03350        	sub	a3, a3, a5
	heap->heap = h;
40081199:	0259      	s32i.n	a5, a2, 0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
4008119b:	413330        	srli	a3, a3, 3
	h->len = buf_sz;
	h->avail_buckets = 0;
4008119e:	040c      	movi.n	a4, 0
	h->chunk0_hdr_area = 0;
400811a0:	0589      	s32i.n	a8, a5, 0
400811a2:	1599      	s32i.n	a9, a5, 4

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400811a4:	03bd      	mov.n	a11, a3
	h->len = buf_sz;
400811a6:	2539      	s32i.n	a3, a5, 8
	h->avail_buckets = 0;
400811a8:	3549      	s32i.n	a4, a5, 12
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400811aa:	20a550        	or	a10, a5, a5
400811ad:	fff165        	call8	400810c4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
400811b0:	112ae0        	slli	a2, a10, 2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
400811b3:	1bc222        	addi	a2, a2, 27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
400811b6:	ba1b      	addi.n	a11, a10, 1
400811b8:	412320        	srli	a2, a2, 3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
400811bb:	10c592        	addi	a9, a5, 16
400811be:	048d      	mov.n	a8, a4
400811c0:	000186        	j	400811ca <sys_heap_init+0x56>
400811c3:	094900        	l32e	a0, a9, -48
400811c6:	881b      	addi.n	a8, a8, 1
400811c8:	994b      	addi.n	a9, a9, 4
400811ca:	f628b7        	blt	a8, a11, 400811c4 <sys_heap_init+0x50>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
400811cd:	02cd      	mov.n	a12, a2
400811cf:	05ad      	mov.n	a10, a5
400811d1:	0b0c      	movi.n	a11, 0
400811d3:	ffede5        	call8	400810b0 <set_chunk_size>
	set_chunk_used(h, 0, true);
400811d6:	05ad      	mov.n	a10, a5
400811d8:	1c0c      	movi.n	a12, 1
400811da:	0b0c      	movi.n	a11, 0
400811dc:	ffe925        	call8	40081070 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
400811df:	c04320        	sub	a4, a3, a2
400811e2:	04cd      	mov.n	a12, a4
400811e4:	02bd      	mov.n	a11, a2
400811e6:	05ad      	mov.n	a10, a5
400811e8:	ffec65        	call8	400810b0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
400811eb:	02dd      	mov.n	a13, a2
400811ed:	02bd      	mov.n	a11, a2
400811ef:	05ad      	mov.n	a10, a5
400811f1:	0c0c      	movi.n	a12, 0
400811f3:	ffe425        	call8	40081034 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
400811f6:	03bd      	mov.n	a11, a3
400811f8:	05ad      	mov.n	a10, a5
400811fa:	0c0c      	movi.n	a12, 0
400811fc:	ffeb25        	call8	400810b0 <set_chunk_size>
400811ff:	04dd      	mov.n	a13, a4
40081201:	03bd      	mov.n	a11, a3
40081203:	05ad      	mov.n	a10, a5
40081205:	0c0c      	movi.n	a12, 0
40081207:	ffe2e5        	call8	40081034 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
4008120a:	03bd      	mov.n	a11, a3
4008120c:	05ad      	mov.n	a10, a5
4008120e:	1c0c      	movi.n	a12, 1
40081210:	ffe5e5        	call8	40081070 <set_chunk_used>

	free_list_add(h, chunk0_size);
40081213:	02bd      	mov.n	a11, a2
40081215:	05ad      	mov.n	a10, a5
40081217:	ffed25        	call8	400810e8 <free_list_add>
}
4008121a:	f01d      	retw.n

4008121c <arch_printk_char_out>:
	CODE_UNREACHABLE;
}

/* Boot-time static default printk handler, possibly to be overridden later. */
int arch_printk_char_out(int c)
{
4008121c:	004136        	entry	a1, 32
	if (c == '\n') {
4008121f:	079266        	bnei	a2, 10, 4008122a <arch_printk_char_out+0xe>
		esp32_rom_uart_tx_one_char('\r');
40081222:	da0c      	movi.n	a10, 13
40081224:	fcfd81        	l32r	a8, 40080618 <_iram_text_start+0xc8>
40081227:	0008e0        	callx8	a8
	}
	esp32_rom_uart_tx_one_char(c);
4008122a:	74a020        	extui	a10, a2, 0, 8
4008122d:	fcfa81        	l32r	a8, 40080618 <_iram_text_start+0xc8>
40081230:	0008e0        	callx8	a8
	return 0;
}
40081233:	020c      	movi.n	a2, 0
40081235:	f01d      	retw.n
	...

40081238 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
40081238:	004136        	entry	a1, 32
4008123b:	fcf8a1        	l32r	a10, 4008061c <_iram_text_start+0xcc>
4008123e:	015465        	call8	40082784 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
40081241:	fcf721        	l32r	a2, 40080620 <_iram_text_start+0xd0>
40081244:	0062a2        	s32i	a10, a2, 0
	__stdout_hook_install(console_out);
40081247:	fcf721        	l32r	a2, 40080624 <_iram_text_start+0xd4>
4008124a:	02ad      	mov.n	a10, a2
4008124c:	00a9a5        	call8	40081ce8 <__stdout_hook_install>
	__printk_hook_install(console_out);
4008124f:	02ad      	mov.n	a10, a2
40081251:	ffa4a5        	call8	40080c9c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
40081254:	020c      	movi.n	a2, 0
40081256:	f01d      	retw.n

40081258 <console_out>:
{
40081258:	004136        	entry	a1, 32
	if ('\n' == c) {
4008125b:	fcf131        	l32r	a3, 40080620 <_iram_text_start+0xd0>
4008125e:	0a9266        	bnei	a2, 10, 4008126c <console_out+0x14>
40081261:	03a8      	l32i.n	a10, a3, 0
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
40081263:	2a88      	l32i.n	a8, a10, 8
40081265:	db0c      	movi.n	a11, 13
40081267:	1888      	l32i.n	a8, a8, 4
40081269:	0008e0        	callx8	a8
	uart_poll_out(uart_console_dev, c);
4008126c:	03a8      	l32i.n	a10, a3, 0
4008126e:	2a38      	l32i.n	a3, a10, 8
40081270:	74b020        	extui	a11, a2, 0, 8
40081273:	1338      	l32i.n	a3, a3, 4
40081275:	0003e0        	callx8	a3
}
40081278:	f01d      	retw.n
	...

4008127c <clock_control_esp32_on>:
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
}

static int clock_control_esp32_on(const struct device *dev,
				  clock_control_subsys_t sys)
{
4008127c:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
	uint32_t offset =  GET_REG_OFFSET(sys);

	__ASSERT_NO_MSG(bank >= CLOCK_REGS_BANK_COUNT);

	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
4008127f:	180c      	movi.n	a8, 1
	uint32_t bank = GET_REG_BANK(sys);
40081281:	419530        	srli	a9, a3, 5
	esp32_set_mask32(BIT(offset), clock_control_regs[bank].clk);
40081284:	401300        	ssl	a3
40081287:	a13800        	sll	a3, a8
4008128a:	fce781        	l32r	a8, 40080628 <_iram_text_start+0xd8>
4008128d:	1199d0        	slli	a9, a9, 3
40081290:	889a      	add.n	a8, a8, a9
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
40081292:	08a8      	l32i.n	a10, a8, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].rst);
	return 0;
}
40081294:	020c      	movi.n	a2, 0
40081296:	0020c0        	memw
40081299:	0a98      	l32i.n	a9, a10, 0
#include <stdbool.h>
#include <arch/xtensa/arch.h>

static inline void esp32_set_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008129b:	209390        	or	a9, a3, a9
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
4008129e:	0020c0        	memw
400812a1:	0a99      	s32i.n	a9, a10, 0
	return *(volatile uint32_t *)addr;
400812a3:	1898      	l32i.n	a9, a8, 4
}

static inline void esp32_clear_mask32(uint32_t v, uint32_t mem_addr)
{
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
400812a5:	f87c      	movi.n	a8, -1
400812a7:	0020c0        	memw
400812aa:	09a8      	l32i.n	a10, a9, 0
400812ac:	308830        	xor	a8, a8, a3
400812af:	1088a0        	and	a8, a8, a10
	*(volatile uint32_t *)addr = data;
400812b2:	0020c0        	memw
400812b5:	0989      	s32i.n	a8, a9, 0
400812b7:	f01d      	retw.n
400812b9:	000000        	ill

400812bc <clock_control_esp32_get_status>:
	return 0;
}

static enum clock_control_status clock_control_esp32_get_status(const struct device *dev,
								clock_control_subsys_t sys)
{
400812bc:	004136        	entry	a1, 32
	ARG_UNUSED(dev);
	uint32_t bank = GET_REG_BANK(sys);
400812bf:	418530        	srli	a8, a3, 5
	uint32_t offset =  GET_REG_OFFSET(sys);

	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400812c2:	1198d0        	slli	a9, a8, 3
400812c5:	fcd881        	l32r	a8, 40080628 <_iram_text_start+0xd8>
400812c8:	889a      	add.n	a8, a8, a9
 * @return Value
 */
static inline uint32_t IRAM_ATTR DPORT_READ_PERI_REG(uint32_t reg)
{
#if defined(BOOTLOADER_BUILD) || defined(CONFIG_FREERTOS_UNICORE) || !defined(ESP_PLATFORM)
    return _DPORT_REG_READ(reg);
400812ca:	0828      	l32i.n	a2, a8, 0
		return CLOCK_CONTROL_STATUS_ON;
	}
	return CLOCK_CONTROL_STATUS_OFF;
}
400812cc:	180c      	movi.n	a8, 1
400812ce:	0020c0        	memw
400812d1:	0228      	l32i.n	a2, a2, 0
	if (DPORT_GET_PERI_REG_MASK(clock_control_regs[bank].clk, BIT(offset))) {
400812d3:	400300        	ssr	a3
400812d6:	912020        	srl	a2, a2
400812d9:	043020        	extui	a3, a2, 0, 1
}
400812dc:	220c      	movi.n	a2, 2
400812de:	832830        	moveqz	a2, a8, a3
400812e1:	f01d      	retw.n
	...

400812e4 <clock_control_esp32_get_rate>:

static int clock_control_esp32_get_rate(const struct device *dev,
					clock_control_subsys_t sub_system,
					uint32_t *rate)
{
400812e4:	004136        	entry	a1, 32
	ARG_UNUSED(sub_system);

	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
	uint32_t soc_clk_sel = REG_GET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL);
400812e7:	fcd181        	l32r	a8, 4008062c <_iram_text_start+0xdc>
400812ea:	0020c0        	memw
400812ed:	0888      	l32i.n	a8, a8, 0
400812ef:	158b80        	extui	a8, a8, 27, 2

	switch (soc_clk_sel) {
400812f2:	688c      	beqz.n	a8, 400812fc <clock_control_esp32_get_rate+0x18>
400812f4:	020c      	movi.n	a2, 0
400812f6:	171826        	beqi	a8, 1, 40081311 <clock_control_esp32_get_rate+0x2d>
400812f9:	000706        	j	40081319 <clock_control_esp32_get_rate+0x35>
	uint32_t xtal_freq_sel = DEV_CFG(dev)->xtal_freq_sel;
400812fc:	1228      	l32i.n	a2, a2, 4
	case RTC_CNTL_SOC_CLK_SEL_XTL:
		*rate = xtal_freq[xtal_freq_sel];
400812fe:	2228      	l32i.n	a2, a2, 8
40081300:	1192e0        	slli	a9, a2, 2
40081303:	fccb21        	l32r	a2, 40080630 <_iram_text_start+0xe0>
40081306:	229a      	add.n	a2, a2, a9
40081308:	0228      	l32i.n	a2, a2, 0
4008130a:	0429      	s32i.n	a2, a4, 0
		return 0;
4008130c:	082d      	mov.n	a2, a8
4008130e:	000306        	j	4008131e <clock_control_esp32_get_rate+0x3a>
	case RTC_CNTL_SOC_CLK_SEL_PLL:
		*rate = MHZ(80);
40081311:	fcc881        	l32r	a8, 40080634 <_iram_text_start+0xe4>
40081314:	0489      	s32i.n	a8, a4, 0
		return 0;
40081316:	000106        	j	4008131e <clock_control_esp32_get_rate+0x3a>
	default:
		*rate = 0;
40081319:	0429      	s32i.n	a2, a4, 0
		return -ENOTSUP;
4008131b:	ddaf22        	movi	a2, -35
	}
}
4008131e:	f01d      	retw.n

40081320 <clock_control_esp32_init>:

static int clock_control_esp32_init(const struct device *dev)
{
40081320:	004136        	entry	a1, 32
	struct esp32_clock_config *cfg = DEV_CFG(dev);
40081323:	1238      	l32i.n	a3, a2, 4

	/* Wait for UART first before changing freq to avoid garbage on console */
	esp32_rom_uart_tx_wait_idle(0);
40081325:	0a0c      	movi.n	a10, 0
40081327:	fcd081        	l32r	a8, 40080668 <_iram_text_start+0x118>
4008132a:	0008e0        	callx8	a8

	switch (cfg->clk_src_sel) {
4008132d:	0368      	l32i.n	a6, a3, 0
4008132f:	968c      	beqz.n	a6, 4008133c <clock_control_esp32_init+0x1c>
		break;
	case ESP32_CLK_SRC_PLL:
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
		break;
	default:
		return -EINVAL;
40081331:	a26c      	movi.n	a2, -22
	switch (cfg->clk_src_sel) {
40081333:	021626        	beqi	a6, 1, 40081339 <clock_control_esp32_init+0x19>
40081336:	006ec6        	j	400814f5 <clock_control_esp32_init+0x1d5>
40081339:	001186        	j	40081383 <clock_control_esp32_init+0x63>
		REG_SET_FIELD(APB_CTRL_SYSCLK_CONF_REG, APB_CTRL_PRE_DIV_CNT, cfg->xtal_div);
4008133c:	fcbf51        	l32r	a5, 40080638 <_iram_text_start+0xe8>
4008133f:	3328      	l32i.n	a2, a3, 12
40081341:	0020c0        	memw
40081344:	0548      	l32i.n	a4, a5, 0
40081346:	00ac62        	movi	a6, 0xfffffc00
40081349:	104460        	and	a4, a4, a6
4008134c:	942020        	extui	a2, a2, 0, 10
4008134f:	202240        	or	a2, a2, a4
40081352:	0020c0        	memw
40081355:	0529      	s32i.n	a2, a5, 0
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
40081357:	2328      	l32i.n	a2, a3, 8
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081359:	fcb951        	l32r	a5, 40080640 <_iram_text_start+0xf0>
		REG_WRITE(APB_CTRL_XTAL_TICK_CONF_REG, xtal_freq[cfg->xtal_freq_sel] - 1);
4008135c:	1142e0        	slli	a4, a2, 2
4008135f:	fcb421        	l32r	a2, 40080630 <_iram_text_start+0xe0>
40081362:	224a      	add.n	a2, a2, a4
40081364:	0228      	l32i.n	a2, a2, 0
40081366:	fcb541        	l32r	a4, 4008063c <_iram_text_start+0xec>
40081369:	220b      	addi.n	a2, a2, -1
4008136b:	0020c0        	memw
4008136e:	0429      	s32i.n	a2, a4, 0
		REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_XTL);
40081370:	fcaf41        	l32r	a4, 4008062c <_iram_text_start+0xdc>
40081373:	0020c0        	memw
40081376:	0428      	l32i.n	a2, a4, 0
40081378:	102250        	and	a2, a2, a5
4008137b:	0020c0        	memw
4008137e:	0429      	s32i.n	a2, a4, 0
		break;
40081380:	0051c6        	j	400814cb <clock_control_esp32_init+0x1ab>
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081383:	1328      	l32i.n	a2, a3, 4
	switch (cpu_freq) {
40081385:	a0a042        	movi	a4, 160
		cpuclk_pll_configure(cfg->xtal_freq_sel, cfg->cpu_freq);
40081388:	2378      	l32i.n	a7, a3, 8
	switch (cpu_freq) {
4008138a:	0c1247        	beq	a2, a4, 4008139a <clock_control_esp32_init+0x7a>
4008138d:	f0a052        	movi	a5, 240
		cpu_period_sel = DPORT_CPUPERIOD_SEL_240;
40081390:	240c      	movi.n	a4, 2
	switch (cpu_freq) {
40081392:	081257        	beq	a2, a5, 4008139e <clock_control_esp32_init+0x7e>
	uint32_t cpu_period_sel = DPORT_CPUPERIOD_SEL_80;
40081395:	040c      	movi.n	a4, 0
40081397:	000046        	j	4008139c <clock_control_esp32_init+0x7c>
		cpu_period_sel = DPORT_CPUPERIOD_SEL_160;
4008139a:	064d      	mov.n	a4, a6
		pll_freq = RTC_PLL_FREQ_320M;
4008139c:	060c      	movi.n	a6, 0
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
4008139e:	fca951        	l32r	a5, 40080644 <_iram_text_start+0xf4>
400813a1:	fca981        	l32r	a8, 40080648 <_iram_text_start+0xf8>
400813a4:	0020c0        	memw
400813a7:	0528      	l32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400813a9:	8d1c      	movi.n	a13, 24
	CLEAR_PERI_REG_MASK(RTC_CNTL_OPTIONS0_REG,
400813ab:	102280        	and	a2, a2, a8
400813ae:	0020c0        	memw
400813b1:	0529      	s32i.n	a2, a5, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_DELAY, BBPLL_IR_CAL_DELAY_VAL);
400813b3:	0c0c      	movi.n	a12, 0
400813b5:	04a0b2        	movi	a11, 4
400813b8:	66a0a2        	movi	a10, 102
400813bb:	fcac81        	l32r	a8, 4008066c <_iram_text_start+0x11c>
400813be:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_IR_CAL_EXT_CAP, BBPLL_IR_CAL_EXT_CAP_VAL);
400813c1:	0d2c      	movi.n	a13, 32
400813c3:	1c0c      	movi.n	a12, 1
400813c5:	04a0b2        	movi	a11, 4
400813c8:	66a0a2        	movi	a10, 102
400813cb:	fca881        	l32r	a8, 4008066c <_iram_text_start+0x11c>
400813ce:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_FCAL, BBPLL_OC_ENB_FCAL_VAL);
400813d1:	4c0c      	movi.n	a12, 4
400813d3:	0cbd      	mov.n	a11, a12
400813d5:	9aa0d2        	movi	a13, 154
400813d8:	66a0a2        	movi	a10, 102
400813db:	fca481        	l32r	a8, 4008066c <_iram_text_start+0x11c>
400813de:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_ENB_VCON, BBPLL_OC_ENB_VCON_VAL);
400813e1:	0d0c      	movi.n	a13, 0
400813e3:	ac0c      	movi.n	a12, 10
400813e5:	4b0c      	movi.n	a11, 4
400813e7:	66a0a2        	movi	a10, 102
400813ea:	fca081        	l32r	a8, 4008066c <_iram_text_start+0x11c>
400813ed:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_CAL_7_0, BBPLL_BBADC_CAL_7_0_VAL);
400813f0:	0d0c      	movi.n	a13, 0
400813f2:	cc0c      	movi.n	a12, 12
400813f4:	4b0c      	movi.n	a11, 4
400813f6:	66a0a2        	movi	a10, 102
400813f9:	fc9c81        	l32r	a8, 4008066c <_iram_text_start+0x11c>
400813fc:	0008e0        	callx8	a8
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
400813ff:	fc9321        	l32r	a2, 4008064c <_iram_text_start+0xfc>
40081402:	fc9381        	l32r	a8, 40080650 <_iram_text_start+0x100>
40081405:	0020c0        	memw
40081408:	0258      	l32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
4008140a:	bc0c      	movi.n	a12, 11
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
4008140c:	105580        	and	a5, a5, a8
4008140f:	fc9181        	l32r	a8, 40080654 <_iram_text_start+0x104>
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
40081412:	4b0c      	movi.n	a11, 4
	REG_SET_FIELD(RTC_CNTL_REG, RTC_CNTL_DIG_DBIAS_WAK, dbias_wak);
40081414:	205580        	or	a5, a5, a8
40081417:	0020c0        	memw
4008141a:	0259      	s32i.n	a5, a2, 0
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_ENDIV5, cfg->endiv5);
4008141c:	fc8f51        	l32r	a5, 40080658 <_iram_text_start+0x108>
4008141f:	1126c0        	slli	a2, a6, 4
40081422:	c06260        	sub	a6, a2, a6
40081425:	256a      	add.n	a2, a5, a6
40081427:	0102d2        	l8ui	a13, a2, 1
4008142a:	66a0a2        	movi	a10, 102
4008142d:	fc8f81        	l32r	a8, 4008066c <_iram_text_start+0x11c>
40081430:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081433:	0202d2        	l8ui	a13, a2, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081436:	1127f0        	slli	a2, a7, 1
40081439:	227a      	add.n	a2, a2, a7
4008143b:	1122f0        	slli	a2, a2, 1
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
4008143e:	9c0c      	movi.n	a12, 9
40081440:	4b0c      	movi.n	a11, 4
40081442:	66a0a2        	movi	a10, 102
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081445:	226a      	add.n	a2, a2, a6
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_BBADC_DSMP, cfg->bbadc_dsmp);
40081447:	fc8981        	l32r	a8, 4008066c <_iram_text_start+0x11c>
4008144a:	0008e0        	callx8	a8
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
4008144d:	252a      	add.n	a2, a5, a2
4008144f:	0602d2        	l8ui	a13, a2, 6
40081452:	050252        	l8ui	a5, a2, 5
40081455:	11dd90        	slli	a13, a13, 7
40081458:	1155c0        	slli	a5, a5, 4
4008145b:	20dd50        	or	a13, a13, a5
4008145e:	030252        	l8ui	a5, a2, 3
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081461:	2c0c      	movi.n	a12, 2
	uint8_t i2c_bbpll_lref = (bb_cfg->lref << 7) | (bb_cfg->div10_8 << 4) | (bb_cfg->div_ref);
40081463:	20dd50        	or	a13, a13, a5
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_LREF, i2c_bbpll_lref);
40081466:	74d0d0        	extui	a13, a13, 0, 8
40081469:	4b0c      	movi.n	a11, 4
4008146b:	66a0a2        	movi	a10, 102
4008146e:	fc7f81        	l32r	a8, 4008066c <_iram_text_start+0x11c>
40081471:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DIV_7_0, bb_cfg->div7_0);
40081474:	0402d2        	l8ui	a13, a2, 4
40081477:	3c0c      	movi.n	a12, 3
40081479:	4b0c      	movi.n	a11, 4
4008147b:	66a0a2        	movi	a10, 102
4008147e:	fc7b81        	l32r	a8, 4008066c <_iram_text_start+0x11c>
40081481:	0008e0        	callx8	a8
	I2C_WRITEREG_RTC(I2C_BBPLL, I2C_BBPLL_OC_DCUR, ((bb_cfg->bw << 6) | bb_cfg->dcur));
40081484:	0802d2        	l8ui	a13, a2, 8
40081487:	070222        	l8ui	a2, a2, 7
4008148a:	11dda0        	slli	a13, a13, 6
4008148d:	20dd20        	or	a13, a13, a2
40081490:	74d0d0        	extui	a13, a13, 0, 8
40081493:	5c0c      	movi.n	a12, 5
40081495:	4b0c      	movi.n	a11, 4
40081497:	66a0a2        	movi	a10, 102
4008149a:	fc7481        	l32r	a8, 4008066c <_iram_text_start+0x11c>
4008149d:	0008e0        	callx8	a8
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400814a0:	fc6f21        	l32r	a2, 4008065c <_iram_text_start+0x10c>
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400814a3:	fc6751        	l32r	a5, 40080640 <_iram_text_start+0xf0>
	DPORT_REG_WRITE(DPORT_CPU_PER_CONF_REG, cpu_period_sel);
400814a6:	0020c0        	memw
400814a9:	0249      	s32i.n	a4, a2, 0
	REG_SET_FIELD(RTC_CNTL_CLK_CONF_REG, RTC_CNTL_SOC_CLK_SEL, RTC_CNTL_SOC_CLK_SEL_PLL);
400814ab:	fc6041        	l32r	a4, 4008062c <_iram_text_start+0xdc>
400814ae:	0020c0        	memw
400814b1:	0428      	l32i.n	a2, a4, 0
400814b3:	102250        	and	a2, a2, a5
400814b6:	fc6a51        	l32r	a5, 40080660 <_iram_text_start+0x110>
400814b9:	202250        	or	a2, a2, a5
400814bc:	0020c0        	memw
400814bf:	0429      	s32i.n	a2, a4, 0
	REG_WRITE(APB_CTRL_PLL_TICK_CONF_REG, PLL_APB_CLK_FREQ - 1);
400814c1:	fc6821        	l32r	a2, 40080664 <_iram_text_start+0x114>
400814c4:	f44c      	movi.n	a4, 79
400814c6:	0020c0        	memw
400814c9:	0249      	s32i.n	a4, a2, 0

	/* Re-calculate the CCOUNT register value to make time calculation correct.
	 * This should be updated on each frequency change
	 * New CCOUNT = Current CCOUNT * (new freq / old freq)
	 */
	XTHAL_SET_CCOUNT((uint64_t)XTHAL_GET_CCOUNT() * cfg->cpu_freq / xtal_freq[cfg->xtal_freq_sel]);
400814cb:	03ea40        	rsr.ccount	a4
400814ce:	13a8      	l32i.n	a10, a3, 4
400814d0:	2338      	l32i.n	a3, a3, 8
400814d2:	312f40        	srai	a2, a4, 31
400814d5:	1153e0        	slli	a5, a3, 2
400814d8:	fc5631        	l32r	a3, 40080630 <_iram_text_start+0xe0>
400814db:	8222a0        	mull	a2, a2, a10
400814de:	a2ba40        	muluh	a11, a10, a4
400814e1:	335a      	add.n	a3, a3, a5
400814e3:	03c8      	l32i.n	a12, a3, 0
400814e5:	82aa40        	mull	a10, a10, a4
400814e8:	0d0c      	movi.n	a13, 0
400814ea:	80b2b0        	add	a11, a2, a11
400814ed:	025625        	call8	40083a50 <__udivdi3>
400814f0:	13eaa0        	wsr.ccount	a10
	return 0;
400814f3:	020c      	movi.n	a2, 0
}
400814f5:	f01d      	retw.n
	...

400814f8 <clock_control_esp32_off>:
{
400814f8:	004136        	entry	a1, 32
	uint32_t bank = GET_REG_BANK(sys);
400814fb:	419530        	srli	a9, a3, 5
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
400814fe:	180c      	movi.n	a8, 1
40081500:	401300        	ssl	a3
40081503:	a13800        	sll	a3, a8
40081506:	1189d0        	slli	a8, a9, 3
40081509:	fc4791        	l32r	a9, 40080628 <_iram_text_start+0xd8>
}
4008150c:	020c      	movi.n	a2, 0
	esp32_clear_mask32(BIT(offset), clock_control_regs[bank].clk);
4008150e:	998a      	add.n	a9, a9, a8
	return *(volatile uint32_t *)addr;
40081510:	09a8      	l32i.n	a10, a9, 0
40081512:	f87c      	movi.n	a8, -1
40081514:	0020c0        	memw
40081517:	0ab8      	l32i.n	a11, a10, 0
40081519:	308830        	xor	a8, a8, a3
4008151c:	1088b0        	and	a8, a8, a11
	*(volatile uint32_t *)addr = data;
4008151f:	0020c0        	memw
40081522:	0a89      	s32i.n	a8, a10, 0
	return *(volatile uint32_t *)addr;
40081524:	1988      	l32i.n	a8, a9, 4
40081526:	0020c0        	memw
40081529:	0898      	l32i.n	a9, a8, 0
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
4008152b:	203390        	or	a3, a3, a9
	*(volatile uint32_t *)addr = data;
4008152e:	0020c0        	memw
40081531:	0839      	s32i.n	a3, a8, 0
}
40081533:	f01d      	retw.n
40081535:	000000        	ill

40081538 <set_reg>:

	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
}

static int set_reg(uint32_t pin, uint32_t clr_mask, uint32_t set_mask)
{
40081538:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008153b:	782c      	movi.n	a8, 39
	volatile uint32_t *reg = reg_for_pin(pin);
	uint32_t v;

	if (!reg) {
		return -EINVAL;
4008153d:	aa6c      	movi.n	a10, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008153f:	253827        	bltu	a8, a2, 40081568 <set_reg+0x30>
	off = pin_mux_off[pin];
40081542:	fc4b91        	l32r	a9, 40080670 <_iram_text_start+0x120>
40081545:	992a      	add.n	a9, a9, a2
40081547:	000992        	l8ui	a9, a9, 0
	if (!off) {
4008154a:	a99c      	beqz.n	a9, 40081568 <set_reg+0x30>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
4008154c:	fc4a21        	l32r	a2, 40080674 <_iram_text_start+0x124>
	}

	v = *reg;
	v &= ~clr_mask;
4008154f:	f87c      	movi.n	a8, -1
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
40081551:	992a      	add.n	a9, a9, a2
	v = *reg;
40081553:	0020c0        	memw
40081556:	0928      	l32i.n	a2, a9, 0
	v &= ~clr_mask;
40081558:	308830        	xor	a8, a8, a3
4008155b:	108820        	and	a8, a8, a2
	v |= set_mask;
4008155e:	208840        	or	a8, a8, a4
	*reg = v;
40081561:	0020c0        	memw
40081564:	0989      	s32i.n	a8, a9, 0

	return 0;
40081566:	0a0c      	movi.n	a10, 0
}
40081568:	0a2d      	mov.n	a2, a10
4008156a:	f01d      	retw.n

4008156c <pinmux_set>:

static int pinmux_set(const struct device *dev, uint32_t pin, uint32_t func)
{
4008156c:	004136        	entry	a1, 32
4008156f:	20a330        	or	a10, a3, a3
	 * value due to a deficiency in the pinmux API.  This setting is
	 * part of the GPIO API.
	 */

	if (func > 6) {
		return -EINVAL;
40081572:	eaaf22        	movi	a2, -22
	if (func > 6) {
40081575:	1174f6        	bgeui	a4, 7, 4008158a <pinmux_set+0x1e>
	}

	return set_reg(pin, MCU_SEL_M, func<<MCU_SEL_S | 2<<FUN_DRV_S);
40081578:	fc40c1        	l32r	a12, 40080678 <_iram_text_start+0x128>
4008157b:	114440        	slli	a4, a4, 12
4008157e:	fc3fb1        	l32r	a11, 4008067c <_iram_text_start+0x12c>
40081581:	20c4c0        	or	a12, a4, a12
40081584:	fffb25        	call8	40081538 <set_reg>
40081587:	202aa0        	or	a2, a10, a10
}
4008158a:	f01d      	retw.n

4008158c <pinmux_input>:
	return -EINVAL;
}

#define CFG(id)   ((GPIO_ ## id ## _REG) & 0xff)
static int pinmux_input(const struct device *dev, uint32_t pin, uint8_t func)
{
4008158c:	004136        	entry	a1, 32
	static const uint8_t offs[2][3] = {
		{ CFG(ENABLE1_W1TC), CFG(ENABLE1_W1TS), 32 },
		{ CFG(ENABLE_W1TC), CFG(ENABLE_W1TS), 0 },
	};
	const uint8_t *line = offs[pin < 32];
4008158f:	f81c      	movi.n	a8, 31
{
40081591:	744040        	extui	a4, a4, 0, 8
	const uint8_t *line = offs[pin < 32];
40081594:	00a052        	movi	a5, 0
40081597:	013837        	bltu	a8, a3, 4008159c <pinmux_input+0x10>
4008159a:	350c      	movi.n	a5, 3
4008159c:	fc3981        	l32r	a8, 40080680 <_iram_text_start+0x130>
	/* Since PINMUX_INPUT_ENABLED == 1 and PINMUX_OUTPUT_ENABLED == 0,
	 * we can not set a gpio port as input and output at the same time,
	 * So we always set the gpio as input. Thus, the gpio can be used on
	 * I2C drivers for example.
	 */
	r = set_reg(pin, 0, FUN_IE);
4008159f:	00a2c2        	movi	a12, 0x200
400815a2:	0b0c      	movi.n	a11, 0
400815a4:	03ad      	mov.n	a10, a3
	const uint8_t *line = offs[pin < 32];
400815a6:	805580        	add	a5, a5, a8
	r = set_reg(pin, 0, FUN_IE);
400815a9:	fff8e5        	call8	40081538 <set_reg>
	if (func == PINMUX_INPUT_ENABLED) {
400815ac:	051466        	bnei	a4, 1, 400815b5 <pinmux_input+0x29>
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[0]);
400815af:	000582        	l8ui	a8, a5, 0
400815b2:	000286        	j	400815c0 <pinmux_input+0x34>
	} else if (func == PINMUX_OUTPUT_ENABLED) {
400815b5:	74ec      	bnez.n	a4, 400815e0 <pinmux_input+0x54>
		if (pin >= 34U && pin <= 39U) {
400815b7:	dec342        	addi	a4, a3, -34
400815ba:	2264b6        	bltui	a4, 6, 400815e0 <pinmux_input+0x54>
			/* These pins are input only */
			return -EINVAL;
		}
		reg = (uint32_t *)(DR_REG_GPIO_BASE + line[1]);
400815bd:	010582        	l8ui	a8, a5, 1
400815c0:	fc3141        	l32r	a4, 40080684 <_iram_text_start+0x134>
400815c3:	884a      	add.n	a8, a8, a4
	} else {
		return -EINVAL;
	}

	if (r < 0) {
400815c5:	019a96        	bltz	a10, 400815e2 <pinmux_input+0x56>
		return r;
	}

	*reg = BIT(pin - line[2]);
400815c8:	020542        	l8ui	a4, a5, 2
400815cb:	150c      	movi.n	a5, 1
400815cd:	c03340        	sub	a3, a3, a4
400815d0:	401300        	ssl	a3
400815d3:	a13500        	sll	a3, a5
400815d6:	0020c0        	memw
400815d9:	0839      	s32i.n	a3, a8, 0

	ARG_UNUSED(dev);
	return 0;
400815db:	0a0c      	movi.n	a10, 0
400815dd:	000046        	j	400815e2 <pinmux_input+0x56>
		return -EINVAL;
400815e0:	aa6c      	movi.n	a10, -22
}
400815e2:	0a2d      	mov.n	a2, a10
400815e4:	f01d      	retw.n
	...

400815e8 <pinmux_initialize>:
	.pullup = pinmux_pullup,
	.input = pinmux_input
};

static int pinmux_initialize(const struct device *device)
{
400815e8:	004136        	entry	a1, 32
	uint32_t pin;

	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400815eb:	020c      	movi.n	a2, 0
		pinmux_set(NULL, pin, 0);
400815ed:	203220        	or	a3, a2, a2
400815f0:	20b220        	or	a11, a2, a2
400815f3:	20c330        	or	a12, a3, a3
400815f6:	20a330        	or	a10, a3, a3
400815f9:	fff725        	call8	4008156c <pinmux_set>
	for (pin = 0U; pin < ARRAY_SIZE(pin_mux_off); pin++) {
400815fc:	221b      	addi.n	a2, a2, 1
400815fe:	882c      	movi.n	a8, 40
40081600:	ec9287        	bne	a2, a8, 400815f0 <pinmux_initialize+0x8>
	}

	ARG_UNUSED(device);
	return 0;
}
40081603:	020c      	movi.n	a2, 0
40081605:	f01d      	retw.n
	...

40081608 <pinmux_pullup>:
{
40081608:	004136        	entry	a1, 32
4008160b:	744040        	extui	a4, a4, 0, 8
4008160e:	03ad      	mov.n	a10, a3
	switch (func) {
40081610:	848c      	beqz.n	a4, 4008161c <pinmux_pullup+0x14>
40081612:	0f1426        	beqi	a4, 1, 40081625 <pinmux_pullup+0x1d>
	return -EINVAL;
40081615:	aa6c      	movi.n	a10, -22
40081617:	0004c6        	j	4008162e <pinmux_pullup+0x26>
4008161a:	c20000        	quou	a0, a0, a0
		return set_reg(pin, FUN_PU, FUN_PD);
4008161d:	b280a0        	mulsh	a8, a0, a10
40081620:	4600a1        	l32r	a10, 40052e20 <esp32_rom_gpio_matrix_out+0x48f14>
40081623:	c20001        	l32r	a0, 40071e24 <esp32_rom_gpio_matrix_out+0x67f18>
		return set_reg(pin, FUN_PD, FUN_PU);
40081626:	b200a1        	l32r	a10, 4006de28 <esp32_rom_gpio_matrix_out+0x63f1c>
40081629:	e580a0        	extui	a8, a10, 16, 15
4008162c:	2dfff0        	lsi	f15, a15, 180
}
4008162f:	1d0a      	add.n	a1, a13, a0
40081631:	0000f0        	callx12	a0

40081634 <pinmux_get>:
{
40081634:	004136        	entry	a1, 32
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
40081637:	782c      	movi.n	a8, 39
		return -EINVAL;
40081639:	a26c      	movi.n	a2, -22
	if (pin >= ARRAY_SIZE(pin_mux_off)) {
4008163b:	1d3837        	bltu	a8, a3, 4008165c <pinmux_get+0x28>
	off = pin_mux_off[pin];
4008163e:	fc0c21        	l32r	a2, 40080670 <_iram_text_start+0x120>
40081641:	223a      	add.n	a2, a2, a3
40081643:	000282        	l8ui	a8, a2, 0
		return -EINVAL;
40081646:	a26c      	movi.n	a2, -22
	if (!off) {
40081648:	089c      	beqz.n	a8, 4008165c <pinmux_get+0x28>
	return (uint32_t *)(DT_INST_REG_ADDR(0) + off);
4008164a:	fc0a21        	l32r	a2, 40080674 <_iram_text_start+0x124>
4008164d:	882a      	add.n	a8, a8, a2
	*func = (*reg & MCU_SEL_M) >> MCU_SEL_S;
4008164f:	0020c0        	memw
40081652:	0828      	l32i.n	a2, a8, 0
40081654:	242c20        	extui	a2, a2, 12, 3
40081657:	0429      	s32i.n	a2, a4, 0
	return 0;
40081659:	00a022        	movi	a2, 0
}
4008165c:	f01d      	retw.n
	...

40081660 <ccompare_isr>:
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
	return val;
}

static void ccompare_isr(const void *arg)
{
40081660:	004136        	entry	a1, 32
	z_xt_ints_off(1 << irq);
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081663:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081666:	03eaa0        	rsr.ccount	a10
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount();
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
40081669:	fc0791        	l32r	a9, 40080688 <_iram_text_start+0x138>
4008166c:	fc0881        	l32r	a8, 4008068c <_iram_text_start+0x13c>
4008166f:	0029b2        	l32i	a11, a9, 0
40081672:	c0aab0        	sub	a10, a10, a11
40081675:	a2aa80        	muluh	a10, a10, a8

	last_count += dticks * CYC_PER_TICK;
40081678:	fc0681        	l32r	a8, 40080690 <_iram_text_start+0x140>
	uint32_t dticks = (curr - last_count) / CYC_PER_TICK;
4008167b:	41a9a0        	srli	a10, a10, 9
	last_count += dticks * CYC_PER_TICK;
4008167e:	828a80        	mull	a8, a10, a8
40081681:	8088b0        	add	a8, a8, a11
40081684:	006982        	s32i	a8, a9, 0
	return key;
}

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	XTOS_RESTORE_INTLEVEL(key);
40081687:	13e6c0        	wsr.ps	a12
4008168a:	002010        	rsync
		}
		set_ccompare(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
4008168d:	01f5a5        	call8	400835e8 <z_clock_announce>
}
40081690:	f01d      	retw.n
	...

40081694 <z_clock_driver_init>:

int z_clock_driver_init(const struct device *device)
{
40081694:	004136        	entry	a1, 32
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
40081697:	03ea80        	rsr.ccount	a8
	ARG_UNUSED(device);

	IRQ_CONNECT(TIMER_IRQ, 0, ccompare_isr, 0, 0);
	set_ccompare(ccount() + CYC_PER_TICK);
4008169a:	fbfd91        	l32r	a9, 40080690 <_iram_text_start+0x140>
4008169d:	889a      	add.n	a8, a8, a9
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
4008169f:	13f180        	wsr.ccompare1	a8
 */
static inline void z_xt_ints_on(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400816a2:	03e480        	rsr.intenable	a8
	val |= mask;
400816a5:	fbfb91        	l32r	a9, 40080694 <_iram_text_start+0x144>
400816a8:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400816ab:	13e480        	wsr.intenable	a8
400816ae:	002010        	rsync
	irq_enable(TIMER_IRQ);
	return 0;
}
400816b1:	020c      	movi.n	a2, 0
400816b3:	f01d      	retw.n
400816b5:	000000        	ill

400816b8 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
400816b8:	004136        	entry	a1, 32
	ARG_UNUSED(idle);

#if defined(CONFIG_TICKLESS_KERNEL)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
400816bb:	020266        	bnei	a2, -1, 400816c1 <z_clock_set_timeout+0x9>
400816be:	fbf621        	l32r	a2, 40080698 <_iram_text_start+0x148>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400816c1:	0063c0        	rsil	a12, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
400816c4:	03eab0        	rsr.ccount	a11

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t curr = ccount(), cyc, adj;

	/* Round up to next tick boundary */
	cyc = ticks * CYC_PER_TICK;
400816c7:	080c      	movi.n	a8, 0
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
400816c9:	220b      	addi.n	a2, a2, -1
	cyc = ticks * CYC_PER_TICK;
400816cb:	532280        	max	a2, a2, a8
400816ce:	fbf281        	l32r	a8, 40080698 <_iram_text_start+0x148>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816d1:	fbf2a1        	l32r	a10, 4008069c <_iram_text_start+0x14c>
	cyc = ticks * CYC_PER_TICK;
400816d4:	432280        	min	a2, a2, a8
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816d7:	fbec81        	l32r	a8, 40080688 <_iram_text_start+0x138>
	cyc = ticks * CYC_PER_TICK;
400816da:	fbedd1        	l32r	a13, 40080690 <_iram_text_start+0x140>
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816dd:	0898      	l32i.n	a9, a8, 0
	cyc = ticks * CYC_PER_TICK;
400816df:	8222d0        	mull	a2, a2, a13
	adj = (curr - last_count) + (CYC_PER_TICK - 1);
400816e2:	c0aa90        	sub	a10, a10, a9
400816e5:	aaba      	add.n	a10, a10, a11
	if (cyc <= MAX_CYC - adj) {
400816e7:	f87c      	movi.n	a8, -1
400816e9:	30e8a0        	xor	a14, a8, a10
400816ec:	013e27        	bltu	a14, a2, 400816f1 <z_clock_set_timeout+0x39>
		cyc += adj;
400816ef:	82aa      	add.n	a8, a2, a10
	} else {
		cyc = MAX_CYC;
	}
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400816f1:	fbe621        	l32r	a2, 4008068c <_iram_text_start+0x13c>
400816f4:	a28820        	muluh	a8, a8, a2
	cyc += last_count;

	if ((cyc - curr) < MIN_DELAY) {
400816f7:	e7a322        	movi	a2, 0x3e7
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
400816fa:	418980        	srli	a8, a8, 9
400816fd:	8288d0        	mull	a8, a8, a13
	cyc += last_count;
40081700:	808980        	add	a8, a9, a8
	if ((cyc - curr) < MIN_DELAY) {
40081703:	c0b8b0        	sub	a11, a8, a11
40081706:	0232b7        	bltu	a2, a11, 4008170c <z_clock_set_timeout+0x54>
		cyc += CYC_PER_TICK;
40081709:	8088d0        	add	a8, a8, a13
	__asm__ volatile ("wsr.CCOMPARE" STRINGIFY(CONFIG_XTENSA_TIMER_ID) " %0"
4008170c:	13f180        	wsr.ccompare1	a8
	XTOS_RESTORE_INTLEVEL(key);
4008170f:	13e6c0        	wsr.ps	a12
40081712:	002010        	rsync
	}

	set_ccompare(cyc);
	k_spin_unlock(&lock, key);
#endif
}
40081715:	f01d      	retw.n
	...

40081718 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
40081718:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008171b:	006380        	rsil	a8, 3
	__asm__ volatile ("rsr.CCOUNT %0" : "=r"(val));
4008171e:	03ea20        	rsr.ccount	a2
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = (ccount() - last_count) / CYC_PER_TICK;
40081721:	fbd991        	l32r	a9, 40080688 <_iram_text_start+0x138>
40081724:	0998      	l32i.n	a9, a9, 0
40081726:	c02290        	sub	a2, a2, a9
40081729:	fbd891        	l32r	a9, 4008068c <_iram_text_start+0x13c>
4008172c:	a22290        	muluh	a2, a2, a9
4008172f:	412920        	srli	a2, a2, 9
	XTOS_RESTORE_INTLEVEL(key);
40081732:	13e680        	wsr.ps	a8
40081735:	002010        	rsync

	k_spin_unlock(&lock, key);
	return ret;
}
40081738:	f01d      	retw.n
	...

4008173c <z_xtensa_fatal_error>:
	return "na";
#endif
}

void z_xtensa_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
4008173c:	004136        	entry	a1, 32
	if (esf) {
4008173f:	338c      	beqz.n	a3, 40081746 <z_xtensa_fatal_error+0xa>
		z_xtensa_dump_stack(esf);
40081741:	03ad      	mov.n	a10, a3
40081743:	0203a5        	call8	4008377c <z_xtensa_dump_stack>
	}

	z_fatal_error(reason, esf);
40081746:	20b330        	or	a11, a3, a3
40081749:	20a220        	or	a10, a2, a2
4008174c:	010925        	call8	400827e0 <z_fatal_error>
}
4008174f:	000090        	retw
	...

40081754 <xtensa_spill_reg_windows>:
        SPILL_ALL_WINDOWS
40081754:	10ccc0        	and	a12, a12, a12
40081757:	408030        	rotw	3
4008175a:	10ccc0        	and	a12, a12, a12
4008175d:	408030        	rotw	3
40081760:	10ccc0        	and	a12, a12, a12
40081763:	408030        	rotw	3
40081766:	10ccc0        	and	a12, a12, a12
40081769:	408030        	rotw	3
4008176c:	10ccc0        	and	a12, a12, a12
4008176f:	408040        	rotw	4
        ret
40081772:	f00d      	ret.n

40081774 <xtensa_save_high_regs>:
	rsr.WINDOWSTART a2
40081774:	034920        	rsr.windowstart	a2
	slli a3, a2, (XCHAL_NUM_AREGS / 4)
40081777:	113200        	slli	a3, a2, 16
	or a2, a2, a3
4008177a:	202230        	or	a2, a2, a3
	rsr.WINDOWBASE a3
4008177d:	034830        	rsr.windowbase	a3
	ssr a3
40081780:	400300        	ssr	a3
	srl a2, a2
40081783:	912020        	srl	a2, a2
	mov a3, a1 /* Stash our original stack pointer */
40081786:	013d      	mov.n	a3, a1
	bbsi a2, 1, _high_gpr_spill_done
40081788:	28e217        	bbsi	a2, 1, 400817b4 <_high_gpr_spill_done>
	addi a1, a1, -16
4008178b:	f0c112        	addi	a1, a1, -16
	s32i a4, a1, 0
4008178e:	0149      	s32i.n	a4, a1, 0
	s32i a5, a1, 4
40081790:	1159      	s32i.n	a5, a1, 4
	s32i a6, a1, 8
40081792:	2169      	s32i.n	a6, a1, 8
	s32i a7, a1, 12
40081794:	3179      	s32i.n	a7, a1, 12
	bbsi a2, 2, _high_gpr_spill_done
40081796:	1ae227        	bbsi	a2, 2, 400817b4 <_high_gpr_spill_done>
	addi a1, a1, -16
40081799:	f0c112        	addi	a1, a1, -16
	s32i a8, a1, 0
4008179c:	0189      	s32i.n	a8, a1, 0
	s32i a9, a1, 4
4008179e:	1199      	s32i.n	a9, a1, 4
	s32i a10, a1, 8
400817a0:	21a9      	s32i.n	a10, a1, 8
	s32i a11, a1, 12
400817a2:	31b9      	s32i.n	a11, a1, 12
	bbsi a2, 3, _high_gpr_spill_done
400817a4:	0ce237        	bbsi	a2, 3, 400817b4 <_high_gpr_spill_done>
	addi a1, a1, -16
400817a7:	f0c112        	addi	a1, a1, -16
	s32i a12, a1, 0
400817aa:	01c9      	s32i.n	a12, a1, 0
	s32i a13, a1, 4
400817ac:	11d9      	s32i.n	a13, a1, 4
	s32i a14, a1, 8
400817ae:	0261e2        	s32i	a14, a1, 8
	s32i a15, a1, 12
400817b1:	0361f2        	s32i	a15, a1, 12

400817b4 <_high_gpr_spill_done>:
	addi a1, a1, -4
400817b4:	fcc112        	addi	a1, a1, -4
	s32i a3, a1, 0
400817b7:	0139      	s32i.n	a3, a1, 0
	ret
400817b9:	f00d      	ret.n
	...

400817bc <xtensa_restore_high_regs>:
	l32i a2, a1, 0
400817bc:	0128      	l32i.n	a2, a1, 0
	addi a1, a1, 4
400817be:	114b      	addi.n	a1, a1, 4
	mov a3, a2
400817c0:	023d      	mov.n	a3, a2
	beq a1, a2, _high_restore_done
400817c2:	261127        	beq	a1, a2, 400817ec <_high_restore_done>
	addi a2, a2, -16
400817c5:	f0c222        	addi	a2, a2, -16
	l32i a4, a2, 0
400817c8:	0248      	l32i.n	a4, a2, 0
	l32i a5, a2, 4
400817ca:	1258      	l32i.n	a5, a2, 4
	l32i a6, a2, 8
400817cc:	2268      	l32i.n	a6, a2, 8
	l32i a7, a2, 12
400817ce:	3278      	l32i.n	a7, a2, 12
	beq a1, a2, _high_restore_done
400817d0:	181127        	beq	a1, a2, 400817ec <_high_restore_done>
	addi a2, a2, -16
400817d3:	f0c222        	addi	a2, a2, -16
	l32i a8, a2, 0
400817d6:	0288      	l32i.n	a8, a2, 0
	l32i a9, a2, 4
400817d8:	1298      	l32i.n	a9, a2, 4
	l32i a10, a2, 8
400817da:	22a8      	l32i.n	a10, a2, 8
	l32i a11, a2, 12
400817dc:	32b8      	l32i.n	a11, a2, 12
	beq a1, a2, _high_restore_done
400817de:	0a1127        	beq	a1, a2, 400817ec <_high_restore_done>
	addi a2, a2, -16
400817e1:	f0c222        	addi	a2, a2, -16
	l32i a12, a2, 0
400817e4:	02c8      	l32i.n	a12, a2, 0
	l32i a13, a2, 4
400817e6:	12d8      	l32i.n	a13, a2, 4
	l32i a14, a2, 8
400817e8:	22e8      	l32i.n	a14, a2, 8
	l32i a15, a2, 12
400817ea:	32f8      	l32i.n	a15, a2, 12

400817ec <_high_restore_done>:
	mov a1, a3 /* Original stack */
400817ec:	031d      	mov.n	a1, a3
	ret
400817ee:	f00d      	ret.n
	...

400817f1 <_restore_context>:
	call0 xtensa_restore_high_regs
400817f1:	fffc85        	call0	400817bc <xtensa_restore_high_regs>
	l32i a0, a1, BSA_PC_OFF
400817f4:	6108      	l32i.n	a0, a1, 24
	wsr.EPC6 a0
400817f6:	13b600        	wsr.epc6	a0
	l32i a0, a1, BSA_PS_OFF
400817f9:	5108      	l32i.n	a0, a1, 20
	wsr.EPS6 a0
400817fb:	13c600        	wsr.eps6	a0
	l32i a0, a1, BSA_SAR_OFF
400817fe:	4108      	l32i.n	a0, a1, 16
	wsr.SAR a0
40081800:	130300        	wsr.sar	a0
	l32i a0, a1, BSA_LBEG_OFF
40081803:	3108      	l32i.n	a0, a1, 12
	wsr.LBEG a0
40081805:	130000        	wsr.lbeg	a0
	l32i a0, a1, BSA_LEND_OFF
40081808:	2108      	l32i.n	a0, a1, 8
	wsr.LEND a0
4008180a:	130100        	wsr.lend	a0
	l32i a0, a1, BSA_LCOUNT_OFF
4008180d:	1108      	l32i.n	a0, a1, 4
	wsr.LCOUNT a0
4008180f:	130200        	wsr.lcount	a0
	l32i a0, a1, BSA_SCOMPARE1_OFF
40081812:	0108      	l32i.n	a0, a1, 0
	wsr.SCOMPARE1 a0
40081814:	130c00        	wsr.scompare1	a0
	rsync
40081817:	002010        	rsync
	l32i a0, a1, BSA_A0_OFF
4008181a:	7108      	l32i.n	a0, a1, 28
	l32i a2, a1, BSA_A2_OFF
4008181c:	9128      	l32i.n	a2, a1, 36
	l32i a3, a1, BSA_A3_OFF
4008181e:	a138      	l32i.n	a3, a1, 40
	addi a1, a1, BASE_SAVE_AREA_SIZE
40081820:	3cc112        	addi	a1, a1, 60
	rfi 6
40081823:	003610        	rfi	6
	...

40081828 <xtensa_switch>:
	entry a1, 16
40081828:	002136        	entry	a1, 16
	SPILL_ALL_WINDOWS
4008182b:	10ccc0        	and	a12, a12, a12
4008182e:	408030        	rotw	3
40081831:	10ccc0        	and	a12, a12, a12
40081834:	408030        	rotw	3
40081837:	10ccc0        	and	a12, a12, a12
4008183a:	408030        	rotw	3
4008183d:	10ccc0        	and	a12, a12, a12
40081840:	408030        	rotw	3
40081843:	10ccc0        	and	a12, a12, a12
40081846:	408040        	rotw	4
	addi a1, a1, -BASE_SAVE_AREA_SIZE
40081849:	c4c112        	addi	a1, a1, -60
	s32i a0, a1, BSA_A0_OFF
4008184c:	7109      	s32i.n	a0, a1, 28
	s32i a2, a1, BSA_A2_OFF
4008184e:	9129      	s32i.n	a2, a1, 36
	s32i a3, a1, BSA_A3_OFF
40081850:	a139      	s32i.n	a3, a1, 40
	ODD_REG_SAVE
40081852:	030300        	rsr.sar	a0
40081855:	4109      	s32i.n	a0, a1, 16
40081857:	030000        	rsr.lbeg	a0
4008185a:	3109      	s32i.n	a0, a1, 12
4008185c:	030100        	rsr.lend	a0
4008185f:	2109      	s32i.n	a0, a1, 8
40081861:	030200        	rsr.lcount	a0
40081864:	1109      	s32i.n	a0, a1, 4
40081866:	030c00        	rsr.scompare1	a0
40081869:	0109      	s32i.n	a0, a1, 0
	rsr.PS a0
4008186b:	03e600        	rsr.ps	a0
	s32i a0, a1, BSA_PS_OFF
4008186e:	5109      	s32i.n	a0, a1, 20
	movi a0, _switch_restore_pc
40081870:	fb8c01        	l32r	a0, 400806a0 <_iram_text_start+0x150>
	s32i a0, a1, BSA_PC_OFF
40081873:	6109      	s32i.n	a0, a1, 24
	call0 xtensa_save_high_regs
40081875:	ffefc5        	call0	40081774 <xtensa_save_high_regs>
	l32i a2, a1, 0
40081878:	0128      	l32i.n	a2, a1, 0
	l32i a3, a2, BSA_A3_OFF
4008187a:	a238      	l32i.n	a3, a2, 40
	s32i a1, a3, 0
4008187c:	0319      	s32i.n	a1, a3, 0
	l32i a1, a2, BSA_A2_OFF
4008187e:	9218      	l32i.n	a1, a2, 36
	j _restore_context
40081880:	ffdb46        	j	400817f1 <_restore_context>

40081883 <_switch_restore_pc>:
	retw
40081883:	f01d      	retw.n
40081885:	000000        	ill

40081888 <_handle_excint>:
	EXCINT_HANDLER CONFIG_XTENSA_KERNEL_CPU_PTR_SR, ___cpu_t_nested_OFFSET, ___cpu_t_irq_stack_OFFSET
40081888:	8129      	s32i.n	a2, a1, 32
4008188a:	030300        	rsr.sar	a0
4008188d:	4109      	s32i.n	a0, a1, 16
4008188f:	030000        	rsr.lbeg	a0
40081892:	3109      	s32i.n	a0, a1, 12
40081894:	030100        	rsr.lend	a0
40081897:	2109      	s32i.n	a0, a1, 8
40081899:	030200        	rsr.lcount	a0
4008189c:	1109      	s32i.n	a0, a1, 4
4008189e:	030c00        	rsr.scompare1	a0
400818a1:	0109      	s32i.n	a0, a1, 0
400818a3:	ffed05        	call0	40081774 <xtensa_save_high_regs>
400818a6:	0128      	l32i.n	a2, a1, 0
400818a8:	8228      	l32i.n	a2, a2, 32
400818aa:	03e600        	rsr.ps	a0
400818ad:	f30c      	movi.n	a3, 15
400818af:	100030        	and	a0, a0, a3
400818b2:	a0cc      	bnez.n	a0, 400818c0 <_not_l1>
400818b4:	03e600        	rsr.ps	a0
400818b7:	01a032        	movi	a3, 1
400818ba:	200030        	or	a0, a0, a3
400818bd:	13e600        	wsr.ps	a0

400818c0 <_not_l1>:
400818c0:	03e600        	rsr.ps	a0
400818c3:	f36c      	movi.n	a3, -17
400818c5:	100030        	and	a0, a0, a3
400818c8:	13e600        	wsr.ps	a0
400818cb:	002010        	rsync
400818ce:	03f430        	rsr.misc0	a3
400818d1:	0308      	l32i.n	a0, a3, 0
400818d3:	708c      	beqz.n	a0, 400818de <_switch_stacks_3>
400818d5:	001b      	addi.n	a0, a0, 1
400818d7:	0309      	s32i.n	a0, a3, 0
400818d9:	013d      	mov.n	a3, a1
400818db:	000146        	j	400818e4 <_do_call_3>

400818de <_switch_stacks_3>:
400818de:	001b      	addi.n	a0, a0, 1
400818e0:	0309      	s32i.n	a0, a3, 0
400818e2:	1338      	l32i.n	a3, a3, 4

400818e4 <_do_call_3>:
400818e4:	036d      	mov.n	a6, a3
400818e6:	01ad      	mov.n	a10, a1
400818e8:	013d      	mov.n	a3, a1
400818ea:	02bd      	mov.n	a11, a2
400818ec:	0118      	l32i.n	a1, a1, 0
400818ee:	3cc112        	addi	a1, a1, 60
400818f1:	000095        	call4	400818fc <_xstack_call0_5>
400818f4:	031d      	mov.n	a1, a3
400818f6:	062d      	mov.n	a2, a6
400818f8:	0003c6        	j	4008190b <_xstack_returned_5>
	...

400818fc <_xstack_call0_5>:
400818fc:	002136        	entry	a1, 16
400818ff:	021d      	mov.n	a1, a2
40081901:	000055        	call4	40081908 <_xstack_call1_5>
40081904:	062d      	mov.n	a2, a6
40081906:	f01d      	retw.n

40081908 <_xstack_call1_5>:
40081908:	0007a0        	jx	a7

4008190b <_xstack_returned_5>:
4008190b:	006700        	rsil	a0, 7
4008190e:	03f430        	rsr.misc0	a3
40081911:	0308      	l32i.n	a0, a3, 0
40081913:	000b      	addi.n	a0, a0, -1
40081915:	0309      	s32i.n	a0, a3, 0
40081917:	251617        	beq	a6, a1, 40081940 <_restore_3>
4008191a:	0118      	l32i.n	a1, a1, 0
4008191c:	3cc112        	addi	a1, a1, 60
4008191f:	10ccc0        	and	a12, a12, a12
40081922:	408030        	rotw	3
40081925:	10ccc0        	and	a12, a12, a12
40081928:	408030        	rotw	3
4008192b:	10ccc0        	and	a12, a12, a12
4008192e:	408030        	rotw	3
40081931:	10ccc0        	and	a12, a12, a12
40081934:	408030        	rotw	3
40081937:	10ccc0        	and	a12, a12, a12
4008193a:	408040        	rotw	4
4008193d:	201660        	or	a1, a6, a6

40081940 <_restore_3>:
40081940:	ffab46        	j	400817f1 <_restore_context>
	...

40081944 <xtensa_init_stack>:
LOG_MODULE_DECLARE(os);

void *xtensa_init_stack(int *stack_top,
			void (*entry)(void *, void *, void *),
			void *arg1, void *arg2, void *arg3)
{
40081944:	004136        	entry	a1, 32
	 * arrange to enter the function with a CALLINC of 1 and a
	 * stack pointer 16 bytes above the top, so its ENTRY at the
	 * start will decrement the stack pointer by 16.
	 */
	const int bsasz = BASE_SAVE_AREA_SIZE - 16;
	void **bsa = (void **) (((char *) stack_top) - bsasz);
40081947:	d4c272        	addi	a7, a2, -44

	(void)memset(bsa, 0, bsasz);
4008194a:	cc2c      	movi.n	a12, 44
4008194c:	0b0c      	movi.n	a11, 0
4008194e:	20a770        	or	a10, a7, a7
40081951:	01e4e5        	call8	400837a0 <memset>

	bsa[BSA_PC_OFF/4] = z_thread_entry;
40081954:	fb5491        	l32r	a9, 400806a4 <_iram_text_start+0x154>
40081957:	ecc282        	addi	a8, a2, -20
4008195a:	0899      	s32i.n	a9, a8, 0
	bsa[BSA_PS_OFF/4] = (void *)(PS_WOE | PS_UM | PS_CALLINC(1));
4008195c:	fb5391        	l32r	a9, 400806a8 <_iram_text_start+0x158>
4008195f:	e8c282        	addi	a8, a2, -24
40081962:	0899      	s32i.n	a9, a8, 0
	/* Arguments to z_thread_entry().  Remember these start at A6,
	 * which will be rotated into A2 by the ENTRY instruction that
	 * begins the C function.  And A4-A7 and A8-A11 are optional
	 * quads that live below the BSA!
	 */
	bsa[-1] = arg1;  /* a7 */
40081964:	d0c282        	addi	a8, a2, -48
40081967:	0849      	s32i.n	a4, a8, 0
	bsa[-2] = entry; /* a6 */
40081969:	ccc282        	addi	a8, a2, -52
4008196c:	0839      	s32i.n	a3, a8, 0
	bsa[-3] = 0;     /* a5 */
4008196e:	c8c292        	addi	a9, a2, -56
40081971:	080c      	movi.n	a8, 0
40081973:	0989      	s32i.n	a8, a9, 0
	bsa[-4] = 0;     /* a4 */
40081975:	c4c292        	addi	a9, a2, -60
40081978:	0989      	s32i.n	a8, a9, 0

	bsa[-5] = 0;     /* a11 */
4008197a:	c0c292        	addi	a9, a2, -64
4008197d:	0989      	s32i.n	a8, a9, 0
	bsa[-6] = 0;     /* a10 */
4008197f:	bcc292        	addi	a9, a2, -68
40081982:	0989      	s32i.n	a8, a9, 0
	bsa[-7] = arg3;  /* a9 */
40081984:	b8c282        	addi	a8, a2, -72
40081987:	0869      	s32i.n	a6, a8, 0
	bsa[-8] = arg2;  /* a8 */
40081989:	b4c282        	addi	a8, a2, -76
4008198c:	0859      	s32i.n	a5, a8, 0

	/* Finally push the BSA pointer and return the stack pointer
	 * as the handle
	 */
	bsa[-9] = bsa;
4008198e:	b0c222        	addi	a2, a2, -80
40081991:	0279      	s32i.n	a7, a2, 0
	return &bsa[-9];
}
40081993:	f01d      	retw.n
40081995:	000000        	ill

40081998 <arch_new_thread>:

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
40081998:	004136        	entry	a1, 32
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008199b:	81e8      	l32i.n	a14, a1, 32
{
4008199d:	07dd      	mov.n	a13, a7
	thread->switch_handle = xtensa_init_stack((int *)stack_ptr, entry,
4008199f:	06cd      	mov.n	a12, a6
400819a1:	05bd      	mov.n	a11, a5
400819a3:	04ad      	mov.n	a10, a4
400819a5:	fff9e5        	call8	40081944 <xtensa_init_stack>
400819a8:	1462a2        	s32i	a10, a2, 80
						  p1, p2, p3);
}
400819ab:	f01d      	retw.n
400819ad:	000000        	ill

400819b0 <z_irq_spurious>:

void z_irq_spurious(const void *arg)
{
400819b0:	004136        	entry	a1, 32
	int irqs, ie;

	ARG_UNUSED(arg);

	__asm__ volatile("rsr.interrupt %0" : "=r"(irqs));
400819b3:	03e280        	rsr.interrupt	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(ie));
400819b6:	03e480        	rsr.intenable	a8
	LOG_ERR(" ** Spurious INTERRUPT(s) %p, INTENABLE = %p",
		(void *)irqs, (void *)ie);
	z_xtensa_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
400819b9:	0b0c      	movi.n	a11, 0
400819bb:	1a0c      	movi.n	a10, 1
400819bd:	ffd7e5        	call8	4008173c <z_xtensa_fatal_error>
}
400819c0:	f01d      	retw.n
	...

400819c4 <xtensa_int2_c>:
		__asm__ volatile("wsr.intclear %0" : : "r"(m)); \
	}							\
	return z_get_next_switch_handle(interrupted_stack);		\
}

DEF_INT_C_HANDLER(2)
400819c4:	004136        	entry	a1, 32
400819c7:	03e240        	rsr.interrupt	a4
400819ca:	03e430        	rsr.intenable	a3

static inline int _xtensa_handle_one_int2(unsigned int mask)
{
	int irq;

	if (mask & BIT(19)) {
400819cd:	fb3751        	l32r	a5, 400806ac <_iram_text_start+0x15c>
400819d0:	104430        	and	a4, a4, a3
400819d3:	0e8457        	bany	a4, a5, 400819e5 <xtensa_int2_c+0x21>
		mask = BIT(19);
		irq = 19;
		goto handle_irq;
	}
	if (mask & BIT(20)) {
400819d6:	fb3631        	l32r	a3, 400806b0 <_iram_text_start+0x160>
400819d9:	0f8437        	bany	a4, a3, 400819ec <xtensa_int2_c+0x28>
		mask = BIT(20);
		irq = 20;
		goto handle_irq;
	}
	if (mask & BIT(21)) {
400819dc:	fb3631        	l32r	a3, 400806b4 <_iram_text_start+0x164>
400819df:	0e8437        	bany	a4, a3, 400819f1 <xtensa_int2_c+0x2d>
400819e2:	000986        	j	40081a0c <xtensa_int2_c+0x48>
		irq = 19;
400819e5:	381c      	movi.n	a8, 19
		mask = BIT(19);
400819e7:	053d      	mov.n	a3, a5
400819e9:	000186        	j	400819f3 <xtensa_int2_c+0x2f>
		irq = 20;
400819ec:	481c      	movi.n	a8, 20
400819ee:	000046        	j	400819f3 <xtensa_int2_c+0x2f>
		mask = BIT(21);
		irq = 21;
400819f1:	581c      	movi.n	a8, 21
		goto handle_irq;
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
400819f3:	fb3191        	l32r	a9, 400806b8 <_iram_text_start+0x168>
400819f6:	1188d0        	slli	a8, a8, 3
400819f9:	898a      	add.n	a8, a9, a8
400819fb:	1898      	l32i.n	a9, a8, 4
400819fd:	08a8      	l32i.n	a10, a8, 0
400819ff:	304430        	xor	a4, a4, a3
40081a02:	0009e0        	callx8	a9
40081a05:	13e330        	wsr.intclear	a3
40081a08:	fff1c6        	j	400819d3 <xtensa_int2_c+0xf>
40081a0b:	a22000        	muluh	a2, a0, a0
40081a0e:	17e520        	lsi	f2, a5, 92
40081a11:	2aa001        	l32r	a0, 4004c494 <esp32_rom_gpio_matrix_out+0x42588>
40081a14:	009020        	all4	b2, b0:b1:b2:b3
	...

40081a18 <xtensa_int3_c>:
DEF_INT_C_HANDLER(3)
40081a18:	004136        	entry	a1, 32
40081a1b:	03e240        	rsr.interrupt	a4
40081a1e:	03e430        	rsr.intenable	a3
40081a21:	104430        	and	a4, a4, a3
	if (mask & 0x408800) {
40081a24:	fb2931        	l32r	a3, 400806c8 <_iram_text_start+0x178>
40081a27:	150437        	bnone	a4, a3, 40081a40 <xtensa_int3_c+0x28>
		if (mask & BIT(11)) {
40081a2a:	fb1331        	l32r	a3, 40080678 <_iram_text_start+0x128>
40081a2d:	268437        	bany	a4, a3, 40081a57 <xtensa_int3_c+0x3f>
		if (mask & BIT(15)) {
40081a30:	fb1931        	l32r	a3, 40080694 <_iram_text_start+0x144>
40081a33:	258437        	bany	a4, a3, 40081a5c <xtensa_int3_c+0x44>
		if (mask & BIT(22)) {
40081a36:	fb2131        	l32r	a3, 400806bc <_iram_text_start+0x16c>
40081a39:	490437        	bnone	a4, a3, 40081a86 <xtensa_int3_c+0x6e>
40081a3c:	000846        	j	40081a61 <xtensa_int3_c+0x49>
40081a3f:	203100        	or	a3, a1, a0
		if (mask & BIT(23)) {
40081a42:	37fb      	addi.n	a3, a7, 15
40081a44:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(27)) {
40081a47:	37fb06        	j	4008fa37 <_iram_text_end+0xbb05>
40081a4a:	311f84        	lsi	f8, a15, 196
		if (mask & BIT(29)) {
40081a4d:	1e          	.byte 0x1e
40081a4e:	37fb      	addi.n	a3, a7, 15
40081a50:	1c3304        	lsi	f0, a3, 112
			irq = 29;
40081a53:	86d8      	l32i.n	a13, a6, 32
40081a55:	0c0005        	call0	4008da58 <_iram_text_end+0x9b26>
			irq = 11;
40081a58:	46b8      	l32i.n	a11, a6, 16
40081a5a:	0c0004        	lsi	f0, a0, 48
			irq = 15;
40081a5d:	06f8      	l32i.n	a15, a6, 0
40081a5f:	1c0003        	lsi	f0, a0, 112
			irq = 22;
40081a62:	c668      	l32i.n	a6, a6, 48
40081a64:	1c0001        	l32r	a0, 40048a64 <esp32_rom_gpio_matrix_out+0x3eb58>
			irq = 23;
40081a67:	8678      	l32i.n	a7, a6, 32
40081a69:	000000        	ill
			irq = 27;
40081a6c:	b81c      	movi.n	a8, 27
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081a6e:	fb1291        	l32r	a9, 400806b8 <_iram_text_start+0x168>
40081a71:	1188d0        	slli	a8, a8, 3
40081a74:	898a      	add.n	a8, a9, a8
40081a76:	1898      	l32i.n	a9, a8, 4
40081a78:	08a8      	l32i.n	a10, a8, 0
40081a7a:	304430        	xor	a4, a4, a3
40081a7d:	0009e0        	callx8	a9
40081a80:	13e330        	wsr.intclear	a3
40081a83:	ffe746        	j	40081a24 <xtensa_int3_c+0xc>
40081a86:	20a220        	or	a10, a2, a2
40081a89:	011025        	call8	40082b8c <z_get_next_switch_handle>
40081a8c:	202aa0        	or	a2, a10, a10
40081a8f:	000090        	retw
	...

40081a94 <xtensa_int4_c>:
DEF_INT_C_HANDLER(4)
40081a94:	004136        	entry	a1, 32
40081a97:	03e240        	rsr.interrupt	a4
40081a9a:	03e430        	rsr.intenable	a3
40081a9d:	104430        	and	a4, a4, a3

static inline int _xtensa_handle_one_int4(unsigned int mask)
{
	int irq;

	if (mask & 0x3000000) {
40081aa0:	fb0f31        	l32r	a3, 400806dc <_iram_text_start+0x18c>
40081aa3:	0e0437        	bnone	a4, a3, 40081ab5 <xtensa_int4_c+0x21>
		if (mask & BIT(24)) {
40081aa6:	fb0931        	l32r	a3, 400806cc <_iram_text_start+0x17c>
40081aa9:	198437        	bany	a4, a3, 40081ac6 <xtensa_int4_c+0x32>
			mask = BIT(24);
			irq = 24;
			goto handle_irq;
		}
		if (mask & BIT(25)) {
40081aac:	fb0931        	l32r	a3, 400806d0 <_iram_text_start+0x180>
40081aaf:	370437        	bnone	a4, a3, 40081aea <xtensa_int4_c+0x56>
40081ab2:	000546        	j	40081acb <xtensa_int4_c+0x37>
			mask = BIT(25);
			irq = 25;
			goto handle_irq;
		}
	} else {
		if (mask & BIT(28)) {
40081ab5:	fb0731        	l32r	a3, 400806d4 <_iram_text_start+0x184>
40081ab8:	148437        	bany	a4, a3, 40081ad0 <xtensa_int4_c+0x3c>
			mask = BIT(28);
			irq = 28;
			goto handle_irq;
		}
		if (mask & BIT(30)) {
40081abb:	fb0731        	l32r	a3, 400806d8 <_iram_text_start+0x188>
40081abe:	280437        	bnone	a4, a3, 40081aea <xtensa_int4_c+0x56>
			mask = BIT(30);
			irq = 30;
40081ac1:	e81c      	movi.n	a8, 30
40081ac3:	0002c6        	j	40081ad2 <xtensa_int4_c+0x3e>
			irq = 24;
40081ac6:	881c      	movi.n	a8, 24
40081ac8:	000186        	j	40081ad2 <xtensa_int4_c+0x3e>
			irq = 25;
40081acb:	981c      	movi.n	a8, 25
40081acd:	000046        	j	40081ad2 <xtensa_int4_c+0x3e>
			irq = 28;
40081ad0:	c81c      	movi.n	a8, 28
			goto handle_irq;
		}
	}
	return 0;
handle_irq:
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081ad2:	faf991        	l32r	a9, 400806b8 <_iram_text_start+0x168>
40081ad5:	1188d0        	slli	a8, a8, 3
40081ad8:	898a      	add.n	a8, a9, a8
40081ada:	1898      	l32i.n	a9, a8, 4
40081adc:	08a8      	l32i.n	a10, a8, 0
40081ade:	304430        	xor	a4, a4, a3
40081ae1:	0009e0        	callx8	a9
40081ae4:	13e330        	wsr.intclear	a3
40081ae7:	ffed46        	j	40081aa0 <xtensa_int4_c+0xc>
40081aea:	20a220        	or	a10, a2, a2
40081aed:	0109e5        	call8	40082b8c <z_get_next_switch_handle>
40081af0:	202aa0        	or	a2, a10, a10
40081af3:	000090        	retw
	...

40081af8 <xtensa_int5_c>:
DEF_INT_C_HANDLER(5)
40081af8:	004136        	entry	a1, 32
40081afb:	03e240        	rsr.interrupt	a4
40081afe:	03e430        	rsr.intenable	a3
	if (mask & BIT(16)) {
40081b01:	faf751        	l32r	a5, 400806e0 <_iram_text_start+0x190>
40081b04:	104430        	and	a4, a4, a3
40081b07:	0001c6        	j	40081b12 <xtensa_int5_c+0x1a>
40081b0a:	300000        	xor	a0, a0, a0
40081b0d:	303044        	lsi	f4, a0, 192
40081b10:	5713e3        	lsi	f14, a3, 0x15c
40081b13:	311084        	lsi	f8, a0, 196
	if (mask & BIT(26)) {
40081b16:	37faf3        	lsi	f15, a10, 220
40081b19:	d61184        	lsi	f8, a1, 0x358
	if (mask & BIT(31)) {
40081b1c:	1c0254        	lsi	f5, a2, 112
		irq = 31;
40081b1f:	31f8      	l32i.n	a15, a1, 12
		mask = BIT(31);
40081b21:	06faf2        	s32ri	a15, a10, 24
40081b24:	1c0002        	l8ui	a0, a0, 28
		irq = 16;
40081b27:	3d08      	l32i.n	a0, a13, 12
		mask = BIT(16);
40081b29:	004605        	call0	40081f8c <i2c_esp32_configure_pins+0x38>
40081b2c:	a81c00        	lsi	f0, a12, 0x2a0
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b2f:	fae291        	l32r	a9, 400806b8 <_iram_text_start+0x168>
40081b32:	1188d0        	slli	a8, a8, 3
40081b35:	808980        	add	a8, a9, a8
40081b38:	012892        	l32i	a9, a8, 4
40081b3b:	0028a2        	l32i	a10, a8, 0
40081b3e:	0009e0        	callx8	a9
40081b41:	fc7356        	bnez	a3, 40081b0c <xtensa_int5_c+0x14>
40081b44:	20a220        	or	a10, a2, a2
40081b47:	010465        	call8	40082b8c <z_get_next_switch_handle>
40081b4a:	202aa0        	or	a2, a10, a10
40081b4d:	000090        	retw

40081b50 <xtensa_int6_c>:
DEF_INT_C_HANDLER(6)
40081b50:	004136        	entry	a1, 32
40081b53:	20a220        	or	a10, a2, a2
40081b56:	03e280        	rsr.interrupt	a8
40081b59:	03e480        	rsr.intenable	a8
40081b5c:	0102e5        	call8	40082b8c <z_get_next_switch_handle>
40081b5f:	202aa0        	or	a2, a10, a10
40081b62:	000090        	retw
40081b65:	000000        	ill

40081b68 <xtensa_int7_c>:
DEF_INT_C_HANDLER(7)
40081b68:	004136        	entry	a1, 32
40081b6b:	03e230        	rsr.interrupt	a3
40081b6e:	03e440        	rsr.intenable	a4
40081b71:	103340        	and	a3, a3, a4
	if (mask & BIT(14)) {
40081b74:	fade41        	l32r	a4, 400806ec <_iram_text_start+0x19c>
40081b77:	150347        	bnone	a3, a4, 40081b90 <xtensa_int7_c+0x28>
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081b7a:	facf81        	l32r	a8, 400806b8 <_iram_text_start+0x168>
40081b7d:	303340        	xor	a3, a3, a4
40081b80:	1d2892        	l32i	a9, a8, 116
40081b83:	1c28a2        	l32i	a10, a8, 112
40081b86:	0009e0        	callx8	a9
40081b89:	13e340        	wsr.intclear	a4
40081b8c:	fff9c6        	j	40081b77 <xtensa_int7_c+0xf>
40081b8f:	a22000        	muluh	a2, a0, a0
40081b92:	ffa520        	f64cmph	a10, a5, a2, 15
40081b95:	2aa000        	mul.s	f10, f0, f0
40081b98:	009020        	all4	b2, b0:b1:b2:b3
	...

40081b9c <xtensa_excint1_c>:
 * DEF_EXCINT 1 vector declaration in assembly code.  This one looks
 * different because exceptions and interrupts land at the same
 * vector; other interrupt levels have their own vectors.
 */
void *xtensa_excint1_c(int *interrupted_stack)
{
40081b9c:	004136        	entry	a1, 32
	int cause, vaddr, *bsa = *(int **)interrupted_stack;

	__asm__ volatile("rsr.exccause %0" : "=r"(cause));
40081b9f:	03e850        	rsr.exccause	a5

	if (cause == EXCCAUSE_LEVEL1_INTERRUPT) {
40081ba2:	024526        	beqi	a5, 4, 40081ba8 <xtensa_excint1_c+0xc>
40081ba5:	0045c6        	j	40081cc0 <xtensa_excint1_c+0x124>
static inline DEF_INT_C_HANDLER(1)
40081ba8:	03e240        	rsr.interrupt	a4
40081bab:	03e430        	rsr.intenable	a3
		if (mask & 0x780) {
40081bae:	80a762        	movi	a6, 0x780
40081bb1:	104430        	and	a4, a4, a3
	if (mask & 0x7f) {
40081bb4:	643040        	extui	a3, a4, 0, 7
40081bb7:	048316        	beqz	a3, 40081c03 <xtensa_excint1_c+0x67>
		if (mask & 0x7) {
40081bba:	243040        	extui	a3, a4, 0, 3
40081bbd:	739c      	beqz.n	a3, 40081bd8 <xtensa_excint1_c+0x3c>
			if (mask & BIT(0)) {
40081bbf:	043040        	extui	a3, a4, 0, 1
40081bc2:	09a356        	bnez	a3, 40081c60 <xtensa_excint1_c+0xc4>
			if (mask & BIT(1)) {
40081bc5:	290c      	movi.n	a9, 2
40081bc7:	020497        	bnone	a4, a9, 40081bcd <xtensa_excint1_c+0x31>
40081bca:	0025c6        	j	40081c65 <xtensa_excint1_c+0xc9>
			if (mask & BIT(2)) {
40081bcd:	430c      	movi.n	a3, 4
40081bcf:	028437        	bany	a4, a3, 40081bd5 <xtensa_excint1_c+0x39>
40081bd2:	004186        	j	40081cdc <xtensa_excint1_c+0x140>
40081bd5:	0024c6        	j	40081c6c <xtensa_excint1_c+0xd0>
			if (mask & 0x18) {
40081bd8:	831c      	movi.n	a3, 24
40081bda:	120437        	bnone	a4, a3, 40081bf0 <xtensa_excint1_c+0x54>
				if (mask & BIT(3)) {
40081bdd:	830c      	movi.n	a3, 8
40081bdf:	020437        	bnone	a4, a3, 40081be5 <xtensa_excint1_c+0x49>
40081be2:	0022c6        	j	40081c71 <xtensa_excint1_c+0xd5>
				if (mask & BIT(4)) {
40081be5:	031c      	movi.n	a3, 16
40081be7:	028437        	bany	a4, a3, 40081bed <xtensa_excint1_c+0x51>
40081bea:	003b86        	j	40081cdc <xtensa_excint1_c+0x140>
40081bed:	002186        	j	40081c77 <xtensa_excint1_c+0xdb>
				if (mask & BIT(5)) {
40081bf0:	032c      	movi.n	a3, 32
40081bf2:	020437        	bnone	a4, a3, 40081bf8 <xtensa_excint1_c+0x5c>
40081bf5:	0020c6        	j	40081c7c <xtensa_excint1_c+0xe0>
				if (mask & BIT(6)) {
40081bf8:	034c      	movi.n	a3, 64
40081bfa:	028437        	bany	a4, a3, 40081c00 <xtensa_excint1_c+0x64>
40081bfd:	0036c6        	j	40081cdc <xtensa_excint1_c+0x140>
40081c00:	001f46        	j	40081c81 <xtensa_excint1_c+0xe5>
		if (mask & 0x780) {
40081c03:	2d0467        	bnone	a4, a6, 40081c34 <xtensa_excint1_c+0x98>
			if (mask & 0x180) {
40081c06:	80a132        	movi	a3, 0x180
40081c09:	130437        	bnone	a4, a3, 40081c20 <xtensa_excint1_c+0x84>
				if (mask & BIT(7)) {
40081c0c:	80a032        	movi	a3, 128
40081c0f:	738437        	bany	a4, a3, 40081c86 <xtensa_excint1_c+0xea>
				if (mask & BIT(8)) {
40081c12:	00a132        	movi	a3, 0x100
40081c15:	028437        	bany	a4, a3, 40081c1b <xtensa_excint1_c+0x7f>
40081c18:	003006        	j	40081cdc <xtensa_excint1_c+0x140>
40081c1b:	001b06        	j	40081c8b <xtensa_excint1_c+0xef>
40081c1e:	320000        	orbc	b0, b0, b0
				if (mask & BIT(9)) {
40081c21:	3700a2        	l8ui	a10, a0, 55
40081c24:	326984        	lsi	f8, a9, 200
				if (mask & BIT(10)) {
40081c27:	3700a4        	lsi	f10, a0, 220
40081c2a:	060284        	lsi	f8, a2, 24
40081c2d:	002b      	addi.n	a0, a0, 2
40081c2f:	001886        	j	40081c95 <xtensa_excint1_c+0xf9>
40081c32:	310000        	srai	a0, a0, 16
			if (mask & 0x3000) {
40081c35:	37fab2        	s32ri	a11, a10, 220
40081c38:	311104        	lsi	f0, a1, 196
				if (mask & BIT(12)) {
40081c3b:	faad      	lsi	f10, a10, 40
40081c3d:	598437        	bany	a4, a3, 40081c9a <xtensa_excint1_c+0xfe>
				if (mask & BIT(13)) {
40081c40:	fa8531        	l32r	a3, 40080654 <_iram_text_start+0x104>
40081c43:	028437        	bany	a4, a3, 40081c49 <xtensa_excint1_c+0xad>
40081c46:	002486        	j	40081cdc <xtensa_excint1_c+0x140>
40081c49:	001486        	j	40081c9f <xtensa_excint1_c+0x103>
				if (mask & BIT(17)) {
40081c4c:	faaa31        	l32r	a3, 400806f4 <_iram_text_start+0x1a4>
40081c4f:	518437        	bany	a4, a3, 40081ca4 <xtensa_excint1_c+0x108>
				if (mask & BIT(18)) {
40081c52:	faa931        	l32r	a3, 400806f8 <_iram_text_start+0x1a8>
40081c55:	028437        	bany	a4, a3, 40081c5b <xtensa_excint1_c+0xbf>
40081c58:	002006        	j	40081cdc <xtensa_excint1_c+0x140>
					irq = 18;
40081c5b:	281c      	movi.n	a8, 18
40081c5d:	001146        	j	40081ca6 <xtensa_excint1_c+0x10a>
				irq = 0;
40081c60:	080c      	movi.n	a8, 0
40081c62:	001006        	j	40081ca6 <xtensa_excint1_c+0x10a>
				irq = 1;
40081c65:	180c      	movi.n	a8, 1
				mask = BIT(1);
40081c67:	093d      	mov.n	a3, a9
40081c69:	000e46        	j	40081ca6 <xtensa_excint1_c+0x10a>
				irq = 2;
40081c6c:	098d      	mov.n	a8, a9
40081c6e:	000d06        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 3;
40081c71:	380c      	movi.n	a8, 3
40081c73:	000bc6        	j	40081ca6 <xtensa_excint1_c+0x10a>
40081c76:	058d00        	extui	a8, a0, 29, 1
					irq = 4;
40081c79:	000a46        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 5;
40081c7c:	580c      	movi.n	a8, 5
40081c7e:	000906        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 6;
40081c81:	680c      	movi.n	a8, 6
40081c83:	0007c6        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 7;
40081c86:	780c      	movi.n	a8, 7
40081c88:	000686        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 8;
40081c8b:	880c      	movi.n	a8, 8
40081c8d:	000546        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 9;
40081c90:	980c      	movi.n	a8, 9
40081c92:	000406        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 10;
40081c95:	a80c      	movi.n	a8, 10
40081c97:	0002c6        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 12;
40081c9a:	c80c      	movi.n	a8, 12
40081c9c:	000186        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 13;
40081c9f:	d80c      	movi.n	a8, 13
40081ca1:	000046        	j	40081ca6 <xtensa_excint1_c+0x10a>
					irq = 17;
40081ca4:	181c      	movi.n	a8, 17
	_sw_isr_table[irq].isr(_sw_isr_table[irq].arg);
40081ca6:	fa8491        	l32r	a9, 400806b8 <_iram_text_start+0x168>
40081ca9:	1188d0        	slli	a8, a8, 3
40081cac:	898a      	add.n	a8, a9, a8
40081cae:	1898      	l32i.n	a9, a8, 4
40081cb0:	08a8      	l32i.n	a10, a8, 0
40081cb2:	304430        	xor	a4, a4, a3
40081cb5:	0009e0        	callx8	a9
40081cb8:	13e330        	wsr.intclear	a3
40081cbb:	ffbd46        	j	40081bb4 <xtensa_excint1_c+0x18>
40081cbe:	660000        	lsi	f0, a0, 0x198

		return xtensa_int1_c(interrupted_stack);

	} else if (cause == EXCCAUSE_SYSCALL) {
40081cc1:	480c15        	call4	400c9d84 <_iram_text_end+0x45e52>
	int cause, vaddr, *bsa = *(int **)interrupted_stack;
40081cc4:	643802        	lsi	f0, a8, 0x190

		/* Xtensa exceptions don't automatically advance PC,
		 * have to skip the SYSCALL instruction manually or
		 * else it will just loop forever
		 */
		bsa[BSA_PC_OFF/4] += 3;
40081cc7:	333b      	addi.n	a3, a3, 3
40081cc9:	6439      	s32i.n	a3, a4, 24
40081ccb:	000346        	j	40081cdc <xtensa_excint1_c+0x140>
40081cce:	300000        	xor	a0, a0, a0

	} else {
		uint32_t ps = bsa[BSA_PS_OFF/4];

		__asm__ volatile("rsr.excvaddr %0" : "=r"(vaddr));
40081cd1:	ee          	.byte 0xee
40081cd2:	a0a203        	lsi	f0, a2, 0x280
		/* FIXME: legacy xtensa port reported "HW" exception
		 * for all unhandled exceptions, which seems incorrect
		 * as these are software errors.  Should clean this
		 * up.
		 */
		z_xtensa_fatal_error(K_ERR_CPU_EXCEPTION,
40081cd5:	b22000        	mulsh	a2, a0, a0
40081cd8:	a62520        	lsi	f2, a5, 0x298
40081cdb:	ff          	.byte 0xff
				     (void *)interrupted_stack);
	}

	return z_get_next_switch_handle(interrupted_stack);
40081cdc:	02ad      	mov.n	a10, a2
40081cde:	00eae5        	call8	40082b8c <z_get_next_switch_handle>
}
40081ce1:	0a2d      	mov.n	a2, a10
40081ce3:	f01d      	retw.n
40081ce5:	000000        	ill

40081ce8 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
40081ce8:	004136        	entry	a1, 32
	_stdout_hook = hook;
40081ceb:	fa8581        	l32r	a8, 40080700 <_iram_text_start+0x1b0>
40081cee:	0829      	s32i.n	a2, a8, 0
}
40081cf0:	f01d      	retw.n
	...

40081cf4 <gpio_esp32_pin_interrupt_configure>:

static int gpio_esp32_pin_interrupt_configure(const struct device *port,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
40081cf4:	004136        	entry	a1, 32
	if (mode == GPIO_INT_MODE_DISABLED) {
40081cf7:	fa5781        	l32r	a8, 40080654 <_iram_text_start+0x104>
{
40081cfa:	743030        	extui	a3, a3, 0, 8
	if (mode == GPIO_INT_MODE_DISABLED) {
40081cfd:	211487        	beq	a4, a8, 40081d22 <gpio_esp32_pin_interrupt_configure+0x2e>
	if (mode == GPIO_INT_MODE_LEVEL) {
40081d00:	fa7b91        	l32r	a9, 400806ec <_iram_text_start+0x19c>
			return -ENOTSUP;
40081d03:	ddaf82        	movi	a8, -35
	if (mode == GPIO_INT_MODE_LEVEL) {
40081d06:	4f1497        	beq	a4, a9, 40081d59 <gpio_esp32_pin_interrupt_configure+0x65>
		switch (trig) {
40081d09:	fa7b41        	l32r	a4, 400806f8 <_iram_text_start+0x1a8>
40081d0c:	181547        	beq	a5, a4, 40081d28 <gpio_esp32_pin_interrupt_configure+0x34>
40081d0f:	fa7d41        	l32r	a4, 40080704 <_iram_text_start+0x1b4>
40081d12:	431547        	beq	a5, a4, 40081d59 <gpio_esp32_pin_interrupt_configure+0x65>
40081d15:	fa7741        	l32r	a4, 400806f4 <_iram_text_start+0x1a4>
			return -EINVAL;
40081d18:	a86c      	movi.n	a8, -22
		switch (trig) {
40081d1a:	3b9547        	bne	a5, a4, 40081d59 <gpio_esp32_pin_interrupt_configure+0x65>
			return 2;
40081d1d:	280c      	movi.n	a8, 2
40081d1f:	0001c6        	j	40081d2a <gpio_esp32_pin_interrupt_configure+0x36>
		return 0;       /* Disables interrupt for a pin. */
40081d22:	080c      	movi.n	a8, 0
40081d24:	000086        	j	40081d2a <gpio_esp32_pin_interrupt_configure+0x36>
40081d27:	180c00        	lsxp	f0, a12, a0
	struct gpio_esp32_data *data = port->data;
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081d2a:	3248      	l32i.n	a4, a2, 12
40081d2c:	8498      	l32i.n	a9, a4, 32
40081d2e:	939a      	add.n	a9, a3, a9
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081d30:	fa7631        	l32r	a3, 40080708 <_iram_text_start+0x1b8>
40081d33:	993a      	add.n	a9, a9, a3
40081d35:	1199e0        	slli	a9, a9, 2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081d38:	006340        	rsil	a4, 3
	}

	key = irq_lock();

	reg_val = *reg;
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081d3b:	fa7451        	l32r	a5, 4008070c <_iram_text_start+0x1bc>
	reg_val = *reg;
40081d3e:	0938      	l32i.n	a3, a9, 0
	/* Enable Interrupt on CPU0 (PRO_CPU) */
	reg_val |= GPIO_CPU0_INT_ENABLE;
	/* Interrupt triggering mode */
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081d40:	118890        	slli	a8, a8, 7
	reg_val &= ~(GPIO_PIN_INT_ENA_M | GPIO_PIN_INT_TYPE_M);
40081d43:	103350        	and	a3, a3, a5
40081d46:	208830        	or	a8, a8, a3
	reg_val |= intr_trig_mode << GPIO_PIN_INT_TYPE_S;
40081d49:	fa5231        	l32r	a3, 40080694 <_iram_text_start+0x144>
40081d4c:	208830        	or	a8, a8, a3
	*reg = reg_val;
40081d4f:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40081d51:	13e640        	wsr.ps	a4
40081d54:	002010        	rsync

	irq_unlock(key);

	return 0;
40081d57:	080c      	movi.n	a8, 0
}
40081d59:	082d      	mov.n	a2, a8
40081d5b:	f01d      	retw.n
40081d5d:	000000        	ill

40081d60 <gpio_esp32_isr>:
#if defined(CONFIG_GPIO_ESP32_1)
GPIO_DEVICE_INIT(1);
#endif

static void gpio_esp32_isr(const void *param)
{
40081d60:	004136        	entry	a1, 32

#if defined(CONFIG_GPIO_ESP32_0)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_0));
40081d63:	fa6ba1        	l32r	a10, 40080710 <_iram_text_start+0x1c0>
40081d66:	01b7a5        	call8	400838e0 <gpio_esp32_fire_callbacks>
#endif
#if defined(CONFIG_GPIO_ESP32_1)
	gpio_esp32_fire_callbacks(DEVICE_GET(gpio_esp32_1));
40081d69:	fa6aa1        	l32r	a10, 40080714 <_iram_text_start+0x1c4>
40081d6c:	01b725        	call8	400838e0 <gpio_esp32_fire_callbacks>
#endif

	ARG_UNUSED(param);
}
40081d6f:	f01d      	retw.n
40081d71:	000000        	ill

40081d74 <gpio_esp32_init>:
{
40081d74:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
40081d77:	3228      	l32i.n	a2, a2, 12
40081d79:	fa67a1        	l32r	a10, 40080718 <_iram_text_start+0x1c8>
40081d7c:	00a065        	call8	40082784 <z_impl_device_get_binding>
	data->pinmux = device_get_binding(CONFIG_PINMUX_NAME);
40081d7f:	12a9      	s32i.n	a10, a2, 4
		return -ENOTSUP;
40081d81:	ddaf22        	movi	a2, -35
	if (!data->pinmux) {
40081d84:	8abc      	beqz.n	a10, 40081dc0 <gpio_esp32_init+0x4c>
	if (!isr_connected) {
40081d86:	fa6531        	l32r	a3, 4008071c <_iram_text_start+0x1cc>
	return 0;
40081d89:	020c      	movi.n	a2, 0
	if (!isr_connected) {
40081d8b:	000382        	l8ui	a8, a3, 0
40081d8e:	2e9827        	bne	a8, a2, 40081dc0 <gpio_esp32_init+0x4c>
 */
static inline void z_xt_ints_off(unsigned int mask)
{
	int val;

	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081d91:	03e480        	rsr.intenable	a8
	val &= ~mask;
40081d94:	ffab92        	movi	a9, 0xfffffbff
40081d97:	108890        	and	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081d9a:	13e480        	wsr.intenable	a8
40081d9d:	002010        	rsync
		esp32_rom_intr_matrix_set(0, ETS_GPIO_INTR_SOURCE,
40081da0:	ac0c      	movi.n	a12, 10
40081da2:	6b1c      	movi.n	a11, 22
40081da4:	02ad      	mov.n	a10, a2
40081da6:	fa5e81        	l32r	a8, 40080720 <_iram_text_start+0x1d0>
40081da9:	0008e0        	callx8	a8
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
40081dac:	03e480        	rsr.intenable	a8
	val |= mask;
40081daf:	00a492        	movi	a9, 0x400
40081db2:	208890        	or	a8, a8, a9
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40081db5:	13e480        	wsr.intenable	a8
40081db8:	002010        	rsync
		isr_connected = true;
40081dbb:	180c      	movi.n	a8, 1
40081dbd:	004382        	s8i	a8, a3, 0
}
40081dc0:	f01d      	retw.n
	...

40081dc4 <gpio_esp32_config>:
{
40081dc4:	006136        	entry	a1, 48
	struct gpio_esp32_data *data = dev->data;
40081dc7:	3268      	l32i.n	a6, a2, 12
{
40081dc9:	743030        	extui	a3, a3, 0, 8
	r = pinmux_pin_get(data->pinmux, io_pin, &func);
40081dcc:	16a8      	l32i.n	a10, a6, 4
	uint32_t io_pin = pin + data->port.pin_offset; /* Range from 0 - 39 */
40081dce:	8658      	l32i.n	a5, a6, 32
				 uint32_t *func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->get(dev, pin, func);
40081dd0:	2a28      	l32i.n	a2, a10, 8
40081dd2:	535a      	add.n	a5, a3, a5
40081dd4:	1228      	l32i.n	a2, a2, 4
40081dd6:	01cd      	mov.n	a12, a1
40081dd8:	20b550        	or	a11, a5, a5
40081ddb:	0002e0        	callx8	a2
40081dde:	0a2d      	mov.n	a2, a10
	if (r < 0) {
40081de0:	090a96        	bltz	a10, 40081e74 <gpio_esp32_config+0xb0>
	pinmux_pin_set(data->pinmux, io_pin, PIN_FUNC_GPIO);
40081de3:	16a8      	l32i.n	a10, a6, 4
	return api->set(dev, pin, func);
40081de5:	2c0c      	movi.n	a12, 2
40081de7:	2a28      	l32i.n	a2, a10, 8
40081de9:	05bd      	mov.n	a11, a5
40081deb:	0228      	l32i.n	a2, a2, 0
40081ded:	0002e0        	callx8	a2
	if (flags & GPIO_PULL_UP) {
40081df0:	0c1c      	movi.n	a12, 16
40081df2:	10c4c0        	and	a12, a4, a12
40081df5:	16a8      	l32i.n	a10, a6, 4
40081df7:	9c8c      	beqz.n	a12, 40081e04 <gpio_esp32_config+0x40>
				    uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->pullup(dev, pin, func);
40081df9:	2a28      	l32i.n	a2, a10, 8
40081dfb:	1c0c      	movi.n	a12, 1
40081dfd:	2228      	l32i.n	a2, a2, 8
40081dff:	000206        	j	40081e0b <gpio_esp32_config+0x47>
40081e02:	570000        	lsi	f0, a0, 0x15c
	} else if (flags & GPIO_PULL_DOWN) {
40081e05:	280864        	lsi	f6, a8, 160
40081e08:	282a      	add.n	a2, a8, a2
40081e0a:	05bd22        	l32ai	a2, a13, 20
40081e0d:	0002e0        	callx8	a2
	if (flags & GPIO_OUTPUT) {
40081e10:	16a8      	l32i.n	a10, a6, 4
40081e12:	2a28      	l32i.n	a2, a10, 8
40081e14:	3288      	l32i.n	a8, a2, 12
40081e16:	00a222        	movi	a2, 0x200
40081e19:	102420        	and	a2, a4, a2
40081e1c:	04c216        	beqz	a2, 40081e6c <gpio_esp32_config+0xa8>
	uint32_t *reg = GET_GPIO_PIN_REG(io_pin);
40081e1f:	fa3a21        	l32r	a2, 40080708 <_iram_text_start+0x1b8>
40081e22:	252a      	add.n	a2, a5, a2
40081e24:	1122e0        	slli	a2, a2, 2
		if (flags & GPIO_SINGLE_ENDED) {
40081e27:	0d6417        	bbci	a4, 1, 40081e38 <gpio_esp32_config+0x74>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
40081e2a:	4b0c      	movi.n	a11, 4
40081e2c:	1104b7        	bnone	a4, a11, 40081e41 <gpio_esp32_config+0x7d>
				*reg |= GPIO_PIN_PAD_DRIVER;
40081e2f:	0298      	l32i.n	a9, a2, 0
40081e31:	2099b0        	or	a9, a9, a11
40081e34:	0001c6        	j	40081e3f <gpio_esp32_config+0x7b>
40081e37:	029800        	andb	b9, b8, b0
			*reg &= ~GPIO_PIN_PAD_DRIVER;
40081e3a:	bb7c      	movi.n	a11, -5
40081e3c:	1099b0        	and	a9, a9, a11
40081e3f:	0299      	s32i.n	a9, a2, 0
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
40081e41:	0464b7        	bbci	a4, 11, 40081e49 <gpio_esp32_config+0x85>
			*data->port.set_reg = BIT(pin);
40081e44:	2648      	l32i.n	a4, a6, 8
40081e46:	000106        	j	40081e4e <gpio_esp32_config+0x8a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
40081e49:	1064a7        	bbci	a4, 10, 40081e5d <gpio_esp32_config+0x99>
			*data->port.clear_reg = BIT(pin);
40081e4c:	3648      	l32i.n	a4, a6, 12
40081e4e:	01a022        	movi	a2, 1
40081e51:	401300        	ssl	a3
40081e54:	a13200        	sll	a3, a2
40081e57:	0020c0        	memw
40081e5a:	006432        	s32i	a3, a4, 0
					  uint8_t func)
{
	const struct pinmux_driver_api *api =
		(const struct pinmux_driver_api *)dev->api;

	return api->input(dev, pin, func);
40081e5d:	0c0c      	movi.n	a12, 0
40081e5f:	05bd      	mov.n	a11, a5
40081e61:	0008e0        	callx8	a8
		if (r < 0) {
40081e64:	020c      	movi.n	a2, 0
40081e66:	432a20        	min	a2, a10, a2
40081e69:	0001c6        	j	40081e74 <gpio_esp32_config+0xb0>
40081e6c:	1c0c      	movi.n	a12, 1
40081e6e:	20b550        	or	a11, a5, a5
40081e71:	0008e0        	callx8	a8
}
40081e74:	f01d      	retw.n
	...

40081e78 <i2c_esp32_isr>:

	return ret;
}

static void i2c_esp32_isr(const struct device *device)
{
40081e78:	004136        	entry	a1, 32
	const int fifo_give_mask = I2C_ACK_ERR_INT_ST |
				   I2C_TIME_OUT_INT_ST |
				   I2C_TRANS_COMPLETE_INT_ST |
				   I2C_ARBITRATION_LOST_INT_ST;
	const struct i2c_esp32_config *config = device->config;
40081e7b:	012232        	l32i	a3, a2, 4

	if (sys_read32(I2C_INT_STATUS_REG(config->index)) & fifo_give_mask) {
40081e7e:	002392        	l32i	a9, a3, 0
40081e81:	1189e0        	slli	a8, a9, 2
40081e84:	808890        	add	a8, a8, a9
40081e87:	fa2791        	l32r	a9, 40080724 <_iram_text_start+0x1d4>
40081e8a:	118820        	slli	a8, a8, 14
40081e8d:	889a      	add.n	a8, a8, a9
	return *(volatile uint32_t *)addr;
40081e8f:	0020c0        	memw
40081e92:	0898      	l32i.n	a9, a8, 0
40081e94:	a0a582        	movi	a8, 0x5a0
40081e97:	060987        	bnone	a9, a8, 40081ea1 <i2c_esp32_isr+0x29>

		/* Only give the semaphore if a watched interrupt happens.
		 * Error checking is performed at the other side of the
		 * semaphore, by reading the status register.
		 */
		k_sem_give(&data->fifo_sem);
40081e9a:	32a8      	l32i.n	a10, a2, 12
40081e9c:	aa8b      	addi.n	a10, a10, 8
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
40081e9e:	0132e5        	call8	400831cc <z_impl_k_sem_give>
	}

	/* Acknowledge all I2C interrupts */
	sys_write32(~0, I2C_INT_CLR_REG(config->index));
40081ea1:	0398      	l32i.n	a9, a3, 0
40081ea3:	fa2121        	l32r	a2, 40080728 <_iram_text_start+0x1d8>
40081ea6:	1189e0        	slli	a8, a9, 2
40081ea9:	889a      	add.n	a8, a8, a9
40081eab:	118820        	slli	a8, a8, 14
40081eae:	882a      	add.n	a8, a8, a2
	*(volatile uint32_t *)addr = data;
40081eb0:	f27c      	movi.n	a2, -1
40081eb2:	0020c0        	memw
40081eb5:	0829      	s32i.n	a2, a8, 0
}
40081eb7:	f01d      	retw.n
40081eb9:	000000        	ill

40081ebc <i2c_esp32_reset_fifo$isra$0>:
static inline void i2c_esp32_reset_fifo(const struct i2c_esp32_config *config)
40081ebc:	004136        	entry	a1, 32
	uint32_t reg = I2C_FIFO_CONF_REG(config->index);
40081ebf:	1182e0        	slli	a8, a2, 2
40081ec2:	282a      	add.n	a2, a8, a2
40081ec4:	fa1a81        	l32r	a8, 4008072c <_iram_text_start+0x1dc>
40081ec7:	112220        	slli	a2, a2, 14
40081eca:	228a      	add.n	a2, a2, a8
	return *(volatile uint32_t *)addr;
40081ecc:	0020c0        	memw
40081ecf:	0288      	l32i.n	a8, a2, 0
40081ed1:	fa0a91        	l32r	a9, 400806fc <_iram_text_start+0x1ac>
40081ed4:	208890        	or	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081ed7:	0020c0        	memw
40081eda:	0289      	s32i.n	a8, a2, 0
	return *(volatile uint32_t *)addr;
40081edc:	0020c0        	memw
40081edf:	0288      	l32i.n	a8, a2, 0
	sys_write32(sys_read32(mem_addr) & ~v, mem_addr);
40081ee1:	fa1391        	l32r	a9, 40080730 <_iram_text_start+0x1e0>
40081ee4:	108890        	and	a8, a8, a9
	*(volatile uint32_t *)addr = data;
40081ee7:	0020c0        	memw
40081eea:	0289      	s32i.n	a8, a2, 0
}
40081eec:	f01d      	retw.n
	...

40081ef0 <i2c_esp32_write_addr>:
{
40081ef0:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
40081ef3:	1268      	l32i.n	a6, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081ef5:	3278      	l32i.n	a7, a2, 12
	i2c_esp32_reset_fifo(config);
40081ef7:	06a8      	l32i.n	a10, a6, 0
40081ef9:	fffc25        	call8	40081ebc <i2c_esp32_reset_fifo$isra$0>
	sys_write32(addr & I2C_FIFO_RDATA, I2C_DATA_APB_REG(config->index));
40081efc:	0628      	l32i.n	a2, a6, 0
40081efe:	748050        	extui	a8, a5, 0, 8
40081f01:	1192e0        	slli	a9, a2, 2
40081f04:	992a      	add.n	a9, a9, a2
40081f06:	fa0b21        	l32r	a2, 40080734 <_iram_text_start+0x1e4>
40081f09:	119920        	slli	a9, a9, 14
40081f0c:	992a      	add.n	a9, a9, a2
40081f0e:	0020c0        	memw
40081f11:	0989      	s32i.n	a8, a9, 0
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081f13:	0788      	l32i.n	a8, a7, 0
	uint32_t addr_len = 1U;
40081f15:	190c      	movi.n	a9, 1
	if (data->dev_config & I2C_ADDR_10_BITS) {
40081f17:	156807        	bbci	a8, 0, 40081f30 <i2c_esp32_write_addr+0x40>
		sys_write32(I2C_DATA_APB_REG(config->index),
40081f1a:	0668      	l32i.n	a6, a6, 0
			    (addr >> 8) & I2C_FIFO_RDATA);
40081f1c:	415850        	srli	a5, a5, 8
		sys_write32(I2C_DATA_APB_REG(config->index),
40081f1f:	1186e0        	slli	a8, a6, 2
40081f22:	886a      	add.n	a8, a8, a6
40081f24:	118820        	slli	a8, a8, 14
40081f27:	882a      	add.n	a8, a8, a2
40081f29:	0020c0        	memw
40081f2c:	0589      	s32i.n	a8, a5, 0
		addr_len++;
40081f2e:	290c      	movi.n	a9, 2
	if ((msg->flags & I2C_MSG_RW_MASK) != I2C_MSG_WRITE) {
40081f30:	080422        	l8ui	a2, a4, 8
40081f33:	116207        	bbci	a2, 0, 40081f48 <i2c_esp32_write_addr+0x58>
		*cmd++ = (struct i2c_esp32_cmd) {
40081f36:	940c      	movi.n	a4, 9
40081f38:	114480        	slli	a4, a4, 8
40081f3b:	209940        	or	a9, a9, a4
40081f3e:	234b      	addi.n	a2, a3, 4
40081f40:	0020c0        	memw
40081f43:	0399      	s32i.n	a9, a3, 0
40081f45:	0001c6        	j	40081f50 <i2c_esp32_write_addr+0x60>
		msg->len += addr_len;
40081f48:	1458      	l32i.n	a5, a4, 4
40081f4a:	032d      	mov.n	a2, a3
40081f4c:	959a      	add.n	a9, a5, a9
40081f4e:	1499      	s32i.n	a9, a4, 4
}
40081f50:	f01d      	retw.n
	...

40081f54 <i2c_esp32_configure_pins>:
{
40081f54:	004136        	entry	a1, 32
#ifndef ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_
#define ZEPHYR_INCLUDE_DRIVERS_GPIO_GPIO_ESP32_H_

static const char *gpio_esp32_get_gpio_for_pin(int pin)
{
	if (pin < 32) {
40081f57:	1fa052        	movi	a5, 31
		return NULL;
#endif /* CONFIG_GPIO_ESP32_0 */
	}

#if defined(CONFIG_GPIO_ESP32_1)
	return DT_LABEL(DT_INST(1, espressif_esp32_gpio));
40081f5a:	f9f7a1        	l32r	a10, 40080738 <_iram_text_start+0x1e8>
	if (pin < 32) {
40081f5d:	022527        	blt	a5, a2, 40081f63 <i2c_esp32_configure_pins+0xf>
		return DT_LABEL(DT_INST(0, espressif_esp32_gpio));
40081f60:	f9f7a1        	l32r	a10, 4008073c <_iram_text_start+0x1ec>
40081f63:	008225        	call8	40082784 <z_impl_device_get_binding>
		return -EINVAL;
40081f66:	eaaf82        	movi	a8, -22
	if (!gpio) {
40081f69:	047a16        	beqz	a10, 40081fb4 <i2c_esp32_configure_pins+0x60>
	ret = gpio_pin_configure(gpio, pin, pin_mode);
40081f6c:	746020        	extui	a6, a2, 0, 8
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
40081f6f:	032a52        	l32i	a5, a10, 12
	return api->pin_configure(port, pin, flags);
40081f72:	2a88      	l32i.n	a8, a10, 8
40081f74:	f9f3c1        	l32r	a12, 40080740 <_iram_text_start+0x1f0>
40081f77:	0888      	l32i.n	a8, a8, 0
40081f79:	06bd      	mov.n	a11, a6
40081f7b:	0008e0        	callx8	a8
40081f7e:	0a8d      	mov.n	a8, a10
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
40081f80:	0adc      	bnez.n	a10, 40081f94 <i2c_esp32_configure_pins+0x40>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
40081f82:	eb7c      	movi.n	a11, -2
40081f84:	401600        	ssl	a6
40081f87:	818bb0        	src	a8, a11, a11
40081f8a:	05b8      	l32i.n	a11, a5, 0
40081f8c:	10bb80        	and	a11, a11, a8
40081f8f:	05b9      	s32i.n	a11, a5, 0
	if (ret < 0) {
40081f91:	000086        	j	40081f97 <i2c_esp32_configure_pins+0x43>
40081f94:	01ca96        	bltz	a10, 40081fb4 <i2c_esp32_configure_pins+0x60>
	esp32_rom_gpio_matrix_out(pin, matrix_out, false, false);
40081f97:	0d0c      	movi.n	a13, 0
40081f99:	0dcd      	mov.n	a12, a13
40081f9b:	03bd      	mov.n	a11, a3
40081f9d:	20a220        	or	a10, a2, a2
40081fa0:	f9e981        	l32r	a8, 40080744 <_iram_text_start+0x1f4>
40081fa3:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(pin, matrix_in, false);
40081fa6:	0c0c      	movi.n	a12, 0
40081fa8:	04bd      	mov.n	a11, a4
40081faa:	02ad      	mov.n	a10, a2
40081fac:	f9e781        	l32r	a8, 40080748 <_iram_text_start+0x1f8>
40081faf:	0008e0        	callx8	a8
40081fb2:	080c      	movi.n	a8, 0
}
40081fb4:	082d      	mov.n	a2, a8
40081fb6:	f01d      	retw.n

40081fb8 <i2c_esp32_configure>:
{
40081fb8:	006136        	entry	a1, 48
	const struct i2c_esp32_config *config = dev->config;
40081fbb:	1248      	l32i.n	a4, a2, 4
	struct i2c_esp32_data *data = dev->data;
40081fbd:	3278      	l32i.n	a7, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40081fbf:	006360        	rsil	a6, 3
	ret = i2c_esp32_configure_pins(config->pins.scl,
40081fc2:	64c8      	l32i.n	a12, a4, 24
40081fc4:	54b8      	l32i.n	a11, a4, 20
40081fc6:	0724a2        	l32i	a10, a4, 28
40081fc9:	fff8a5        	call8	40081f54 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081fcc:	242a96        	bltz	a10, 40082212 <i2c_esp32_configure+0x25a>
	ret = i2c_esp32_configure_pins(config->pins.sda,
40081fcf:	44c8      	l32i.n	a12, a4, 16
40081fd1:	34b8      	l32i.n	a11, a4, 12
40081fd3:	84a8      	l32i.n	a10, a4, 32
40081fd5:	fff7e5        	call8	40081f54 <i2c_esp32_configure_pins>
	if (ret < 0) {
40081fd8:	236a96        	bltz	a10, 40082212 <i2c_esp32_configure+0x25a>
	clock_control_on(data->clock_dev, config->peripheral_id);
40081fdb:	a7a8      	l32i.n	a10, a7, 40
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
40081fdd:	0924b2        	l32i	a11, a4, 36
40081fe0:	2a58      	l32i.n	a5, a10, 8
40081fe2:	002552        	l32i	a5, a5, 0
40081fe5:	0005e0        	callx8	a5
	if (config->mode.tx_lsb_first) {
40081fe8:	280492        	l8ui	a9, a4, 40
		v |= I2C_TX_LSB_FIRST;
40081feb:	084c      	movi.n	a8, 64
40081fed:	050c      	movi.n	a5, 0
40081fef:	935890        	movnez	a5, a8, a9
	if (config->mode.rx_lsb_first) {
40081ff2:	290482        	l8ui	a8, a4, 41
40081ff5:	488c      	beqz.n	a8, 40081ffd <i2c_esp32_configure+0x45>
		v |= I2C_RX_LSB_FIRST;
40081ff7:	80a082        	movi	a8, 128
40081ffa:	205580        	or	a5, a5, a8
	if (dev_config & I2C_MODE_MASTER) {
40081ffd:	0498      	l32i.n	a9, a4, 0
40081fff:	1189e0        	slli	a8, a9, 2
40082002:	889a      	add.n	a8, a8, a9
40082004:	f9d291        	l32r	a9, 4008074c <_iram_text_start+0x1fc>
40082007:	118820        	slli	a8, a8, 14
4008200a:	889a      	add.n	a8, a8, a9
4008200c:	091c      	movi.n	a9, 16
4008200e:	0f0397        	bnone	a3, a9, 40082021 <i2c_esp32_configure+0x69>
40082011:	070c      	movi.n	a7, 0
		v |= I2C_MS_MODE;
40082013:	205590        	or	a5, a5, a9
40082016:	0020c0        	memw
40082019:	0879      	s32i.n	a7, a8, 0
4008201b:	001506        	j	40082073 <i2c_esp32_configure+0xbb>
4008201e:	000000        	ill
		uint32_t addr = (data->address & I2C_SLAVE_ADDR_V);
40082021:	021772        	l16ui	a7, a7, 4
40082024:	e47070        	extui	a7, a7, 0, 15
		if (dev_config & I2C_ADDR_10_BITS) {
40082027:	056307        	bbci	a3, 0, 40082030 <i2c_esp32_configure+0x78>
			addr |= I2C_ADDR_10BIT_EN;
4008202a:	f9af91        	l32r	a9, 400806e8 <_iram_text_start+0x198>
4008202d:	207790        	or	a7, a7, a9
40082030:	0020c0        	memw
40082033:	0879      	s32i.n	a7, a8, 0
		sys_clear_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
40082035:	0488      	l32i.n	a8, a4, 0

static ALWAYS_INLINE void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
40082037:	dfaf92        	movi	a9, -33
4008203a:	1178e0        	slli	a7, a8, 2
4008203d:	778a      	add.n	a7, a7, a8
4008203f:	f9c481        	l32r	a8, 40080750 <_iram_text_start+0x200>
40082042:	117720        	slli	a7, a7, 14
40082045:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40082047:	0020c0        	memw
4008204a:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008204c:	108890        	and	a8, a8, a9
4008204f:	0020c0        	memw
40082052:	0789      	s32i.n	a8, a7, 0
		sys_clear_bit(I2C_FIFO_CONF_REG(config->index),
40082054:	0488      	l32i.n	a8, a4, 0
40082056:	f9bf91        	l32r	a9, 40080754 <_iram_text_start+0x204>
40082059:	1178e0        	slli	a7, a8, 2
4008205c:	778a      	add.n	a7, a7, a8
4008205e:	f9b381        	l32r	a8, 4008072c <_iram_text_start+0x1dc>
40082061:	117720        	slli	a7, a7, 14
40082064:	778a      	add.n	a7, a7, a8
	uint32_t temp = *(volatile uint32_t *)addr;
40082066:	0020c0        	memw
40082069:	0788      	l32i.n	a8, a7, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
4008206b:	108890        	and	a8, a8, a9
4008206e:	0020c0        	memw
40082071:	0789      	s32i.n	a8, a7, 0
	sys_write32(v, I2C_CTR_REG(config->index));
40082073:	0488      	l32i.n	a8, a4, 0
	v |= I2C_CLK_EN;
40082075:	03a172        	movi	a7, 0x103
40082078:	205570        	or	a5, a5, a7
	sys_write32(v, I2C_CTR_REG(config->index));
4008207b:	1178e0        	slli	a7, a8, 2
4008207e:	778a      	add.n	a7, a7, a8
40082080:	f9b481        	l32r	a8, 40080750 <_iram_text_start+0x200>
40082083:	117720        	slli	a7, a7, 14
40082086:	778a      	add.n	a7, a7, a8
40082088:	0020c0        	memw
4008208b:	0759      	s32i.n	a5, a7, 0
	const struct i2c_esp32_config *config = dev->config;
4008208d:	1258      	l32i.n	a5, a2, 4
	struct i2c_esp32_data *data = dev->data;
4008208f:	3278      	l32i.n	a7, a2, 12
	uint32_t sys_clk_freq = 0;
40082091:	020c      	movi.n	a2, 0
40082093:	0129      	s32i.n	a2, a1, 0
	ret = i2c_esp32_configure_speed(dev, I2C_SPEED_GET(dev_config));
40082095:	243130        	extui	a3, a3, 1, 3
	uint32_t freq_hz = speed_to_freq_tbl[speed];
40082098:	f9b021        	l32r	a2, 40080758 <_iram_text_start+0x208>
4008209b:	1133e0        	slli	a3, a3, 2
4008209e:	323a      	add.n	a3, a2, a3
400820a0:	0328      	l32i.n	a2, a3, 0
		return -ENOTSUP;
400820a2:	ddafa2        	movi	a10, -35
	if (!freq_hz) {
400820a5:	163216        	beqz	a2, 4008220c <i2c_esp32_configure+0x254>
	if (clock_control_get_rate(data->clock_dev,
400820a8:	a7a8      	l32i.n	a10, a7, 40
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
400820aa:	95b8      	l32i.n	a11, a5, 36
400820ac:	2a38      	l32i.n	a3, a10, 8
400820ae:	01cd      	mov.n	a12, a1
400820b0:	3338      	l32i.n	a3, a3, 12
400820b2:	0003e0        	callx8	a3
400820b5:	151a56        	bnez	a10, 4008220a <i2c_esp32_configure+0x252>
		   I2C_SCL_LOW_PERIOD_REG(config->index));
400820b8:	0578      	l32i.n	a7, a5, 0
	period = (sys_clk_freq / freq_hz);
400820ba:	0188      	l32i.n	a8, a1, 0
400820bc:	c28820        	quou	a8, a8, a2
		   I2C_SCL_LOW_PERIOD_REG(config->index));
400820bf:	1127e0        	slli	a2, a7, 2
400820c2:	227a      	add.n	a2, a2, a7
400820c4:	f9a671        	l32r	a7, 4008075c <_iram_text_start+0x20c>
400820c7:	112220        	slli	a2, a2, 14
400820ca:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
400820cc:	0020c0        	memw
400820cf:	0278      	l32i.n	a7, a2, 0
	period /= 2U; /* Set hold and setup times to 1/2th of period */
400820d1:	413180        	srli	a3, a8, 1
	sys_write32(sys_read32(mem_addr) | v, mem_addr);
400820d4:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
400820d7:	0020c0        	memw
400820da:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
400820dc:	0578      	l32i.n	a7, a5, 0
	period /= 2U; /* Set sample and hold times to 1/4th of period */
400820de:	418280        	srli	a8, a8, 2
		   I2C_SCL_HIGH_PERIOD_REG(config->index));
400820e1:	1127e0        	slli	a2, a7, 2
400820e4:	227a      	add.n	a2, a2, a7
400820e6:	f99e71        	l32r	a7, 40080760 <_iram_text_start+0x210>
400820e9:	112220        	slli	a2, a2, 14
400820ec:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
400820ee:	0020c0        	memw
400820f1:	0278      	l32i.n	a7, a2, 0
400820f3:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
400820f6:	0020c0        	memw
400820f9:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_START_HOLD_REG(config->index));
400820fb:	0578      	l32i.n	a7, a5, 0
400820fd:	1127e0        	slli	a2, a7, 2
40082100:	227a      	add.n	a2, a2, a7
40082102:	f99871        	l32r	a7, 40080764 <_iram_text_start+0x214>
40082105:	112220        	slli	a2, a2, 14
40082108:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008210a:	0020c0        	memw
4008210d:	0278      	l32i.n	a7, a2, 0
4008210f:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
40082112:	0020c0        	memw
40082115:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_RSTART_SETUP_REG(config->index));
40082117:	0578      	l32i.n	a7, a5, 0
40082119:	1127e0        	slli	a2, a7, 2
4008211c:	227a      	add.n	a2, a2, a7
4008211e:	f99271        	l32r	a7, 40080768 <_iram_text_start+0x218>
40082121:	112220        	slli	a2, a2, 14
40082124:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082126:	0020c0        	memw
40082129:	0278      	l32i.n	a7, a2, 0
4008212b:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008212e:	0020c0        	memw
40082131:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_HOLD_REG(config->index));
40082133:	0578      	l32i.n	a7, a5, 0
40082135:	1127e0        	slli	a2, a7, 2
40082138:	227a      	add.n	a2, a2, a7
4008213a:	f98c71        	l32r	a7, 4008076c <_iram_text_start+0x21c>
4008213d:	112220        	slli	a2, a2, 14
40082140:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
40082142:	0020c0        	memw
40082145:	0278      	l32i.n	a7, a2, 0
40082147:	207370        	or	a7, a3, a7
	*(volatile uint32_t *)addr = data;
4008214a:	0020c0        	memw
4008214d:	0279      	s32i.n	a7, a2, 0
		   I2C_SCL_STOP_SETUP_REG(config->index));
4008214f:	0578      	l32i.n	a7, a5, 0
40082151:	1127e0        	slli	a2, a7, 2
40082154:	227a      	add.n	a2, a2, a7
40082156:	f98671        	l32r	a7, 40080770 <_iram_text_start+0x220>
40082159:	112220        	slli	a2, a2, 14
4008215c:	227a      	add.n	a2, a2, a7
	return *(volatile uint32_t *)addr;
4008215e:	0020c0        	memw
40082161:	0278      	l32i.n	a7, a2, 0
40082163:	203370        	or	a3, a3, a7
	*(volatile uint32_t *)addr = data;
40082166:	0020c0        	memw
40082169:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_HOLD_REG(config->index));
4008216b:	0538      	l32i.n	a3, a5, 0
4008216d:	1123e0        	slli	a2, a3, 2
40082170:	223a      	add.n	a2, a2, a3
40082172:	f98031        	l32r	a3, 40080774 <_iram_text_start+0x224>
40082175:	112220        	slli	a2, a2, 14
40082178:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
4008217a:	0020c0        	memw
4008217d:	0238      	l32i.n	a3, a2, 0
4008217f:	203830        	or	a3, a8, a3
	*(volatile uint32_t *)addr = data;
40082182:	0020c0        	memw
40082185:	0239      	s32i.n	a3, a2, 0
		   I2C_SDA_SAMPLE_REG(config->index));
40082187:	0538      	l32i.n	a3, a5, 0
40082189:	ffab52        	movi	a5, 0xfffffbff
4008218c:	1123e0        	slli	a2, a3, 2
4008218f:	223a      	add.n	a2, a2, a3
40082191:	f97931        	l32r	a3, 40080778 <_iram_text_start+0x228>
40082194:	112220        	slli	a2, a2, 14
40082197:	223a      	add.n	a2, a2, a3
	return *(volatile uint32_t *)addr;
40082199:	0020c0        	memw
4008219c:	0238      	l32i.n	a3, a2, 0
4008219e:	208830        	or	a8, a8, a3
	*(volatile uint32_t *)addr = data;
400821a1:	0020c0        	memw
400821a4:	0289      	s32i.n	a8, a2, 0
	sys_clear_bit(I2C_FIFO_CONF_REG(config->index), I2C_NONFIFO_EN_S);
400821a6:	0438      	l32i.n	a3, a4, 0
400821a8:	1123e0        	slli	a2, a3, 2
400821ab:	223a      	add.n	a2, a2, a3
400821ad:	f95f31        	l32r	a3, 4008072c <_iram_text_start+0x1dc>
400821b0:	112220        	slli	a2, a2, 14
400821b3:	223a      	add.n	a2, a2, a3
	uint32_t temp = *(volatile uint32_t *)addr;
400821b5:	0020c0        	memw
400821b8:	0238      	l32i.n	a3, a2, 0
	*(volatile uint32_t *)addr = temp & ~(1 << bit);
400821ba:	103350        	and	a3, a3, a5
400821bd:	0020c0        	memw
400821c0:	0239      	s32i.n	a3, a2, 0
	sys_write32(v << I2C_TIME_OUT_REG_S, I2C_TO_REG(config->index));
400821c2:	0438      	l32i.n	a3, a4, 0
400821c4:	1123e0        	slli	a2, a3, 2
400821c7:	223a      	add.n	a2, a2, a3
400821c9:	f96c31        	l32r	a3, 4008077c <_iram_text_start+0x22c>
400821cc:	112220        	slli	a2, a2, 14
400821cf:	223a      	add.n	a2, a2, a3
400821d1:	f96b31        	l32r	a3, 40080780 <_iram_text_start+0x230>
400821d4:	0020c0        	memw
400821d7:	0239      	s32i.n	a3, a2, 0
		    I2C_INT_ENA_REG(config->index));
400821d9:	0438      	l32i.n	a3, a4, 0
400821db:	1123e0        	slli	a2, a3, 2
400821de:	223a      	add.n	a2, a2, a3
400821e0:	f96931        	l32r	a3, 40080784 <_iram_text_start+0x234>
400821e3:	112220        	slli	a2, a2, 14
400821e6:	223a      	add.n	a2, a2, a3
400821e8:	a0a532        	movi	a3, 0x5a0
400821eb:	0020c0        	memw
400821ee:	0239      	s32i.n	a3, a2, 0
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400821f0:	03e430        	rsr.intenable	a3
	z_xt_ints_on(1 << irq);
400821f3:	c448      	l32i.n	a4, a4, 48
400821f5:	120c      	movi.n	a2, 1
400821f7:	401400        	ssl	a4
400821fa:	a12200        	sll	a2, a2
	val |= mask;
400821fd:	202230        	or	a2, a2, a3
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
40082200:	13e420        	wsr.intenable	a2
40082203:	002010        	rsync
40082206:	000086        	j	4008220c <i2c_esp32_configure+0x254>
40082209:	aa6c00        	floor.s	a6, f12, 0
	XTOS_RESTORE_INTLEVEL(key);
4008220c:	13e660        	wsr.ps	a6
4008220f:	002010        	rsync
}
40082212:	0a2d      	mov.n	a2, a10
40082214:	f01d      	retw.n
	...

40082218 <i2c_esp32_transmit>:
{
40082218:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008221b:	1238      	l32i.n	a3, a2, 4
	struct i2c_esp32_data *data = dev->data;
4008221d:	32a8      	l32i.n	a10, a2, 12
	sys_set_bit(I2C_CTR_REG(config->index), I2C_TRANS_START_S);
4008221f:	0328      	l32i.n	a2, a3, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082221:	092c      	movi.n	a9, 32
40082223:	1182e0        	slli	a8, a2, 2
40082226:	882a      	add.n	a8, a8, a2
40082228:	f94a21        	l32r	a2, 40080750 <_iram_text_start+0x200>
4008222b:	118820        	slli	a8, a8, 14
4008222e:	882a      	add.n	a8, a8, a2
	uint32_t temp = *(volatile uint32_t *)addr;
40082230:	0020c0        	memw
40082233:	0828      	l32i.n	a2, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
40082235:	202290        	or	a2, a2, a9
40082238:	0020c0        	memw
4008223b:	0829      	s32i.n	a2, a8, 0
	return z_impl_k_sem_take(sem, timeout);
4008223d:	f952c1        	l32r	a12, 40080788 <_iram_text_start+0x238>
40082240:	f8ced1        	l32r	a13, 40080578 <_iram_text_start+0x28>
40082243:	aa8b      	addi.n	a10, a10, 8
40082245:	00fc25        	call8	40083208 <z_impl_k_sem_take>
		return -ETIMEDOUT;
40082248:	c4af22        	movi	a2, -60
	if (k_sem_take(&data->fifo_sem, K_MSEC(I2C_ESP32_TIMEOUT_MS)) < 0) {
4008224b:	026a96        	bltz	a10, 40082275 <i2c_esp32_transmit+0x5d>
	status = sys_read32(I2C_INT_RAW_REG(config->index));
4008224e:	0328      	l32i.n	a2, a3, 0
40082250:	1182e0        	slli	a8, a2, 2
40082253:	882a      	add.n	a8, a8, a2
40082255:	f94d21        	l32r	a2, 4008078c <_iram_text_start+0x23c>
40082258:	118820        	slli	a8, a8, 14
4008225b:	882a      	add.n	a8, a8, a2
	return *(volatile uint32_t *)addr;
4008225d:	0020c0        	memw
40082260:	0898      	l32i.n	a9, a8, 0
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
40082262:	20a482        	movi	a8, 0x420
40082265:	108980        	and	a8, a9, a8
		return -EIO;
40082268:	b27c      	movi.n	a2, -5
	if (status & (I2C_ARBITRATION_LOST_INT_RAW | I2C_ACK_ERR_INT_RAW)) {
4008226a:	78cc      	bnez.n	a8, 40082275 <i2c_esp32_transmit+0x5d>
	if (status & I2C_TIME_OUT_INT_RAW) {
4008226c:	049890        	extui	a9, a9, 8, 1
	return 0;
4008226f:	c4af22        	movi	a2, -60
40082272:	832890        	moveqz	a2, a8, a9
}
40082275:	f01d      	retw.n
	...

40082278 <i2c_esp32_init>:
		    POST_KERNEL, CONFIG_I2C_INIT_PRIORITY,
		    &i2c_esp32_driver_api);
#endif /* DT_NODE_HAS_STATUS(DT_DRV_INST(1), okay) */

static int i2c_esp32_init(const struct device *dev)
{
40082278:	004136        	entry	a1, 32
	const struct i2c_esp32_config *config = dev->config;
4008227b:	1248      	l32i.n	a4, a2, 4
extern "C" {
#endif

static inline uint32_t i2c_map_dt_bitrate(uint32_t bitrate)
{
	switch (bitrate) {
4008227d:	f94451        	l32r	a5, 40080790 <_iram_text_start+0x240>
	struct i2c_esp32_data *data = dev->data;
	uint32_t bitrate_cfg = i2c_map_dt_bitrate(config->bitrate);
40082280:	e488      	l32i.n	a8, a4, 56
	struct i2c_esp32_data *data = dev->data;
40082282:	3268      	l32i.n	a6, a2, 12
	case I2C_BITRATE_STANDARD:
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST:
		return I2C_SPEED_FAST << I2C_SPEED_SHIFT;
	case I2C_BITRATE_FAST_PLUS:
		return I2C_SPEED_FAST_PLUS << I2C_SPEED_SHIFT;
40082284:	630c      	movi.n	a3, 6
	switch (bitrate) {
40082286:	2c1857        	beq	a8, a5, 400822b6 <i2c_esp32_init+0x3e>
40082289:	143587        	bltu	a5, a8, 400822a1 <i2c_esp32_init+0x29>
4008228c:	f94251        	l32r	a5, 40080794 <_iram_text_start+0x244>
		return I2C_SPEED_STANDARD << I2C_SPEED_SHIFT;
4008228f:	230c      	movi.n	a3, 2
	switch (bitrate) {
40082291:	211857        	beq	a8, a5, 400822b6 <i2c_esp32_init+0x3e>
		return I2C_SPEED_ULTRA << I2C_SPEED_SHIFT;
	}

	LOG_ERR("Invalid I2C bit rate value");

	return 0;
40082294:	f94131        	l32r	a3, 40080798 <_iram_text_start+0x248>
40082297:	450c      	movi.n	a5, 4
40082299:	c08830        	sub	a8, a8, a3
4008229c:	000446        	j	400822b1 <i2c_esp32_init+0x39>
4008229f:	510000        	lsi	f0, a0, 0x144
	switch (bitrate) {
400822a2:	3e          	.byte 0x3e
400822a3:	0cf9      	s32i.n	a15, a12, 0
		return I2C_SPEED_HIGH << I2C_SPEED_SHIFT;
400822a5:	185783        	lsi	f8, a7, 96
	switch (bitrate) {
400822a8:	310c      	movi.n	a1, 3
	return 0;
400822aa:	f93d      	lsi	f3, a9, 36
400822ac:	a50c      	movi.n	a5, 10
400822ae:	c08830        	sub	a8, a8, a3
400822b1:	030c      	movi.n	a3, 0
400822b3:	833580        	moveqz	a3, a5, a8
	data->clock_dev = device_get_binding(config->clock_name);
400822b6:	24a8      	l32i.n	a10, a4, 8
400822b8:	004ca5        	call8	40082784 <z_impl_device_get_binding>
400822bb:	a6a9      	s32i.n	a10, a6, 40
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400822bd:	006350        	rsil	a5, 3
	return z_impl_k_sem_init(sem, initial_count, limit);
400822c0:	1c0c      	movi.n	a12, 1
400822c2:	0cbd      	mov.n	a11, a12
400822c4:	a68b      	addi.n	a10, a6, 8
400822c6:	0175e5        	call8	40083a24 <z_impl_k_sem_init>
400822c9:	1c0c      	movi.n	a12, 1
400822cb:	20bcc0        	or	a11, a12, a12
400822ce:	18c6a2        	addi	a10, a6, 24
400822d1:	017525        	call8	40083a24 <z_impl_k_sem_init>
	__asm__ volatile("rsr.intenable %0" : "=r"(val));
400822d4:	03e460        	rsr.intenable	a6
	z_xt_ints_off(1 << irq);
400822d7:	c498      	l32i.n	a9, a4, 48
	val &= ~mask;
400822d9:	e87c      	movi.n	a8, -2
400822db:	401900        	ssl	a9
400822de:	818880        	src	a8, a8, a8
400822e1:	108860        	and	a8, a8, a6
	__asm__ volatile("wsr.intenable %0; rsync" : : "r"(val));
400822e4:	13e480        	wsr.intenable	a8
400822e7:	002010        	rsync
	irq_disable(config->irq.line);

	/* Even if irq_enable() is called on config->irq.line, disable
	 * interrupt sources in the I2C controller.
	 */
	sys_write32(0, I2C_INT_ENA_REG(config->index));
400822ea:	0468      	l32i.n	a6, a4, 0
	*(volatile uint32_t *)addr = data;
400822ec:	0a0c      	movi.n	a10, 0
400822ee:	1186e0        	slli	a8, a6, 2
400822f1:	886a      	add.n	a8, a8, a6
400822f3:	f92461        	l32r	a6, 40080784 <_iram_text_start+0x234>
400822f6:	118820        	slli	a8, a8, 14
400822f9:	886a      	add.n	a8, a8, a6
400822fb:	0020c0        	memw
400822fe:	0068a2        	s32i	a10, a8, 0
	esp32_rom_intr_matrix_set(0, config->irq.source, config->irq.line);
40082301:	0c24c2        	l32i	a12, a4, 48
40082304:	b4b8      	l32i.n	a11, a4, 44
40082306:	f90681        	l32r	a8, 40080720 <_iram_text_start+0x1d0>
40082309:	0008e0        	callx8	a8

	config->connect_irq();
4008230c:	1468      	l32i.n	a6, a4, 4
4008230e:	0006e0        	callx8	a6
	XTOS_RESTORE_INTLEVEL(key);
40082311:	13e650        	wsr.ps	a5
40082314:	002010        	rsync
	irq_unlock(key);

	return i2c_esp32_configure(dev, config->default_config | bitrate_cfg);
40082317:	d4b8      	l32i.n	a11, a4, 52
40082319:	02ad      	mov.n	a10, a2
4008231b:	20b3b0        	or	a11, a3, a11
4008231e:	ffc9a5        	call8	40081fb8 <i2c_esp32_configure>
}
40082321:	0a2d      	mov.n	a2, a10
40082323:	f01d      	retw.n
40082325:	000000        	ill

40082328 <i2c_esp32_wait$isra$1>:
static int i2c_esp32_wait(const struct device *dev,
40082328:	004136        	entry	a1, 32
	int counter = 0;
4008232b:	040c      	movi.n	a4, 0
	if (*counter > I2C_ESP32_TIMEOUT) {
4008232d:	85a352        	movi	a5, 0x385
	if (wait_cmd) {
40082330:	199347        	bne	a3, a4, 4008234d <i2c_esp32_wait$isra$1+0x25>
40082333:	000cc6        	j	4008236a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082336:	441b      	addi.n	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
40082338:	059457        	bne	a4, a5, 40082341 <i2c_esp32_wait$isra$1+0x19>
		return -ETIMEDOUT;
4008233b:	c4af22        	movi	a2, -60
4008233e:	001206        	j	4008238a <i2c_esp32_wait$isra$1+0x62>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082341:	58a282        	movi	a8, 0x258
40082344:	05a847        	bge	a8, a4, 4008234d <i2c_esp32_wait$isra$1+0x25>
	z_impl_k_yield();
40082347:	201110        	or	a1, a1, a1
4008234a:	00db25        	call8	400830fc <z_impl_k_yield>
		while (!wait_cmd->done) {
4008234d:	0020c0        	memw
40082350:	0388      	l32i.n	a8, a3, 0
40082352:	fe08d6        	bgez	a8, 40082336 <i2c_esp32_wait$isra$1+0xe>
40082355:	000446        	j	4008236a <i2c_esp32_wait$isra$1+0x42>
	*counter = *counter + 1;
40082358:	01c442        	addi	a4, a4, 1
	if (*counter > I2C_ESP32_TIMEOUT) {
4008235b:	85a332        	movi	a3, 0x385
4008235e:	d91437        	beq	a4, a3, 4008233b <i2c_esp32_wait$isra$1+0x13>
	if (*counter > I2C_ESP32_SPIN_THRESHOLD) {
40082361:	58a232        	movi	a3, 0x258
40082364:	02a347        	bge	a3, a4, 4008236a <i2c_esp32_wait$isra$1+0x42>
40082367:	00d965        	call8	400830fc <z_impl_k_yield>
	while (sys_read32(I2C_SR_REG(config->index)) & I2C_BUS_BUSY) {
4008236a:	002292        	l32i	a9, a2, 0
4008236d:	f90d31        	l32r	a3, 400807a4 <_iram_text_start+0x254>
40082370:	1189e0        	slli	a8, a9, 2
40082373:	808890        	add	a8, a8, a9
40082376:	118820        	slli	a8, a8, 14
40082379:	883a      	add.n	a8, a8, a3
	return *(volatile uint32_t *)addr;
4008237b:	0020c0        	memw
4008237e:	0888      	l32i.n	a8, a8, 0
40082380:	031c      	movi.n	a3, 16
40082382:	108830        	and	a8, a8, a3
40082385:	fcf856        	bnez	a8, 40082358 <i2c_esp32_wait$isra$1+0x30>
	return 0;
40082388:	082d      	mov.n	a2, a8
}
4008238a:	f01d      	retw.n

4008238c <i2c_esp32_transfer>:
{
4008238c:	008136        	entry	a1, 64
4008238f:	206220        	or	a6, a2, a2
	struct i2c_esp32_data *data = dev->data;
40082392:	032222        	l32i	a2, a2, 12
{
40082395:	744040        	extui	a4, a4, 0, 8
40082398:	f45050        	extui	a5, a5, 0, 16
	k_sem_take(&data->transfer_sem, K_FOREVER);
4008239b:	18c272        	addi	a7, a2, 24
	return z_impl_k_sem_take(sem, timeout);
4008239e:	f87cc1        	l32r	a12, 40080590 <_iram_text_start+0x40>
400823a1:	f87bd1        	l32r	a13, 40080590 <_iram_text_start+0x40>
400823a4:	20a770        	or	a10, a7, a7
400823a7:	00e625        	call8	40083208 <z_impl_k_sem_take>
	addr &= BIT_MASK(data->dev_config & I2C_ADDR_10_BITS ? 10 : 7);
400823aa:	0228      	l32i.n	a2, a2, 0
400823ac:	ffa392        	movi	a9, 0x3ff
400823af:	042020        	extui	a2, a2, 0, 1
400823b2:	7fa082        	movi	a8, 127
400823b5:	938920        	movnez	a8, a9, a2
400823b8:	1124f0        	slli	a2, a4, 1
400823bb:	224a      	add.n	a2, a2, a4
400823bd:	1122e0        	slli	a2, a2, 2
400823c0:	232a      	add.n	a2, a3, a2
400823c2:	105850        	and	a5, a8, a5
	addr <<= 1;
400823c5:	1155f0        	slli	a5, a5, 1
	for (i = 0U; i < num_msgs; i++) {
400823c8:	4129      	s32i.n	a2, a1, 16
	addr |= BIT(0);
400823ca:	120c      	movi.n	a2, 1
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400823cc:	202520        	or	a2, a5, a2
400823cf:	5129      	s32i.n	a2, a1, 20
	for (i = 0U; i < num_msgs; i++) {
400823d1:	007806        	j	400825b5 <i2c_esp32_transfer+0x229>
		if ((msgs[i].flags & I2C_MSG_RW_MASK) == I2C_MSG_WRITE) {
400823d4:	012642        	l32i	a4, a6, 4
400823d7:	0123a2        	l32i	a10, a3, 4
400823da:	002482        	l32i	a8, a4, 0
400823dd:	2398      	l32i.n	a9, a3, 8
400823df:	1128e0        	slli	a2, a8, 2
400823e2:	228a      	add.n	a2, a2, a8
400823e4:	f8f181        	l32r	a8, 400807a8 <_iram_text_start+0x258>
400823e7:	112220        	slli	a2, a2, 14
400823ea:	228a      	add.n	a2, a2, a8
400823ec:	03c8      	l32i.n	a12, a3, 0
400823ee:	080382        	l8ui	a8, a3, 8
400823f1:	01c9      	s32i.n	a12, a1, 0
400823f3:	048080        	extui	a8, a8, 0, 1
400823f6:	11a9      	s32i.n	a10, a1, 4
400823f8:	2199      	s32i.n	a9, a1, 8
400823fa:	b24b      	addi.n	a11, a2, 4
400823fc:	0c3856        	bnez	a8, 400824c3 <i2c_esp32_transfer+0x137>
	*cmd++ = (struct i2c_esp32_cmd) {
400823ff:	0020c0        	memw
40082402:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
40082404:	05dd      	mov.n	a13, a5
40082406:	01cd      	mov.n	a12, a1
40082408:	06ad      	mov.n	a10, a6
4008240a:	ffae65        	call8	40081ef0 <i2c_esp32_write_addr>
4008240d:	0abd      	mov.n	a11, a10
		uint32_t to_send = MIN(I2C_ESP32_BUFFER_SIZE, msg.len);
4008240f:	022c      	movi.n	a2, 32
40082411:	002986        	j	400824bb <i2c_esp32_transfer+0x12f>
40082414:	882000        	lsi	f0, a0, 0x220
40082417:	c7d163        	lsi	f6, a1, 0x31c
				    I2C_DATA_APB_REG(config->index));
4008241a:	adf8      	l32i.n	a15, a13, 40
4008241c:	7608      	l32i.n	a0, a6, 28
4008241e:	198a      	add.n	a1, a9, a8
			sys_write32(*msg.buf++,
40082420:	0198      	l32i.n	a9, a1, 0
				    I2C_DATA_APB_REG(config->index));
40082422:	04e8      	l32i.n	a14, a4, 0
			sys_write32(*msg.buf++,
40082424:	c91b      	addi.n	a12, a9, 1
40082426:	01c9      	s32i.n	a12, a1, 0
40082428:	0009c2        	l8ui	a12, a9, 0
				    I2C_DATA_APB_REG(config->index));
4008242b:	119ee0        	slli	a9, a14, 2
4008242e:	99ea      	add.n	a9, a9, a14
40082430:	119920        	slli	a9, a9, 14
40082433:	99da      	add.n	a9, a9, a13
	*(volatile uint32_t *)addr = data;
40082435:	0020c0        	memw
40082438:	09c9      	s32i.n	a12, a9, 0
		*cmd++ = (struct i2c_esp32_cmd) {
4008243a:	990c      	movi.n	a9, 9
4008243c:	11a980        	slli	a10, a9, 8
4008243f:	749080        	extui	a9, a8, 0, 8
40082442:	2099a0        	or	a9, a9, a10
40082445:	0020c0        	memw
40082448:	0b99      	s32i.n	a9, a11, 0
		msg.len -= to_send;
4008244a:	1198      	l32i.n	a9, a1, 4
4008244c:	c08980        	sub	a8, a9, a8
4008244f:	1189      	s32i.n	a8, a1, 4
		if (!msg.len && (msg.flags & I2C_MSG_STOP)) {
40082451:	c8dc      	bnez.n	a8, 40082471 <i2c_esp32_transfer+0xe5>
40082453:	080192        	l8ui	a9, a1, 8
40082456:	176917        	bbci	a9, 1, 40082471 <i2c_esp32_transfer+0xe5>
			*cmd = (struct i2c_esp32_cmd) {
40082459:	0020c0        	memw
4008245c:	1b89      	s32i.n	a8, a11, 4
4008245e:	f87c91        	l32r	a9, 40080650 <_iram_text_start+0x100>
40082461:	0020c0        	memw
40082464:	1b88      	l32i.n	a8, a11, 4
40082466:	108890        	and	a8, a8, a9
40082469:	f8d091        	l32r	a9, 400807ac <_iram_text_start+0x25c>
4008246c:	000586        	j	40082486 <i2c_esp32_transfer+0xfa>
4008246f:	0c0000        	lsi	f0, a0, 48
			*cmd = (struct i2c_esp32_cmd) {
40082472:	c008      	l32i.n	a0, a0, 48
40082474:	890020        	lsi	f2, a0, 0x224
40082477:	911b      	addi.n	a9, a1, 1
40082479:	c0f876        	lsi	f7, a8, 0x300
4008247c:	880020        	lsi	f2, a0, 0x220
4008247f:	901b      	addi.n	a9, a0, 1
40082481:	1088      	l32i.n	a8, a0, 4
40082483:	f87491        	l32r	a9, 40080654 <_iram_text_start+0x104>
40082486:	208890        	or	a8, a8, a9
40082489:	0020c0        	memw
4008248c:	1b89      	s32i.n	a8, a11, 4
	ret = i2c_esp32_transmit(dev);
4008248e:	06ad      	mov.n	a10, a6
40082490:	61b9      	s32i.n	a11, a1, 24
40082492:	ffd865        	call8	40082218 <i2c_esp32_transmit>
40082495:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082497:	61b8      	l32i.n	a11, a1, 24
40082499:	7acc      	bnez.n	a10, 400824a4 <i2c_esp32_transfer+0x118>
		return i2c_esp32_wait(dev, wait_cmd);
4008249b:	16a8      	l32i.n	a10, a6, 4
4008249d:	bb4b      	addi.n	a11, a11, 4
4008249f:	ffe8a5        	call8	40082328 <i2c_esp32_wait$isra$1>
400824a2:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
400824a4:	109896        	bltz	a8, 400825b1 <i2c_esp32_transfer+0x225>
		i2c_esp32_reset_fifo(config);
400824a7:	04a8      	l32i.n	a10, a4, 0
400824a9:	ffa125        	call8	40081ebc <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400824ac:	0488      	l32i.n	a8, a4, 0
400824ae:	11b8e0        	slli	a11, a8, 2
400824b1:	bb8a      	add.n	a11, a11, a8
400824b3:	f8bd81        	l32r	a8, 400807a8 <_iram_text_start+0x258>
400824b6:	11bb20        	slli	a11, a11, 14
400824b9:	bb8a      	add.n	a11, a11, a8
400824bb:	1188      	l32i.n	a8, a1, 4
400824bd:	f54856        	bnez	a8, 40082415 <i2c_esp32_transfer+0x89>
400824c0:	003b46        	j	400825b1 <i2c_esp32_transfer+0x225>
	*cmd++ = (struct i2c_esp32_cmd) {
400824c3:	080c      	movi.n	a8, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400824c5:	51d8      	l32i.n	a13, a1, 20
	*cmd++ = (struct i2c_esp32_cmd) {
400824c7:	0020c0        	memw
400824ca:	0289      	s32i.n	a8, a2, 0
	cmd = i2c_esp32_write_addr(dev, cmd, &msg, addr);
400824cc:	01cd      	mov.n	a12, a1
400824ce:	20a660        	or	a10, a6, a6
400824d1:	ffa1e5        	call8	40081ef0 <i2c_esp32_write_addr>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
400824d4:	003506        	j	400825ac <i2c_esp32_transfer+0x220>
400824d7:	000000        	ill
		uint32_t to_read = MIN(I2C_ESP32_BUFFER_SIZE, msg.len - 1);
400824da:	280b      	addi.n	a2, a8, -1
400824dc:	092c      	movi.n	a9, 32
400824de:	632290        	minu	a2, a2, a9
		if (to_read) {
400824e1:	0f1826        	beqi	a8, 1, 400824f4 <i2c_esp32_transfer+0x168>
			*cmd++ = (struct i2c_esp32_cmd) {
400824e4:	f883c1        	l32r	a12, 400806f0 <_iram_text_start+0x1a0>
400824e7:	74b020        	extui	a11, a2, 0, 8
400824ea:	20bbc0        	or	a11, a11, a12
400824ed:	0020c0        	memw
400824f0:	0ab9      	s32i.n	a11, a10, 0
400824f2:	aa4b      	addi.n	a10, a10, 4
		if (msg.len - to_read <= 1U) {
400824f4:	c08820        	sub	a8, a8, a2
400824f7:	3728f6        	bgeui	a8, 2, 40082532 <i2c_esp32_transfer+0x1a6>
			*cmd++ = (struct i2c_esp32_cmd) {
400824fa:	f8ad81        	l32r	a8, 400807b0 <_iram_text_start+0x260>
400824fd:	ba4b      	addi.n	a11, a10, 4
400824ff:	0020c0        	memw
40082502:	0a89      	s32i.n	a8, a10, 0
			if (msg.flags & I2C_MSG_STOP) {
40082504:	080182        	l8ui	a8, a1, 8
			to_read++;
40082507:	221b      	addi.n	a2, a2, 1
			if (msg.flags & I2C_MSG_STOP) {
40082509:	236817        	bbci	a8, 1, 40082530 <i2c_esp32_transfer+0x1a4>
				*cmd++ = (struct i2c_esp32_cmd) {
4008250c:	080c      	movi.n	a8, 0
4008250e:	0020c0        	memw
40082511:	1a89      	s32i.n	a8, a10, 4
40082513:	0020c0        	memw
40082516:	1a88      	l32i.n	a8, a10, 4
40082518:	f84ec1        	l32r	a12, 40080650 <_iram_text_start+0x100>
4008251b:	1088c0        	and	a8, a8, a12
4008251e:	f8a3c1        	l32r	a12, 400807ac <_iram_text_start+0x25c>
40082521:	2088c0        	or	a8, a8, a12
40082524:	0020c0        	memw
40082527:	1a89      	s32i.n	a8, a10, 4
40082529:	4a0c      	movi.n	a10, 4
		if (!wait_cmd) {
4008252b:	3b8c      	beqz.n	a11, 40082532 <i2c_esp32_transfer+0x1a6>
4008252d:	000786        	j	4008254f <i2c_esp32_transfer+0x1c3>
			*cmd++ = (struct i2c_esp32_cmd) {
40082530:	0bad      	mov.n	a10, a11
			*cmd++ = (struct i2c_esp32_cmd) {
40082532:	0b0c      	movi.n	a11, 0
40082534:	0020c0        	memw
40082537:	0ab9      	s32i.n	a11, a10, 0
40082539:	0020c0        	memw
4008253c:	0a88      	l32i.n	a8, a10, 0
4008253e:	f844c1        	l32r	a12, 40080650 <_iram_text_start+0x100>
40082541:	1088c0        	and	a8, a8, a12
40082544:	f844c1        	l32r	a12, 40080654 <_iram_text_start+0x104>
40082547:	2088c0        	or	a8, a8, a12
4008254a:	0020c0        	memw
4008254d:	0a89      	s32i.n	a8, a10, 0
	ret = i2c_esp32_transmit(dev);
4008254f:	06ad      	mov.n	a10, a6
40082551:	61b9      	s32i.n	a11, a1, 24
40082553:	ffcc65        	call8	40082218 <i2c_esp32_transmit>
40082556:	0a8d      	mov.n	a8, a10
	if (!ret) {
40082558:	61b8      	l32i.n	a11, a1, 24
4008255a:	006a56        	bnez	a10, 40082564 <i2c_esp32_transfer+0x1d8>
		return i2c_esp32_wait(dev, wait_cmd);
4008255d:	16a8      	l32i.n	a10, a6, 4
4008255f:	ffdca5        	call8	40082328 <i2c_esp32_wait$isra$1>
40082562:	0a8d      	mov.n	a8, a10
		if (ret < 0) {
40082564:	049896        	bltz	a8, 400825b1 <i2c_esp32_transfer+0x225>
		for (i = 0U; i < to_read; i++) {
40082567:	0a0c      	movi.n	a10, 0
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082569:	f872b1        	l32r	a11, 40080734 <_iram_text_start+0x1e4>
4008256c:	000786        	j	4008258e <i2c_esp32_transfer+0x202>
4008256f:	24c200        	extui	a12, a0, 2, 3
40082572:	caa200        	float.s	f10, a2, 0
		for (i = 0U; i < to_read; i++) {
40082575:	8ce001        	l32r	a0, 400658f8 <esp32_rom_gpio_matrix_out+0x5b9ec>
			uint32_t v = sys_read32(I2C_DATA_APB_REG(config->index));
40082578:	88ca11        	l32r	a1, 400648a0 <esp32_rom_gpio_matrix_out+0x5a994>
4008257b:	118820        	slli	a8, a8, 14
4008257e:	88ba      	add.n	a8, a8, a11
	return *(volatile uint32_t *)addr;
40082580:	0020c0        	memw
40082583:	08c8      	l32i.n	a12, a8, 0
			*msg.buf++ = v & I2C_FIFO_RDATA;
40082585:	0188      	l32i.n	a8, a1, 0
40082587:	d81b      	addi.n	a13, a8, 1
40082589:	01d9      	s32i.n	a13, a1, 0
4008258b:	0048c2        	s8i	a12, a8, 0
		for (i = 0U; i < to_read; i++) {
4008258e:	de9a27        	bne	a10, a2, 40082570 <i2c_esp32_transfer+0x1e4>
		msg.len -= to_read;
40082591:	1188      	l32i.n	a8, a1, 4
40082593:	c0a8a0        	sub	a10, a8, a10
40082596:	11a9      	s32i.n	a10, a1, 4
		i2c_esp32_reset_fifo(config);
40082598:	04a8      	l32i.n	a10, a4, 0
4008259a:	ff9225        	call8	40081ebc <i2c_esp32_reset_fifo$isra$0>
	for (; msg.len; cmd = (void *)I2C_COMD0_REG(config->index)) {
4008259d:	0488      	l32i.n	a8, a4, 0
4008259f:	11a8e0        	slli	a10, a8, 2
400825a2:	aa8a      	add.n	a10, a10, a8
400825a4:	f88181        	l32r	a8, 400807a8 <_iram_text_start+0x258>
400825a7:	11aa20        	slli	a10, a10, 14
400825aa:	aa8a      	add.n	a10, a10, a8
400825ac:	1188      	l32i.n	a8, a1, 4
400825ae:	f28856        	bnez	a8, 400824da <i2c_esp32_transfer+0x14e>
		if (ret < 0) {
400825b1:	33cb      	addi.n	a3, a3, 12
400825b3:	88cc      	bnez.n	a8, 400825bf <i2c_esp32_transfer+0x233>
	for (i = 0U; i < num_msgs; i++) {
400825b5:	4128      	l32i.n	a2, a1, 16
400825b7:	021237        	beq	a2, a3, 400825bd <i2c_esp32_transfer+0x231>
400825ba:	ff8586        	j	400823d4 <i2c_esp32_transfer+0x48>
400825bd:	080c      	movi.n	a8, 0
	z_impl_k_sem_give(sem);
400825bf:	07ad      	mov.n	a10, a7
400825c1:	6189      	s32i.n	a8, a1, 24
400825c3:	00c0a5        	call8	400831cc <z_impl_k_sem_give>
}
400825c6:	6188      	l32i.n	a8, a1, 24
400825c8:	082d      	mov.n	a2, a8
400825ca:	f01d      	retw.n

400825cc <uart_esp32_configure>:
	return 0;
}

static int uart_esp32_configure(const struct device *dev,
				const struct uart_config *cfg)
{
400825cc:	006136        	entry	a1, 48
	uint32_t conf0 = UART_TICK_REF_ALWAYS_ON;
	uint32_t conf1 = (UART_RX_FIFO_THRESH << UART_RXFIFO_FULL_THRHD_S)
		      | (UART_TX_FIFO_THRESH << UART_TXFIFO_EMPTY_THRHD_S);

	uart_esp32_configure_pins(dev);
400825cf:	1248      	l32i.n	a4, a2, 4
	esp32_rom_gpio_matrix_out(cfg->pins.tx,
400825d1:	0d0c      	movi.n	a13, 0
400825d3:	34b8      	l32i.n	a11, a4, 12
400825d5:	0724a2        	l32i	a10, a4, 28
400825d8:	0dcd      	mov.n	a12, a13
400825da:	f85a81        	l32r	a8, 40080744 <_iram_text_start+0x1f4>
400825dd:	0008e0        	callx8	a8
	esp32_rom_gpio_matrix_in(cfg->pins.rx,
400825e0:	44b8      	l32i.n	a11, a4, 16
400825e2:	84a8      	l32i.n	a10, a4, 32
400825e4:	0c0c      	movi.n	a12, 0
400825e6:	f85881        	l32r	a8, 40080748 <_iram_text_start+0x1f8>
400825e9:	0008e0        	callx8	a8
	if (cfg->pins.cts) {
400825ec:	a4a8      	l32i.n	a10, a4, 40
400825ee:	aa8c      	beqz.n	a10, 400825fc <uart_esp32_configure+0x30>
		esp32_rom_gpio_matrix_out(cfg->pins.cts,
400825f0:	0d0c      	movi.n	a13, 0
400825f2:	64b8      	l32i.n	a11, a4, 24
400825f4:	0dcd      	mov.n	a12, a13
400825f6:	f85381        	l32r	a8, 40080744 <_iram_text_start+0x1f4>
400825f9:	0008e0        	callx8	a8
	if (cfg->pins.rts) {
400825fc:	94a8      	l32i.n	a10, a4, 36
400825fe:	8a8c      	beqz.n	a10, 4008260a <uart_esp32_configure+0x3e>
		esp32_rom_gpio_matrix_in(cfg->pins.rts,
40082600:	54b8      	l32i.n	a11, a4, 20
40082602:	0c0c      	movi.n	a12, 0
40082604:	f85181        	l32r	a8, 40080748 <_iram_text_start+0x1f8>
40082607:	0008e0        	callx8	a8
	clock_control_on(DEV_DATA(dev)->clock_dev, DEV_CFG(dev)->peripheral_id);
4008260a:	3248      	l32i.n	a4, a2, 12
4008260c:	1258      	l32i.n	a5, a2, 4
4008260e:	24a8      	l32i.n	a10, a4, 8
	return api->on(dev, sys);
40082610:	b5b8      	l32i.n	a11, a5, 44
40082612:	2a48      	l32i.n	a4, a10, 8
40082614:	0448      	l32i.n	a4, a4, 0
40082616:	0004e0        	callx8	a4

	/*
	 * Reset RX Buffer by reading all received bytes
	 * Hardware Reset functionality can't be used with UART 1/2
	 */
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082619:	12b8      	l32i.n	a11, a2, 4
4008261b:	0b58      	l32i.n	a5, a11, 0
4008261d:	000106        	j	40082625 <uart_esp32_configure+0x59>
		(void) DEV_BASE(dev)->fifo;
40082620:	0020c0        	memw
40082623:	0548      	l32i.n	a4, a5, 0
	while (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) != 0) {
40082625:	0020c0        	memw
40082628:	7548      	l32i.n	a4, a5, 28
4008262a:	744040        	extui	a4, a4, 0, 8
4008262d:	fef456        	bnez	a4, 40082620 <uart_esp32_configure+0x54>
	}

	switch (cfg->parity) {
40082630:	040342        	l8ui	a4, a3, 4
40082633:	0d1426        	beqi	a4, 1, 40082644 <uart_esp32_configure+0x78>
40082636:	249c      	beqz.n	a4, 4008264c <uart_esp32_configure+0x80>
		break;
	case UART_CFG_PARITY_ODD:
		conf0 |= UART_PARITY;
		break;
	default:
		return -ENOTSUP;
40082638:	ddaf92        	movi	a9, -35
	switch (cfg->parity) {
4008263b:	022426        	beqi	a4, 2, 40082641 <uart_esp32_configure+0x75>
4008263e:	002606        	j	400826da <uart_esp32_configure+0x10e>
40082641:	0001c6        	j	4008264c <uart_esp32_configure+0x80>
		conf0 |= UART_PARITY;
40082644:	f85c51        	l32r	a5, 400807b4 <_iram_text_start+0x264>
40082647:	000106        	j	4008264f <uart_esp32_configure+0x83>
4008264a:	510000        	lsi	f0, a0, 0x144
		conf0 &= ~(UART_PARITY);
4008264d:	82f805        	call0	400055d0 <esp32_rom_i2c_writeReg+0x142c>
	}

	switch (cfg->stop_bits) {
40082650:	920503        	lsi	f0, a5, 0x248
	case UART_CFG_STOP_BITS_1_5:
	case UART_CFG_STOP_BITS_2:
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
		break;
	default:
		return -ENOTSUP;
40082653:	af          	.byte 0xaf
40082654:	0bdd      	mov.n	a13, a11
	switch (cfg->stop_bits) {
40082656:	f648      	l32i.n	a4, a6, 60
40082658:	c07f34        	lsi	f3, a15, 0x300
		conf0 |= cfg->stop_bits << UART_STOP_BIT_NUM_S;
4008265b:	11a8      	l32i.n	a10, a1, 4
	}

	if (cfg->data_bits <= UART_CFG_DATA_BITS_8) {
4008265d:	060382        	l8ui	a8, a3, 6
40082660:	7648f6        	bgeui	a8, 4, 400826da <uart_esp32_configure+0x10e>
		conf0 |= cfg->data_bits << UART_BIT_NUM_S;
40082663:	1148e0        	slli	a4, a8, 2
40082666:	2044a0        	or	a4, a4, a10
40082669:	204450        	or	a4, a4, a5
	} else {
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
4008266c:	070352        	l8ui	a5, a3, 7
4008266f:	d58c      	beqz.n	a5, 40082680 <uart_esp32_configure+0xb4>
40082671:	651566        	bnei	a5, 1, 400826da <uart_esp32_configure+0x10e>
	case UART_CFG_FLOW_CTRL_NONE:
		conf0 &= ~(UART_TX_FLOW_EN);
		conf1 &= ~(UART_RX_FLOW_EN);
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		conf0 |= UART_TX_FLOW_EN;
40082674:	f80851        	l32r	a5, 40080694 <_iram_text_start+0x144>
40082677:	204450        	or	a4, a4, a5
		conf1 |= UART_RX_FLOW_EN;
4008267a:	f84f51        	l32r	a5, 400807b8 <_iram_text_start+0x268>
		break;
4008267d:	000086        	j	40082683 <uart_esp32_configure+0xb7>
		conf1 &= ~(UART_RX_FLOW_EN);
40082680:	01a152        	movi	a5, 0x101
	uint32_t sys_clk_freq = 0;
40082683:	080c      	movi.n	a8, 0
40082685:	0189      	s32i.n	a8, a1, 0
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
40082687:	3288      	l32i.n	a8, a2, 12
	return api->get_rate(dev, sys, rate);
40082689:	bbb8      	l32i.n	a11, a11, 44
4008268b:	28a8      	l32i.n	a10, a8, 8
4008268d:	01cd      	mov.n	a12, a1
4008268f:	2a88      	l32i.n	a8, a10, 8
	default:
		return -ENOTSUP;
	}

	if (uart_esp32_set_baudrate(dev, cfg->baudrate)) {
40082691:	002362        	l32i	a6, a3, 0
40082694:	032882        	l32i	a8, a8, 12
40082697:	0008e0        	callx8	a8
4008269a:	12b8      	l32i.n	a11, a2, 4
	if (clock_control_get_rate(DEV_DATA(dev)->clock_dev,
4008269c:	6aec      	bnez.n	a10, 400826c6 <uart_esp32_configure+0xfa>
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
4008269e:	0188      	l32i.n	a8, a1, 0
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400826a0:	0ba8      	l32i.n	a10, a11, 0
	uint32_t clk_div = (((sys_clk_freq) << 4) / baudrate);
400826a2:	1188c0        	slli	a8, a8, 4
400826a5:	c28860        	quou	a8, a8, a6
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status)) {
400826a8:	0020c0        	memw
400826ab:	7a98      	l32i.n	a9, a10, 28
400826ad:	759090        	extui	a9, a9, 16, 8
400826b0:	ff4956        	bnez	a9, 400826a8 <uart_esp32_configure+0xdc>
	if (clk_div < 16) {
400826b3:	f90c      	movi.n	a9, 15
400826b5:	0db987        	bgeu	a9, a8, 400826c6 <uart_esp32_configure+0xfa>
	DEV_BASE(dev)->clk_div = ((clk_div >> 4) | (clk_div & 0xf));
400826b8:	419480        	srli	a9, a8, 4
400826bb:	348080        	extui	a8, a8, 0, 4
400826be:	208980        	or	a8, a9, a8
400826c1:	0020c0        	memw
400826c4:	5a89      	s32i.n	a8, a10, 20
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400826c6:	0338      	l32i.n	a3, a3, 0
400826c8:	3228      	l32i.n	a2, a2, 12
	}

	DEV_BASE(dev)->conf0 = conf0;
	DEV_BASE(dev)->conf1 = conf1;

	return 0;
400826ca:	090c      	movi.n	a9, 0
		DEV_DATA(dev)->uart_config.baudrate = cfg->baudrate;
400826cc:	0239      	s32i.n	a3, a2, 0
	DEV_BASE(dev)->conf0 = conf0;
400826ce:	0b28      	l32i.n	a2, a11, 0
400826d0:	0020c0        	memw
400826d3:	8249      	s32i.n	a4, a2, 32
	DEV_BASE(dev)->conf1 = conf1;
400826d5:	0020c0        	memw
400826d8:	9259      	s32i.n	a5, a2, 36
}
400826da:	092d      	mov.n	a2, a9
400826dc:	f01d      	retw.n
	...

400826e0 <uart_esp32_init>:

static int uart_esp32_init(const struct device *dev)
{
400826e0:	004136        	entry	a1, 32
	struct uart_esp32_data *data = DEV_DATA(dev);

	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826e3:	012282        	l32i	a8, a2, 4
	struct uart_esp32_data *data = DEV_DATA(dev);
400826e6:	032232        	l32i	a3, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826e9:	0228a2        	l32i	a10, a8, 8
400826ec:	000965        	call8	40082784 <z_impl_device_get_binding>

	__ASSERT_NO_MSG(data->clock_dev);

	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400826ef:	32b8      	l32i.n	a11, a2, 12
	data->clock_dev = device_get_binding(DEV_CFG(dev)->clock_name);
400826f1:	23a9      	s32i.n	a10, a3, 8
	uart_esp32_configure(dev, &DEV_DATA(dev)->uart_config);
400826f3:	02ad      	mov.n	a10, a2
400826f5:	ffed65        	call8	400825cc <uart_esp32_configure>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->dev_conf.irq_config_func(dev);
#endif
	return 0;
}
400826f8:	020c      	movi.n	a2, 0
400826fa:	f01d      	retw.n

400826fc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
400826fc:	004136        	entry	a1, 32
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
400826ff:	f82f81        	l32r	a8, 400807bc <_iram_text_start+0x26c>
40082702:	1132e0        	slli	a3, a2, 2
40082705:	221b      	addi.n	a2, a2, 1
40082707:	1122e0        	slli	a2, a2, 2
4008270a:	383a      	add.n	a3, a8, a3
4008270c:	282a      	add.n	a2, a8, a2
4008270e:	0338      	l32i.n	a3, a3, 0
40082710:	0248      	l32i.n	a4, a2, 0

		if (dev != NULL) {
			z_object_init(dev);
		}

		if ((entry->init(dev) == 0) && (dev != NULL)) {
40082712:	150c      	movi.n	a5, 1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
40082714:	000d86        	j	4008274e <z_sys_init_run_level+0x52>
40082717:	132800        	lsi	f0, a8, 76
		if ((entry->init(dev) == 0) && (dev != NULL)) {
4008271a:	0388      	l32i.n	a8, a3, 0
4008271c:	02ad      	mov.n	a10, a2
4008271e:	0008e0        	callx8	a8
40082721:	7aec      	bnez.n	a10, 4008274c <z_sys_init_run_level+0x50>
40082723:	52ac      	beqz.n	a2, 4008274c <z_sys_init_run_level+0x50>
			/* Initialization was successful.
			 * Set the init status bit so device is declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
40082725:	f82681        	l32r	a8, 400807c0 <_iram_text_start+0x270>
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
40082728:	f82791        	l32r	a9, 400807c4 <_iram_text_start+0x274>
4008272b:	c02280        	sub	a2, a2, a8
4008272e:	212420        	srai	a2, a2, 4
40082731:	418520        	srli	a8, a2, 5
40082734:	1188e0        	slli	a8, a8, 2
40082737:	889a      	add.n	a8, a8, a9
	uint32_t temp = *(volatile uint32_t *)addr;
40082739:	0020c0        	memw
4008273c:	0898      	l32i.n	a9, a8, 0
	*(volatile uint32_t *)addr = temp | (1 << bit);
4008273e:	401200        	ssl	a2
40082741:	a12500        	sll	a2, a5
40082744:	202290        	or	a2, a2, a9
40082747:	0020c0        	memw
4008274a:	0829      	s32i.n	a2, a8, 0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
4008274c:	338b      	addi.n	a3, a3, 8
4008274e:	c63347        	bltu	a3, a4, 40082718 <z_sys_init_run_level+0x1c>
		}
	}
}
40082751:	f01d      	retw.n
	...

40082754 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
40082754:	004136        	entry	a1, 32
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
40082757:	f81a81        	l32r	a8, 400807c0 <_iram_text_start+0x270>
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
4008275a:	f81a91        	l32r	a9, 400807c4 <_iram_text_start+0x274>
4008275d:	c08280        	sub	a8, a2, a8
40082760:	218480        	srai	a8, a8, 4
40082763:	412580        	srli	a2, a8, 5
40082766:	1122e0        	slli	a2, a2, 2
40082769:	229a      	add.n	a2, a2, a9
	uint32_t temp = *(volatile uint32_t *)addr;
4008276b:	0020c0        	memw
4008276e:	02a8      	l32i.n	a10, a2, 0
	return temp & (1 << bit);
40082770:	190c      	movi.n	a9, 1
40082772:	401800        	ssl	a8
40082775:	a12900        	sll	a2, a9
40082778:	1022a0        	and	a2, a2, a10
	return !!(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
4008277b:	080c      	movi.n	a8, 0
4008277d:	938920        	movnez	a8, a9, a2
40082780:	082d      	mov.n	a2, a8
}
40082782:	f01d      	retw.n

40082784 <z_impl_device_get_binding>:
{
40082784:	004136        	entry	a1, 32
40082787:	024d      	mov.n	a4, a2
	for (dev = __device_start; dev != __device_end; dev++) {
40082789:	f80d21        	l32r	a2, 400807c0 <_iram_text_start+0x270>
4008278c:	f80e31        	l32r	a3, 400807c4 <_iram_text_start+0x274>
4008278f:	025d      	mov.n	a5, a2
40082791:	000486        	j	400827a7 <z_impl_device_get_binding+0x23>
40082794:	a22000        	muluh	a2, a0, a0
		if (z_device_ready(dev) && (dev->name == name)) {
40082797:	fba520        	f64subc	a2, a5, 1, 0
4008279a:	ff          	.byte 0xff
4008279b:	005a16        	beqz	a10, 400827a4 <z_impl_device_get_binding+0x20>
4008279e:	002282        	l32i	a8, a2, 0
400827a1:	2f1847        	beq	a8, a4, 400827d4 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400827a4:	10c222        	addi	a2, a2, 16
400827a7:	ea9237        	bne	a2, a3, 40082795 <z_impl_device_get_binding+0x11>
	for (dev = __device_start; dev != __device_end; dev++) {
400827aa:	052d      	mov.n	a2, a5
400827ac:	0007c6        	j	400827cf <z_impl_device_get_binding+0x4b>
400827af:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400827b2:	02ad      	mov.n	a10, a2
400827b4:	fff9e5        	call8	40082754 <z_device_ready>
400827b7:	7acc      	bnez.n	a10, 400827c2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
400827b9:	10c222        	addi	a2, a2, 16
400827bc:	0003c6        	j	400827cf <z_impl_device_get_binding+0x4b>
400827bf:	000000        	ill
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
400827c2:	02b8      	l32i.n	a11, a2, 0
400827c4:	04ad      	mov.n	a10, a4
400827c6:	00fbe5        	call8	40083784 <strcmp>
400827c9:	feca56        	bnez	a10, 400827b9 <z_impl_device_get_binding+0x35>
400827cc:	000106        	j	400827d4 <z_impl_device_get_binding+0x50>
	for (dev = __device_start; dev != __device_end; dev++) {
400827cf:	df9237        	bne	a2, a3, 400827b2 <z_impl_device_get_binding+0x2e>
	return NULL;
400827d2:	020c      	movi.n	a2, 0
}
400827d4:	f01d      	retw.n
	...

400827d8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
400827d8:	004136        	entry	a1, 32
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
400827db:	02ad      	mov.n	a10, a2
400827dd:	012025        	call8	400839e0 <arch_system_halt>

400827e0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
400827e0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400827e3:	006350        	rsil	a5, 3
	return z_impl_k_current_get();
400827e6:	009da5        	call8	400831c0 <z_impl_k_current_get>
400827e9:	204aa0        	or	a4, a10, a10
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
400827ec:	03bd      	mov.n	a11, a3
400827ee:	02ad      	mov.n	a10, a2
400827f0:	fffe65        	call8	400827d8 <k_sys_fatal_error_handler>
	XTOS_RESTORE_INTLEVEL(key);
400827f3:	13e650        	wsr.ps	a5
400827f6:	002010        	rsync
	z_impl_k_thread_abort(thread);
400827f9:	04ad      	mov.n	a10, a4
400827fb:	00b7e5        	call8	40083378 <z_impl_k_thread_abort>
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
400827fe:	f01d      	retw.n

40082800 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
40082800:	004136        	entry	a1, 32
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
40082803:	f7f181        	l32r	a8, 400807c8 <_iram_text_start+0x278>
40082806:	190c      	movi.n	a9, 1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
40082808:	02a0a2        	movi	a10, 2
	z_sys_post_kernel = true;
4008280b:	004892        	s8i	a9, a8, 0
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
4008280e:	ffeee5        	call8	400826fc <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
40082811:	f7eec1        	l32r	a12, 400807cc <_iram_text_start+0x27c>
40082814:	f7efb1        	l32r	a11, 400807d0 <_iram_text_start+0x280>
40082817:	f7efa1        	l32r	a10, 400807d4 <_iram_text_start+0x284>
4008281a:	fe7ba5        	call8	40080fd4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
4008281d:	3a0c      	movi.n	a10, 3
4008281f:	ffede5        	call8	400826fc <z_sys_init_run_level>

	z_init_static_threads();
40082822:	00ade5        	call8	40083300 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
40082825:	fe3425        	call8	40080b68 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
40082828:	f7ec91        	l32r	a9, 400807d8 <_iram_text_start+0x288>
4008282b:	ea7c      	movi.n	a10, -2
4008282d:	0c0982        	l8ui	a8, a9, 12
40082830:	1088a0        	and	a8, a8, a10
40082833:	0c4982        	s8i	a8, a9, 12

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
40082836:	f01d      	retw.n

40082838 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
40082838:	020136        	entry	a1, 0x100

static ALWAYS_INLINE void arch_kernel_init(void)
{
	_cpu_t *cpu0 = &_kernel.cpus[0];

	cpu0->nested = 0;
4008283b:	f74d21        	l32r	a2, 40080570 <_iram_text_start+0x20>
4008283e:	030c      	movi.n	a3, 0
40082840:	0239      	s32i.n	a3, a2, 0
	 * access.  That saves 4 bytes of immediate value to store the
	 * address when compared to the legacy scheme.  But in SMP
	 * this record is a per-CPU thing and having it stored in a SR
	 * already is a big win.
	 */
	WSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR, cpu0);
40082842:	13f420        	wsr.misc0	a2
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
40082845:	01a142        	movi	a4, 0x101
40082848:	0e5142        	s16i	a4, a1, 28
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
4008284b:	10c142        	addi	a4, a1, 16
4008284e:	2249      	s32i.n	a4, a2, 8

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
40082850:	03ad      	mov.n	a10, a3
40082852:	ffeaa5        	call8	400826fc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
40082855:	1a0c      	movi.n	a10, 1
40082857:	ffea65        	call8	400826fc <z_sys_init_run_level>
	z_sched_init();
4008285a:	008865        	call8	400830e0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
4008285d:	f7de41        	l32r	a4, 400807d8 <_iram_text_start+0x288>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082860:	f7e151        	l32r	a5, 400807e4 <_iram_text_start+0x294>
	_kernel.ready_q.cache = &z_main_thread;
40082863:	e249      	s32i.n	a4, a2, 56
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
40082865:	3159      	s32i.n	a5, a1, 12
40082867:	f7ddd1        	l32r	a13, 400807dc <_iram_text_start+0x28c>
4008286a:	150c      	movi.n	a5, 1
4008286c:	f783c1        	l32r	a12, 40080678 <_iram_text_start+0x128>
4008286f:	f7dcb1        	l32r	a11, 400807e0 <_iram_text_start+0x290>
40082872:	03fd      	mov.n	a15, a3
40082874:	03ed      	mov.n	a14, a3
40082876:	1139      	s32i.n	a3, a1, 4
40082878:	0139      	s32i.n	a3, a1, 0
4008287a:	2159      	s32i.n	a5, a1, 8
4008287c:	04ad      	mov.n	a10, a4
4008287e:	009d25        	call8	40083250 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082881:	0d0462        	l8ui	a6, a4, 13
40082884:	b77c      	movi.n	a7, -5
40082886:	106670        	and	a6, a6, a7
40082889:	0d4462        	s8i	a6, a4, 13
	z_ready_thread(&z_main_thread);
4008288c:	04ad      	mov.n	a10, a4
4008288e:	0040a5        	call8	40082c98 <z_ready_thread>
	z_setup_new_thread(thread, stack,
40082891:	f7d741        	l32r	a4, 400807f0 <_iram_text_start+0x2a0>
40082894:	f90c      	movi.n	a9, 15
40082896:	f7d4d1        	l32r	a13, 400807e8 <_iram_text_start+0x298>
40082899:	f7d4b1        	l32r	a11, 400807ec <_iram_text_start+0x29c>
4008289c:	3139      	s32i.n	a3, a1, 12
4008289e:	1199      	s32i.n	a9, a1, 4
400828a0:	0139      	s32i.n	a3, a1, 0
400828a2:	03fd      	mov.n	a15, a3
400828a4:	03ed      	mov.n	a14, a3
400828a6:	2159      	s32i.n	a5, a1, 8
400828a8:	00a4c2        	movi	a12, 0x400
400828ab:	04ad      	mov.n	a10, a4
400828ad:	346192        	s32i	a9, a1, 208
400828b0:	0099e5        	call8	40083250 <z_setup_new_thread>
400828b3:	0d0462        	l8ui	a6, a4, 13
		_kernel.cpus[i].id = i;
400828b6:	144232        	s8i	a3, a2, 20
400828b9:	106670        	and	a6, a6, a7
400828bc:	0d4462        	s8i	a6, a4, 13
		_kernel.cpus[i].irq_stack =
400828bf:	f7cd61        	l32r	a6, 400807f4 <_iram_text_start+0x2a4>
	z_setup_new_thread(thread, stack,
400828c2:	342192        	l32i	a9, a1, 208
		_kernel.cpus[i].irq_stack =
400828c5:	1269      	s32i.n	a6, a2, 4
	z_setup_new_thread(thread, stack,
400828c7:	f7cd61        	l32r	a6, 400807fc <_iram_text_start+0x2ac>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400828ca:	3249      	s32i.n	a4, a2, 12
	z_setup_new_thread(thread, stack,
400828cc:	f7c7d1        	l32r	a13, 400807e8 <_iram_text_start+0x298>
400828cf:	f7cab1        	l32r	a11, 400807f8 <_iram_text_start+0x2a8>
400828d2:	3139      	s32i.n	a3, a1, 12
400828d4:	0139      	s32i.n	a3, a1, 0
400828d6:	03fd      	mov.n	a15, a3
400828d8:	03ed      	mov.n	a14, a3
400828da:	2159      	s32i.n	a5, a1, 8
400828dc:	1199      	s32i.n	a9, a1, 4
400828de:	00a4c2        	movi	a12, 0x400
400828e1:	06ad      	mov.n	a10, a6
400828e3:	0096e5        	call8	40083250 <z_setup_new_thread>
400828e6:	cd0432        	l8ui	a3, a4, 205
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
400828e9:	9269      	s32i.n	a6, a2, 36
400828eb:	103370        	and	a3, a3, a7
400828ee:	cd4432        	s8i	a3, a4, 205
		_kernel.cpus[i].irq_stack =
400828f1:	f7c331        	l32r	a3, 40080800 <_iram_text_start+0x2b0>
		_kernel.cpus[i].id = i;
400828f4:	2c4252        	s8i	a5, a2, 44
		_kernel.cpus[i].irq_stack =
400828f7:	7239      	s32i.n	a3, a2, 28
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
400828f9:	f7c231        	l32r	a3, 40080804 <_iram_text_start+0x2b4>
400828fc:	c239      	s32i.n	a3, a2, 48
	list->tail = (sys_dnode_t *)list;
400828fe:	d239      	s32i.n	a3, a2, 52
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082900:	006350        	rsil	a5, 3
	old_thread = _current;
40082903:	2248      	l32i.n	a4, a2, 8
	return _kernel.ready_q.cache;
40082905:	e238      	l32i.n	a3, a2, 56
	if (new_thread != old_thread) {
40082907:	121437        	beq	a4, a3, 4008291d <z_cstart+0xe5>
		z_reset_time_slice();
4008290a:	001565        	call8	40082a60 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
4008290d:	567c      	movi.n	a6, -11

void xtensa_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	return xtensa_switch(switch_to, switched_from);
4008290f:	1423a2        	l32i	a10, a3, 80
40082912:	136462        	s32i	a6, a4, 76
		_current_cpu->current = new_thread;
40082915:	2239      	s32i.n	a3, a2, 8
40082917:	50c4b2        	addi	a11, a4, 80
4008291a:	fef0e5        	call8	40081828 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
4008291d:	13e650        	wsr.ps	a5
40082920:	002010        	rsync
	...

40082924 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
40082924:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082927:	006370        	rsil	a7, 3
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
4008292a:	3238      	l32i.n	a3, a2, 12
4008292c:	f71161        	l32r	a6, 40080570 <_iram_text_start+0x20>
4008292f:	938c      	beqz.n	a3, 4008293c <z_impl_k_mutex_lock+0x18>
40082931:	22a8      	l32i.n	a10, a2, 8
40082933:	2698      	l32i.n	a9, a6, 8
40082935:	0f1a97        	beq	a10, a9, 40082948 <z_impl_k_mutex_lock+0x24>
40082938:	000946        	j	40082961 <z_impl_k_mutex_lock+0x3d>
4008293b:	264800        	lsi	f0, a8, 152

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
4008293e:	0e0442        	l8ui	a4, a4, 14
40082941:	234400        	sext	a4, a4, 7
40082944:	000086        	j	4008294a <z_impl_k_mutex_lock+0x26>
40082947:	424800        	xorb	b4, b8, b0
					mutex->owner_orig_prio;

		mutex->lock_count++;
4008294a:	331b      	addi.n	a3, a3, 1
4008294c:	3239      	s32i.n	a3, a2, 12
		mutex->owner = _current;
4008294e:	2638      	l32i.n	a3, a6, 8
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
40082950:	4249      	s32i.n	a4, a2, 16
		mutex->owner = _current;
40082952:	2239      	s32i.n	a3, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
40082954:	13e670        	wsr.ps	a7
40082957:	002010        	rsync
			mutex->owner_orig_prio);

		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
4008295a:	0a0c      	movi.n	a10, 0
4008295c:	002206        	j	400829e8 <z_impl_k_mutex_lock+0xc4>
4008295f:	500000        	lsi	f0, a0, 0x140
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
40082962:	cc2034        	lsi	f3, a0, 0x330
40082965:	e67093        	lsi	f9, a0, 0x398
40082968:	201013        	lsi	f1, a0, 128
4008296b:	0a7c00        	add.s	f7, f12, f0
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
4008296e:	001d86        	j	400829e8 <z_impl_k_mutex_lock+0xc4>
	}

	new_prio = new_prio_for_inheritance(_current->base.prio,
40082971:	0e0a82        	l8ui	a8, a10, 14
40082974:	0e09b2        	l8ui	a11, a9, 14
40082977:	238800        	sext	a8, a8, 7
4008297a:	23bb00        	sext	a11, a11, 7
4008297d:	43bb80        	min	a11, a11, a8
40082980:	00a032        	movi	a3, 0
40082983:	53bb30        	max	a11, a11, a3
					    mutex->owner->base.prio);

	LOG_DBG("adjusting prio up on mutex %p", mutex);

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
40082986:	05ab87        	bge	a11, a8, 4008298f <z_impl_k_mutex_lock+0x6b>
		return z_set_prio(mutex->owner, new_prio);
40082989:	0068a5        	call8	40083014 <z_set_prio>
4008298c:	203aa0        	or	a3, a10, a10
		resched = adjust_owner_prio(mutex, new_prio);
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
4008298f:	f79e61        	l32r	a6, 40080808 <_iram_text_start+0x2b8>
40082992:	20e440        	or	a14, a4, a4
40082995:	05fd      	mov.n	a15, a5
40082997:	02cd      	mov.n	a12, a2
40082999:	07bd      	mov.n	a11, a7
4008299b:	06ad      	mov.n	a10, a6
4008299d:	0065a5        	call8	40082ff8 <z_pend_curr>
	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
400829a0:	044a16        	beqz	a10, 400829e8 <z_impl_k_mutex_lock+0xc4>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400829a3:	006350        	rsil	a5, 3
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
400829a6:	0248      	l32i.n	a4, a2, 0

	key = k_spin_lock(&lock);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);

	new_prio = (waiter != NULL) ?
400829a8:	42b8      	l32i.n	a11, a2, 16
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
400829aa:	0f1427        	beq	a4, a2, 400829bd <z_impl_k_mutex_lock+0x99>
400829ad:	c48c      	beqz.n	a4, 400829bd <z_impl_k_mutex_lock+0x99>
400829af:	0e0442        	l8ui	a4, a4, 14
400829b2:	234400        	sext	a4, a4, 7
400829b5:	43b4b0        	min	a11, a4, a11
400829b8:	040c      	movi.n	a4, 0
400829ba:	53bb40        	max	a11, a11, a4
		mutex->owner_orig_prio;

	LOG_DBG("adjusting prio down on mutex %p", mutex);

	resched = adjust_owner_prio(mutex, new_prio) || resched;
400829bd:	22a8      	l32i.n	a10, a2, 8
	if (mutex->owner->base.prio != new_prio) {
400829bf:	0e0a22        	l8ui	a2, a10, 14
400829c2:	232200        	sext	a2, a2, 7
400829c5:	049b27        	bne	a11, a2, 400829cd <z_impl_k_mutex_lock+0xa9>

	if (resched) {
400829c8:	439c      	beqz.n	a3, 400829e0 <z_impl_k_mutex_lock+0xbc>
400829ca:	000146        	j	400829d3 <z_impl_k_mutex_lock+0xaf>
		return z_set_prio(mutex->owner, new_prio);
400829cd:	006465        	call8	40083014 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
400829d0:	ff4a16        	beqz	a10, 400829c8 <z_impl_k_mutex_lock+0xa4>
		z_reschedule(&lock, key);
400829d3:	20b550        	or	a11, a5, a5
400829d6:	20a660        	or	a10, a6, a6
400829d9:	0013a5        	call8	40082b14 <z_reschedule>
400829dc:	000186        	j	400829e6 <z_impl_k_mutex_lock+0xc2>
400829df:	e65000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
400829e2:	201013        	lsi	f1, a0, 128
400829e5:	5a7c00        	msub.s	f7, f12, f0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
400829e8:	0a2d      	mov.n	a2, a10
400829ea:	f01d      	retw.n

400829ec <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
400829ec:	004136        	entry	a1, 32
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
400829ef:	2288      	l32i.n	a8, a2, 8
		return -EINVAL;
400829f1:	a96c      	movi.n	a9, -22
	CHECKIF(mutex->owner == NULL) {
400829f3:	062816        	beqz	a8, 40082a59 <z_impl_k_mutex_unlock+0x6d>
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
400829f6:	f6de31        	l32r	a3, 40080570 <_iram_text_start+0x20>
		return -EPERM;
400829f9:	f97c      	movi.n	a9, -1
	CHECKIF(mutex->owner != _current) {
400829fb:	2338      	l32i.n	a3, a3, 8
400829fd:	589837        	bne	a8, a3, 40082a59 <z_impl_k_mutex_unlock+0x6d>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
40082a00:	0f0832        	l8ui	a3, a8, 15
40082a03:	339a      	add.n	a3, a3, a9
40082a05:	0f4832        	s8i	a3, a8, 15

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
40082a08:	3288      	l32i.n	a8, a2, 12
40082a0a:	061826        	beqi	a8, 1, 40082a14 <z_impl_k_mutex_unlock+0x28>
		mutex->lock_count--;
40082a0d:	889a      	add.n	a8, a8, a9
40082a0f:	3289      	s32i.n	a8, a2, 12
		goto k_mutex_unlock_return;
40082a11:	000fc6        	j	40082a54 <z_impl_k_mutex_unlock+0x68>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082a14:	006330        	rsil	a3, 3
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
40082a17:	22a8      	l32i.n	a10, a2, 8
40082a19:	42b8      	l32i.n	a11, a2, 16
	if (mutex->owner->base.prio != new_prio) {
40082a1b:	0e0a82        	l8ui	a8, a10, 14
40082a1e:	238800        	sext	a8, a8, 7
40082a21:	021b87        	beq	a11, a8, 40082a27 <z_impl_k_mutex_unlock+0x3b>
		return z_set_prio(mutex->owner, new_prio);
40082a24:	005ee5        	call8	40083014 <z_set_prio>

	/* Get the new owner, if any */
	new_owner = z_unpend_first_thread(&mutex->wait_q);
40082a27:	02ad      	mov.n	a10, a2
40082a29:	0067a5        	call8	400830a4 <z_unpend_first_thread>

	mutex->owner = new_owner;
40082a2c:	22a9      	s32i.n	a10, a2, 8

	LOG_DBG("new owner of mutex %p: %p (prio: %d)",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
40082a2e:	aa9c      	beqz.n	a10, 40082a4c <z_impl_k_mutex_unlock+0x60>
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
40082a30:	0e0a82        	l8ui	a8, a10, 14
40082a33:	238800        	sext	a8, a8, 7
40082a36:	4289      	s32i.n	a8, a2, 16
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
40082a38:	020c      	movi.n	a2, 0
40082a3a:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(new_owner, 0);
		z_ready_thread(new_owner);
40082a3d:	0025a5        	call8	40082c98 <z_ready_thread>
		z_reschedule(&lock, key);
40082a40:	f772a1        	l32r	a10, 40080808 <_iram_text_start+0x2b8>
40082a43:	03bd      	mov.n	a11, a3
40082a45:	000ce5        	call8	40082b14 <z_reschedule>
40082a48:	000206        	j	40082a54 <z_impl_k_mutex_unlock+0x68>
40082a4b:	32a900        	orbc	b10, b9, b0
	XTOS_RESTORE_INTLEVEL(key);
40082a4e:	13e630        	wsr.ps	a3
40082a51:	002010        	rsync
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
40082a54:	0019e5        	call8	40082bf4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
40082a57:	090c      	movi.n	a9, 0
}
40082a59:	092d      	mov.n	a2, a9
40082a5b:	f01d      	retw.n
40082a5d:	000000        	ill

40082a60 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
40082a60:	004136        	entry	a1, 32
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
40082a63:	f76a21        	l32r	a2, 4008080c <_iram_text_start+0x2bc>
40082a66:	002282        	l32i	a8, a2, 0
40082a69:	013816        	beqz	a8, 40082a80 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
40082a6c:	fecaa5        	call8	40081718 <z_clock_elapsed>
40082a6f:	002282        	l32i	a8, a2, 0
40082a72:	f6bf21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40082a75:	a8aa      	add.n	a10, a8, a10
40082a77:	42a9      	s32i.n	a10, a2, 16
		z_set_timeout_expiry(slice_time, false);
40082a79:	0b0c      	movi.n	a11, 0
40082a7b:	08ad      	mov.n	a10, a8
40082a7d:	00b2e5        	call8	400835ac <z_set_timeout_expiry>
	}
}
40082a80:	f01d      	retw.n
	...

40082a84 <z_swap_irqlock>:
{
40082a84:	004136        	entry	a1, 32
	old_thread = _current;
40082a87:	f6ba31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082a8a:	2358      	l32i.n	a5, a3, 8
	return _kernel.ready_q.cache;
40082a8c:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082a8e:	121547        	beq	a5, a4, 40082aa4 <z_swap_irqlock+0x20>
		z_reset_time_slice();
40082a91:	fffce5        	call8	40082a60 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082a94:	587c      	movi.n	a8, -11
40082a96:	1424a2        	l32i	a10, a4, 80
40082a99:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082a9c:	2349      	s32i.n	a4, a3, 8
40082a9e:	50c5b2        	addi	a11, a5, 80
40082aa1:	fed865        	call8	40081828 <xtensa_switch>
40082aa4:	13e620        	wsr.ps	a2
40082aa7:	002010        	rsync
	return _current->swap_retval;
40082aaa:	2338      	l32i.n	a3, a3, 8
}
40082aac:	132322        	l32i	a2, a3, 76
40082aaf:	f01d      	retw.n
40082ab1:	000000        	ill

40082ab4 <z_swap$isra$14>:
static inline int z_swap(struct k_spinlock *lock, k_spinlock_key_t key)
40082ab4:	004136        	entry	a1, 32
	old_thread = _current;
40082ab7:	f6ae31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082aba:	2358      	l32i.n	a5, a3, 8
40082abc:	e348      	l32i.n	a4, a3, 56
	if (new_thread != old_thread) {
40082abe:	121547        	beq	a5, a4, 40082ad4 <z_swap$isra$14+0x20>
		z_reset_time_slice();
40082ac1:	fff9e5        	call8	40082a60 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
40082ac4:	587c      	movi.n	a8, -11
40082ac6:	1424a2        	l32i	a10, a4, 80
40082ac9:	136582        	s32i	a8, a5, 76
		_current_cpu->current = new_thread;
40082acc:	2349      	s32i.n	a4, a3, 8
40082ace:	50c5b2        	addi	a11, a5, 80
40082ad1:	fed565        	call8	40081828 <xtensa_switch>
40082ad4:	13e620        	wsr.ps	a2
40082ad7:	002010        	rsync
	return _current->swap_retval;
40082ada:	2338      	l32i.n	a3, a3, 8
}
40082adc:	132322        	l32i	a2, a3, 76
40082adf:	f01d      	retw.n
40082ae1:	000000        	ill

40082ae4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
40082ae4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082ae7:	006340        	rsil	a4, 3
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
40082aea:	f6a181        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082aed:	00a092        	movi	a9, 0
40082af0:	046892        	s32i	a9, a8, 16
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
40082af3:	1182e0        	slli	a8, a2, 2
40082af6:	808820        	add	a8, a8, a2
		slice_time = k_ms_to_ticks_ceil32(slice);
40082af9:	f74421        	l32r	a2, 4008080c <_iram_text_start+0x2bc>
40082afc:	1188f0        	slli	a8, a8, 1
40082aff:	0289      	s32i.n	a8, a2, 0
		slice_max_prio = prio;
40082b01:	f74321        	l32r	a2, 40080810 <_iram_text_start+0x2c0>
40082b04:	0239      	s32i.n	a3, a2, 0
		z_reset_time_slice();
40082b06:	fff5a5        	call8	40082a60 <z_reset_time_slice>
	XTOS_RESTORE_INTLEVEL(key);
40082b09:	13e640        	wsr.ps	a4
40082b0c:	002010        	rsync
	}
}
40082b0f:	f01d      	retw.n
40082b11:	000000        	ill

40082b14 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
40082b14:	004136        	entry	a1, 32
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & 0xf) == 0; /* INTLEVEL field */
40082b17:	348030        	extui	a8, a3, 0, 4
40082b1a:	20a330        	or	a10, a3, a3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082b1d:	017856        	bnez	a8, 40082b38 <z_reschedule+0x24>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	_cpu_t *cpu;

	cpu = (_cpu_t *)RSR(CONFIG_XTENSA_KERNEL_CPU_PTR_SR);
40082b20:	03f480        	rsr.misc0	a8
40082b23:	002882        	l32i	a8, a8, 0
40082b26:	e8cc      	bnez.n	a8, 40082b38 <z_reschedule+0x24>
40082b28:	f69281        	l32r	a8, 40080570 <_iram_text_start+0x20>
	if (resched(key.key) && need_swap()) {
40082b2b:	e898      	l32i.n	a9, a8, 56
40082b2d:	2888      	l32i.n	a8, a8, 8
40082b2f:	051987        	beq	a9, a8, 40082b38 <z_reschedule+0x24>
		z_swap(lock, key);
40082b32:	fff825        	call8	40082ab4 <z_swap$isra$14>
40082b35:	000146        	j	40082b3e <z_reschedule+0x2a>
	XTOS_RESTORE_INTLEVEL(key);
40082b38:	13e6a0        	wsr.ps	a10
40082b3b:	002010        	rsync
	} else {
		k_spin_unlock(lock, key);
	}
}
40082b3e:	f01d      	retw.n

40082b40 <z_reschedule_irqlock>:

void z_reschedule_irqlock(uint32_t key)
{
40082b40:	004136        	entry	a1, 32
	return (key & 0xf) == 0; /* INTLEVEL field */
40082b43:	348020        	extui	a8, a2, 0, 4
40082b46:	20a220        	or	a10, a2, a2
	return arch_irq_unlocked(key) && !arch_is_in_isr();
40082b49:	00f856        	bnez	a8, 40082b5c <z_reschedule_irqlock+0x1c>
40082b4c:	03f480        	rsr.misc0	a8
40082b4f:	002882        	l32i	a8, a8, 0
40082b52:	006856        	bnez	a8, 40082b5c <z_reschedule_irqlock+0x1c>
	if (resched(key)) {
		z_swap_irqlock(key);
40082b55:	fff2e5        	call8	40082a84 <z_swap_irqlock>
40082b58:	000186        	j	40082b62 <z_reschedule_irqlock+0x22>
40082b5b:	e6a000        	lsi	f0, a0, 0x398
	XTOS_RESTORE_INTLEVEL(key);
40082b5e:	201013        	lsi	f1, a0, 128
40082b61:	f01d00        	subx8	a1, a13, a0

40082b64 <z_reschedule_unlocked>:
{
40082b64:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082b67:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
40082b6a:	fffd65        	call8	40082b40 <z_reschedule_irqlock>
}
40082b6d:	f01d      	retw.n
	...

40082b70 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
40082b70:	004136        	entry	a1, 32
40082b73:	0063a0        	rsil	a10, 3
	--_current->base.sched_locked;
40082b76:	f67e81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082b79:	2898      	l32i.n	a9, a8, 8
40082b7b:	0f0982        	l8ui	a8, a9, 15
40082b7e:	880b      	addi.n	a8, a8, -1
40082b80:	0f4982        	s8i	a8, a9, 15
	XTOS_RESTORE_INTLEVEL(key);
40082b83:	13e6a0        	wsr.ps	a10
40082b86:	002010        	rsync
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
40082b89:	f01d      	retw.n
	...

40082b8c <z_get_next_switch_handle>:
	_current_cpu->current = new_thread;
}

#ifdef CONFIG_USE_SWITCH
void *z_get_next_switch_handle(void *interrupted)
{
40082b8c:	004136        	entry	a1, 32
	_current->switch_handle = interrupted;
40082b8f:	f67881        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082b92:	28a8      	l32i.n	a10, a8, 8
	return _kernel.ready_q.cache;
40082b94:	e898      	l32i.n	a9, a8, 56
40082b96:	146a22        	s32i	a2, a10, 80
#endif
		}
	}
#else
	struct k_thread *thread = z_get_next_ready_thread();
	if (_current != thread) {
40082b99:	011a97        	beq	a10, a9, 40082b9e <z_get_next_switch_handle+0x12>
	_current_cpu->current = new_thread;
40082b9c:	2899      	s32i.n	a9, a8, 8
		set_current(thread);
	}
#endif

	wait_for_switch(_current);
	return _current->switch_handle;
40082b9e:	2888      	l32i.n	a8, a8, 8
}
40082ba0:	142822        	l32i	a2, a8, 80
40082ba3:	f01d      	retw.n
40082ba5:	000000        	ill

40082ba8 <update_cache>:
{
40082ba8:	004136        	entry	a1, 32
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082bab:	f71aa1        	l32r	a10, 40080814 <_iram_text_start+0x2c4>
40082bae:	00e665        	call8	40083a14 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082bb1:	f66f31        	l32r	a3, 40080570 <_iram_text_start+0x20>
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
40082bb4:	204aa0        	or	a4, a10, a10
	if (_current->base.thread_state & _THREAD_ABORTING) {
40082bb7:	022382        	l32i	a8, a3, 8
40082bba:	0d0892        	l8ui	a9, a8, 13
40082bbd:	086957        	bbci	a9, 5, 40082bc9 <update_cache+0x21>
		_current->base.thread_state |= _THREAD_DEAD;
40082bc0:	08a0a2        	movi	a10, 8
40082bc3:	2099a0        	or	a9, a9, a10
40082bc6:	0d4892        	s8i	a9, a8, 13
	return thread ? thread : _current_cpu->idle_thread;
40082bc9:	04cc      	bnez.n	a4, 40082bcd <update_cache+0x25>
40082bcb:	3348      	l32i.n	a4, a3, 12
	if (preempt_ok != 0) {
40082bcd:	42dc      	bnez.n	a2, 40082be5 <update_cache+0x3d>
	if (z_is_thread_prevented_from_running(_current)) {
40082bcf:	0d0892        	l8ui	a9, a8, 13
40082bd2:	449090        	extui	a9, a9, 0, 5
40082bd5:	c9cc      	bnez.n	a9, 40082be5 <update_cache+0x3d>
	if (is_preempt(_current) || is_metairq(thread)) {
40082bd7:	071892        	l16ui	a9, a8, 14
40082bda:	7fa0a2        	movi	a10, 127
40082bdd:	04ba97        	bgeu	a10, a9, 40082be5 <update_cache+0x3d>
		_kernel.ready_q.cache = _current;
40082be0:	e389      	s32i.n	a8, a3, 56
40082be2:	000286        	j	40082bf0 <update_cache+0x48>
		if (thread != _current) {
40082be5:	051847        	beq	a8, a4, 40082bee <update_cache+0x46>
			z_reset_time_slice();
40082be8:	201110        	or	a1, a1, a1
40082beb:	ffe765        	call8	40082a60 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
40082bee:	e349      	s32i.n	a4, a3, 56
}
40082bf0:	f01d      	retw.n
	...

40082bf4 <k_sched_unlock>:
{
40082bf4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082bf7:	006320        	rsil	a2, 3
		++_current->base.sched_locked;
40082bfa:	f65d81        	l32r	a8, 40080570 <_iram_text_start+0x20>
		update_cache(0);
40082bfd:	00a0a2        	movi	a10, 0
		++_current->base.sched_locked;
40082c00:	022892        	l32i	a9, a8, 8
40082c03:	0f0982        	l8ui	a8, a9, 15
40082c06:	01c882        	addi	a8, a8, 1
40082c09:	0f4982        	s8i	a8, a9, 15
		update_cache(0);
40082c0c:	fff9a5        	call8	40082ba8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082c0f:	13e620        	wsr.ps	a2
40082c12:	002010        	rsync
	z_reschedule_unlocked();
40082c15:	fff4e5        	call8	40082b64 <z_reschedule_unlocked>
}
40082c18:	f01d      	retw.n
	...

40082c1c <ready_thread>:
{
40082c1c:	004136        	entry	a1, 32
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082c1f:	0d0282        	l8ui	a8, a2, 13
40082c22:	448080        	extui	a8, a8, 0, 5
40082c25:	06b856        	bnez	a8, 40082c94 <ready_thread+0x78>
	if (z_is_thread_ready(thread)) {
40082c28:	62b8      	l32i.n	a11, a2, 24
40082c2a:	066b56        	bnez	a11, 40082c94 <ready_thread+0x78>
40082c2d:	f650a1        	l32r	a10, 40080570 <_iram_text_start+0x20>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082c30:	1f0c      	movi.n	a15, 1
40082c32:	fa88      	l32i.n	a8, a10, 60
40082c34:	0bcd      	mov.n	a12, a11
40082c36:	93cf80        	movnez	a12, a15, a8
40082c39:	74c0c0        	extui	a12, a12, 0, 8
40082c3c:	102ad2        	l32i	a13, a10, 64
40082c3f:	f6f5e1        	l32r	a14, 40080814 <_iram_text_start+0x2c4>
40082c42:	fcac      	beqz.n	a12, 40082c75 <ready_thread+0x59>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
40082c44:	c098e0        	sub	a9, a8, a14
40082c47:	93bf90        	movnez	a11, a15, a9
40082c4a:	7490b0        	extui	a9, a11, 0, 8
40082c4d:	49ac      	beqz.n	a9, 40082c75 <ready_thread+0x59>
	if (thread_1->base.prio < thread_2->base.prio) {
40082c4f:	0e0292        	l8ui	a9, a2, 14
40082c52:	239900        	sext	a9, a9, 7
40082c55:	0e08b2        	l8ui	a11, a8, 14
40082c58:	23bb00        	sext	a11, a11, 7
40082c5b:	0da9b7        	bge	a9, a11, 40082c6c <ready_thread+0x50>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	node->prev = successor->prev;
40082c5e:	1898      	l32i.n	a9, a8, 4
	node->next = successor;
40082c60:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082c62:	1299      	s32i.n	a9, a2, 4
	successor->prev->next = node;
40082c64:	0929      	s32i.n	a2, a9, 0
	successor->prev = node;
40082c66:	1829      	s32i.n	a2, a8, 4
40082c68:	0005c6        	j	40082c83 <ready_thread+0x67>
40082c6b:	1d8700        	lsi	f0, a7, 116
	return (node == list->tail) ? NULL : node->next;
40082c6e:	288205        	call0	400ab490 <_iram_text_end+0x2755e>
40082c71:	f85600        	lsi	f0, a6, 0x3e0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082c74:	d2fd      	lsi	f15, a2, 8
	node->prev = list->tail;
40082c76:	820162        	l8ui	a6, a1, 130
	list->tail->next = node;
40082c79:	102a      	add.n	a1, a0, a2
	node->next = list;
40082c7b:	0062e2        	s32i	a14, a2, 0
	list->tail->next = node;
40082c7e:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082c80:	106a22        	s32i	a2, a10, 64
	thread->base.thread_state |= states;
40082c83:	0d0282        	l8ui	a8, a2, 13
40082c86:	80af92        	movi	a9, -128
40082c89:	208890        	or	a8, a8, a9
40082c8c:	0d4282        	s8i	a8, a2, 13
		update_cache(0);
40082c8f:	0a0c      	movi.n	a10, 0
40082c91:	fff165        	call8	40082ba8 <update_cache>
}
40082c94:	f01d      	retw.n
	...

40082c98 <z_ready_thread>:
{
40082c98:	004136        	entry	a1, 32
40082c9b:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082c9d:	006330        	rsil	a3, 3
		ready_thread(thread);
40082ca0:	fff7a5        	call8	40082c1c <ready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082ca3:	13e630        	wsr.ps	a3
40082ca6:	002010        	rsync
}
40082ca9:	f01d      	retw.n
	...

40082cac <z_thread_timeout>:
{
40082cac:	004136        	entry	a1, 32
	struct k_thread *thread = CONTAINER_OF(timeout,
40082caf:	e8c232        	addi	a3, a2, -24
	if (thread->base.pended_on != NULL) {
40082cb2:	022342        	l32i	a4, a3, 8
40082cb5:	f5c222        	addi	a2, a2, -11
40082cb8:	01c416        	beqz	a4, 40082cd8 <z_thread_timeout+0x2c>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cbb:	006340        	rsil	a4, 3
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
40082cbe:	03ad      	mov.n	a10, a3
40082cc0:	00d3e5        	call8	40083a00 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
40082cc3:	000282        	l8ui	a8, a2, 0
40082cc6:	d97c      	movi.n	a9, -3
40082cc8:	108890        	and	a8, a8, a9
40082ccb:	004282        	s8i	a8, a2, 0
		thread->base.pended_on = NULL;
40082cce:	080c      	movi.n	a8, 0
40082cd0:	2389      	s32i.n	a8, a3, 8
	XTOS_RESTORE_INTLEVEL(key);
40082cd2:	13e640        	wsr.ps	a4
40082cd5:	002010        	rsync
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
40082cd8:	000282        	l8ui	a8, a2, 0
40082cdb:	b96c      	movi.n	a9, -21
40082cdd:	108890        	and	a8, a8, a9
40082ce0:	004282        	s8i	a8, a2, 0
	z_ready_thread(thread);
40082ce3:	03ad      	mov.n	a10, a3
40082ce5:	fffb25        	call8	40082c98 <z_ready_thread>
}
40082ce8:	f01d      	retw.n
	...

40082cec <z_sched_start>:
{
40082cec:	004136        	entry	a1, 32
40082cef:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082cf1:	006320        	rsil	a2, 3
	if (z_has_thread_started(thread)) {
40082cf4:	0d0a82        	l8ui	a8, a10, 13
40082cf7:	0be827        	bbsi	a8, 2, 40082d06 <z_sched_start+0x1a>
	XTOS_RESTORE_INTLEVEL(key);
40082cfa:	13e620        	wsr.ps	a2
40082cfd:	002010        	rsync
		return;
40082d00:	0005c6        	j	40082d1b <z_sched_start+0x2f>
40082d03:	000000        	ill
	thread->base.thread_state &= ~_THREAD_PRESTART;
40082d06:	fbaf92        	movi	a9, -5
40082d09:	108890        	and	a8, a8, a9
40082d0c:	0d4a82        	s8i	a8, a10, 13
	ready_thread(thread);
40082d0f:	fff0e5        	call8	40082c1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
40082d12:	f6c1a1        	l32r	a10, 40080818 <_iram_text_start+0x2c8>
40082d15:	20b220        	or	a11, a2, a2
40082d18:	ffdfa5        	call8	40082b14 <z_reschedule>
}
40082d1b:	000090        	retw
	...

40082d20 <z_move_thread_to_end_of_prio_q>:
{
40082d20:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082d23:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082d26:	0d0282        	l8ui	a8, a2, 13
40082d29:	056877        	bbci	a8, 7, 40082d32 <z_move_thread_to_end_of_prio_q+0x12>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082d2c:	20a220        	or	a10, a2, a2
40082d2f:	00cd25        	call8	40083a00 <sys_dlist_remove>
	return list->head == list;
40082d32:	f60f91        	l32r	a9, 40080570 <_iram_text_start+0x20>
40082d35:	f6b7d1        	l32r	a13, 40080814 <_iram_text_start+0x2c4>
40082d38:	0f2982        	l32i	a8, a9, 60
40082d3b:	1029c2        	l32i	a12, a9, 64
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d3e:	027816        	beqz	a8, 40082d69 <z_move_thread_to_end_of_prio_q+0x49>
40082d41:	2418d7        	beq	a8, a13, 40082d69 <z_move_thread_to_end_of_prio_q+0x49>
	if (thread_1->base.prio < thread_2->base.prio) {
40082d44:	0e02a2        	l8ui	a10, a2, 14
40082d47:	23aa00        	sext	a10, a10, 7
40082d4a:	0e08b2        	l8ui	a11, a8, 14
40082d4d:	23bb00        	sext	a11, a11, 7
40082d50:	0caab7        	bge	a10, a11, 40082d60 <z_move_thread_to_end_of_prio_q+0x40>
	node->prev = successor->prev;
40082d53:	18a8      	l32i.n	a10, a8, 4
	node->next = successor;
40082d55:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082d57:	12a9      	s32i.n	a10, a2, 4
	successor->prev->next = node;
40082d59:	0a29      	s32i.n	a2, a10, 0
	successor->prev = node;
40082d5b:	1829      	s32i.n	a2, a8, 4
40082d5d:	000586        	j	40082d77 <z_move_thread_to_end_of_prio_q+0x57>
	return (node == list->tail) ? NULL : node->next;
40082d60:	051c87        	beq	a12, a8, 40082d69 <z_move_thread_to_end_of_prio_q+0x49>
40082d63:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082d66:	fe0856        	bnez	a8, 40082d4a <z_move_thread_to_end_of_prio_q+0x2a>
	node->prev = list->tail;
40082d69:	0162c2        	s32i	a12, a2, 4
	list->tail->next = node;
40082d6c:	102982        	l32i	a8, a9, 64
	node->next = list;
40082d6f:	0062d2        	s32i	a13, a2, 0
	list->tail->next = node;
40082d72:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082d74:	106922        	s32i	a2, a9, 64
	thread->base.thread_state |= states;
40082d77:	0d0282        	l8ui	a8, a2, 13
40082d7a:	80afa2        	movi	a10, -128
40082d7d:	2088a0        	or	a8, a8, a10
		update_cache(thread == _current);
40082d80:	29a8      	l32i.n	a10, a9, 8
40082d82:	0d4282        	s8i	a8, a2, 13
40082d85:	c0aa20        	sub	a10, a10, a2
40082d88:	180c      	movi.n	a8, 1
40082d8a:	020c      	movi.n	a2, 0
40082d8c:	8328a0        	moveqz	a2, a8, a10
40082d8f:	02ad      	mov.n	a10, a2
40082d91:	ffe165        	call8	40082ba8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082d94:	13e630        	wsr.ps	a3
40082d97:	002010        	rsync
}
40082d9a:	f01d      	retw.n

40082d9c <z_time_slice>:
{
40082d9c:	004136        	entry	a1, 32
	if (slice_time && sliceable(_current)) {
40082d9f:	f69b81        	l32r	a8, 4008080c <_iram_text_start+0x2bc>
40082da2:	002892        	l32i	a9, a8, 0
40082da5:	f5f281        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082da8:	039916        	beqz	a9, 40082de5 <z_time_slice+0x49>
40082dab:	28a8      	l32i.n	a10, a8, 8
		&& !z_is_thread_timeout_active(thread);
40082dad:	7fa0b2        	movi	a11, 127
40082db0:	071a92        	l16ui	a9, a10, 14
40082db3:	2e3b97        	bltu	a11, a9, 40082de5 <z_time_slice+0x49>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
40082db6:	f69691        	l32r	a9, 40080810 <_iram_text_start+0x2c0>
40082db9:	0e0ab2        	l8ui	a11, a10, 14
40082dbc:	0998      	l32i.n	a9, a9, 0
40082dbe:	23bb00        	sext	a11, a11, 7
40082dc1:	202b97        	blt	a11, a9, 40082de5 <z_time_slice+0x49>
		&& !z_is_idle_thread_object(thread)
40082dc4:	f68b91        	l32r	a9, 400807f0 <_iram_text_start+0x2a0>
40082dc7:	1a1a97        	beq	a10, a9, 40082de5 <z_time_slice+0x49>
		&& !z_is_thread_timeout_active(thread);
40082dca:	6a98      	l32i.n	a9, a10, 24
40082dcc:	015956        	bnez	a9, 40082de5 <z_time_slice+0x49>
		if (ticks >= _current_cpu->slice_ticks) {
40082dcf:	4898      	l32i.n	a9, a8, 16
40082dd1:	082297        	blt	a2, a9, 40082ddd <z_time_slice+0x41>
			z_move_thread_to_end_of_prio_q(_current);
40082dd4:	fff4a5        	call8	40082d20 <z_move_thread_to_end_of_prio_q>
			z_reset_time_slice();
40082dd7:	ffc8a5        	call8	40082a60 <z_reset_time_slice>
40082dda:	0002c6        	j	40082de9 <z_time_slice+0x4d>
			_current_cpu->slice_ticks -= ticks;
40082ddd:	c09920        	sub	a9, a9, a2
40082de0:	4899      	s32i.n	a9, a8, 16
40082de2:	0000c6        	j	40082de9 <z_time_slice+0x4d>
		_current_cpu->slice_ticks = 0;
40082de5:	020c      	movi.n	a2, 0
40082de7:	4829      	s32i.n	a2, a8, 16
}
40082de9:	f01d      	retw.n
	...

40082dec <z_impl_k_thread_suspend>:
{
40082dec:	004136        	entry	a1, 32
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
40082def:	18c2a2        	addi	a10, a2, 24
40082df2:	007865        	call8	40083578 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082df5:	006330        	rsil	a3, 3
		if (z_is_thread_queued(thread)) {
40082df8:	0d0242        	l8ui	a4, a2, 13
40082dfb:	0d6477        	bbci	a4, 7, 40082e0c <z_impl_k_thread_suspend+0x20>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082dfe:	02ad      	mov.n	a10, a2
40082e00:	00bfe5        	call8	40083a00 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082e03:	0d0282        	l8ui	a8, a2, 13
40082e06:	648080        	extui	a8, a8, 0, 7
40082e09:	0d4282        	s8i	a8, a2, 13
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082e0c:	0d0282        	l8ui	a8, a2, 13
40082e0f:	041c      	movi.n	a4, 16
40082e11:	208840        	or	a8, a8, a4
		update_cache(thread == _current);
40082e14:	f5d741        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082e17:	0d4282        	s8i	a8, a2, 13
40082e1a:	24a8      	l32i.n	a10, a4, 8
40082e1c:	190c      	movi.n	a9, 1
40082e1e:	c0aa20        	sub	a10, a10, a2
40082e21:	080c      	movi.n	a8, 0
40082e23:	8389a0        	moveqz	a8, a9, a10
40082e26:	08ad      	mov.n	a10, a8
40082e28:	ffd7e5        	call8	40082ba8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
40082e2b:	13e630        	wsr.ps	a3
40082e2e:	002010        	rsync
	if (thread == _current) {
40082e31:	2438      	l32i.n	a3, a4, 8
40082e33:	029327        	bne	a3, a2, 40082e39 <z_impl_k_thread_suspend+0x4d>
		z_reschedule_unlocked();
40082e36:	ffd2e5        	call8	40082b64 <z_reschedule_unlocked>
}
40082e39:	f01d      	retw.n
	...

40082e3c <z_thread_single_abort>:
{
40082e3c:	004136        	entry	a1, 32
	if (thread->fn_abort != NULL) {
40082e3f:	112232        	l32i	a3, a2, 68
40082e42:	002316        	beqz	a3, 40082e48 <z_thread_single_abort+0xc>
		thread->fn_abort();
40082e45:	0003e0        	callx8	a3
40082e48:	18c2a2        	addi	a10, a2, 24
40082e4b:	0072e5        	call8	40083578 <z_abort_timeout>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082e4e:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
40082e51:	0d0232        	l8ui	a3, a2, 13
40082e54:	445030        	extui	a5, a3, 0, 5
40082e57:	032556        	bnez	a5, 40082e8d <z_thread_single_abort+0x51>
		if (z_is_thread_ready(thread)) {
40082e5a:	062252        	l32i	a5, a2, 24
40082e5d:	c5ec      	bnez.n	a5, 40082e8d <z_thread_single_abort+0x51>
			if (z_is_thread_queued(thread)) {
40082e5f:	233300        	sext	a3, a3, 7
40082e62:	00e3d6        	bgez	a3, 40082e74 <z_thread_single_abort+0x38>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082e65:	20a220        	or	a10, a2, a2
40082e68:	00b965        	call8	40083a00 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082e6b:	0d0232        	l8ui	a3, a2, 13
40082e6e:	643030        	extui	a3, a3, 0, 7
40082e71:	0d4232        	s8i	a3, a2, 13
			update_cache(thread == _current);
40082e74:	f5bf31        	l32r	a3, 40080570 <_iram_text_start+0x20>
40082e77:	150c      	movi.n	a5, 1
40082e79:	23a8      	l32i.n	a10, a3, 8
40082e7b:	030c      	movi.n	a3, 0
40082e7d:	c0aa20        	sub	a10, a10, a2
40082e80:	8335a0        	moveqz	a3, a5, a10
40082e83:	03ad      	mov.n	a10, a3
40082e85:	ffd225        	call8	40082ba8 <update_cache>
40082e88:	000606        	j	40082ea4 <z_thread_single_abort+0x68>
40082e8b:	170000        	lsi	f0, a0, 92
			if (z_is_thread_pending(thread)) {
40082e8e:	ad1363        	lsi	f6, a3, 0x2b4
	sys_dlist_remove(&thread->base.qnode_dlist);
40082e91:	b6e502        	s32c1i	a0, a5, 0x2d8
40082e94:	023200        	andb	b3, b2, b0
	thread->base.thread_state &= ~_THREAD_PENDING;
40082e97:	7c0d      	lsi	f0, a12, 48
40082e99:	3350d5        	call4	400b63a8 <_iram_text_end+0x32476>
40082e9c:	423210        	xorb	b3, b2, b1
40082e9f:	0c0d      	mov.n	a0, a12
				thread->base.pended_on = NULL;
40082ea1:	223903        	lsi	f0, a9, 136
		thread->base.thread_state |= mask;
40082ea4:	0d0232        	l8ui	a3, a2, 13
40082ea7:	850c      	movi.n	a5, 8
40082ea9:	203350        	or	a3, a3, a5
40082eac:	0d4232        	s8i	a3, a2, 13
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082eaf:	000886        	j	40082ed5 <z_thread_single_abort+0x99>
40082eb2:	a20000        	muluh	a0, a0, a0
40082eb5:	2518c3        	lsi	f12, a8, 148
40082eb8:	006c      	movi.n	a0, -32
	sys_dlist_remove(&thread->base.qnode_dlist);
40082eba:	20a330        	or	a10, a3, a3
40082ebd:	00b425        	call8	40083a00 <sys_dlist_remove>
40082ec0:	0d0382        	l8ui	a8, a3, 13
40082ec3:	d97c      	movi.n	a9, -3
40082ec5:	108890        	and	a8, a8, a9
40082ec8:	0d4382        	s8i	a8, a3, 13
			waiter->base.pended_on = NULL;
40082ecb:	2359      	s32i.n	a5, a3, 8
40082ecd:	136352        	s32i	a5, a3, 76
			ready_thread(waiter);
40082ed0:	03ad      	mov.n	a10, a3
40082ed2:	ffd4a5        	call8	40082c1c <ready_thread>
	return list->head == list;
40082ed5:	0c2232        	l32i	a3, a2, 48
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
40082ed8:	00a052        	movi	a5, 0
40082edb:	051357        	beq	a3, a5, 40082ee4 <z_thread_single_abort+0xa8>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
40082ede:	30c282        	addi	a8, a2, 48
40082ee1:	cf9387        	bne	a3, a8, 40082eb4 <z_thread_single_abort+0x78>
	XTOS_RESTORE_INTLEVEL(key);
40082ee4:	13e640        	wsr.ps	a4
40082ee7:	002010        	rsync
}
40082eea:	f01d      	retw.n

40082eec <unready_thread>:
{
40082eec:	004136        	entry	a1, 32
	if (z_is_thread_queued(thread)) {
40082eef:	0d0282        	l8ui	a8, a2, 13
40082ef2:	0e6877        	bbci	a8, 7, 40082f04 <unready_thread+0x18>
	sys_dlist_remove(&thread->base.qnode_dlist);
40082ef5:	20a220        	or	a10, a2, a2
40082ef8:	00b065        	call8	40083a00 <sys_dlist_remove>
	thread->base.thread_state &= ~states;
40082efb:	0d0282        	l8ui	a8, a2, 13
40082efe:	648080        	extui	a8, a8, 0, 7
40082f01:	0d4282        	s8i	a8, a2, 13
	update_cache(thread == _current);
40082f04:	f59b81        	l32r	a8, 40080570 <_iram_text_start+0x20>
40082f07:	0228a2        	l32i	a10, a8, 8
40082f0a:	180c      	movi.n	a8, 1
40082f0c:	c0aa20        	sub	a10, a10, a2
40082f0f:	020c      	movi.n	a2, 0
40082f11:	8328a0        	moveqz	a2, a8, a10
40082f14:	02ad      	mov.n	a10, a2
40082f16:	ffc925        	call8	40082ba8 <update_cache>
}
40082f19:	f01d      	retw.n
	...

40082f1c <z_remove_thread_from_ready_q>:
{
40082f1c:	004136        	entry	a1, 32
40082f1f:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082f21:	006330        	rsil	a3, 3
		unready_thread(thread);
40082f24:	fffc65        	call8	40082eec <unready_thread>
	XTOS_RESTORE_INTLEVEL(key);
40082f27:	13e630        	wsr.ps	a3
40082f2a:	002010        	rsync
}
40082f2d:	f01d      	retw.n
	...

40082f30 <z_tick_sleep$part$23>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
40082f30:	004136        	entry	a1, 32
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
40082f33:	007965        	call8	400836c8 <z_tick_get_32>
40082f36:	8032a0        	add	a3, a2, a10
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40082f39:	006350        	rsil	a5, 3
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	z_remove_thread_from_ready_q(_current);
40082f3c:	f58d41        	l32r	a4, 40080570 <_iram_text_start+0x20>
40082f3f:	0224a2        	l32i	a10, a4, 8
40082f42:	fffda5        	call8	40082f1c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
40082f45:	0224a2        	l32i	a10, a4, 8
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
40082f48:	f635b1        	l32r	a11, 4008081c <_iram_text_start+0x2cc>
40082f4b:	02cd      	mov.n	a12, a2
40082f4d:	31df20        	srai	a13, a2, 31
40082f50:	18caa2        	addi	a10, a10, 24
40082f53:	004e25        	call8	40083434 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
40082f56:	2428      	l32i.n	a2, a4, 8
	thread->base.thread_state |= _THREAD_SUSPENDED;
40082f58:	041c      	movi.n	a4, 16
40082f5a:	0d0282        	l8ui	a8, a2, 13

	(void)z_swap(&local_lock, key);
40082f5d:	05ad      	mov.n	a10, a5
40082f5f:	208840        	or	a8, a8, a4
40082f62:	0d4282        	s8i	a8, a2, 13
40082f65:	ffb4e5        	call8	40082ab4 <z_swap$isra$14>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
40082f68:	0075e5        	call8	400836c8 <z_tick_get_32>
40082f6b:	c0a3a0        	sub	a10, a3, a10
		return ticks;
	}
#endif

	return 0;
}
40082f6e:	020c      	movi.n	a2, 0
40082f70:	532a20        	max	a2, a10, a2
40082f73:	f01d      	retw.n
40082f75:	000000        	ill

40082f78 <add_to_waitq_locked>:
{
40082f78:	004136        	entry	a1, 32
	unready_thread(thread);
40082f7b:	02ad      	mov.n	a10, a2
40082f7d:	fff6e5        	call8	40082eec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
40082f80:	0d0282        	l8ui	a8, a2, 13
40082f83:	290c      	movi.n	a9, 2
40082f85:	208890        	or	a8, a8, a9
40082f88:	0d4282        	s8i	a8, a2, 13
	if (wait_q != NULL) {
40082f8b:	93bc      	beqz.n	a3, 40082fc8 <add_to_waitq_locked+0x50>
40082f8d:	0388      	l32i.n	a8, a3, 0
		thread->base.pended_on = wait_q;
40082f8f:	2239      	s32i.n	a3, a2, 8
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082f91:	78ac      	beqz.n	a8, 40082fbc <add_to_waitq_locked+0x44>
40082f93:	251387        	beq	a3, a8, 40082fbc <add_to_waitq_locked+0x44>
	if (thread_1->base.prio < thread_2->base.prio) {
40082f96:	0e0292        	l8ui	a9, a2, 14
40082f99:	239900        	sext	a9, a9, 7
40082f9c:	0e08a2        	l8ui	a10, a8, 14
40082f9f:	23aa00        	sext	a10, a10, 7
40082fa2:	0ca9a7        	bge	a9, a10, 40082fb2 <add_to_waitq_locked+0x3a>
	node->prev = successor->prev;
40082fa5:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40082fa7:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40082fa9:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40082fab:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40082fad:	1829      	s32i.n	a2, a8, 4
40082faf:	000546        	j	40082fc8 <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
40082fb2:	13a8      	l32i.n	a10, a3, 4
40082fb4:	0418a7        	beq	a8, a10, 40082fbc <add_to_waitq_locked+0x44>
40082fb7:	0888      	l32i.n	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40082fb9:	fdf856        	bnez	a8, 40082f9c <add_to_waitq_locked+0x24>
	node->prev = list->tail;
40082fbc:	1388      	l32i.n	a8, a3, 4
	node->next = list;
40082fbe:	0239      	s32i.n	a3, a2, 0
	node->prev = list->tail;
40082fc0:	1289      	s32i.n	a8, a2, 4
	list->tail->next = node;
40082fc2:	1388      	l32i.n	a8, a3, 4
40082fc4:	0829      	s32i.n	a2, a8, 0
	list->tail = node;
40082fc6:	1329      	s32i.n	a2, a3, 4
}
40082fc8:	f01d      	retw.n
	...

40082fcc <pend>:
{
40082fcc:	004136        	entry	a1, 32
40082fcf:	20b330        	or	a11, a3, a3
40082fd2:	006360        	rsil	a6, 3
		add_to_waitq_locked(thread, wait_q);
40082fd5:	20a220        	or	a10, a2, a2
40082fd8:	fff9e5        	call8	40082f78 <add_to_waitq_locked>
	XTOS_RESTORE_INTLEVEL(key);
40082fdb:	13e660        	wsr.ps	a6
40082fde:	002010        	rsync
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40082fe1:	020466        	bnei	a4, -1, 40082fe7 <pend+0x1b>
40082fe4:	0c0526        	beqi	a5, -1, 40082ff4 <pend+0x28>
40082fe7:	f60db1        	l32r	a11, 4008081c <_iram_text_start+0x2cc>
40082fea:	04cd      	mov.n	a12, a4
40082fec:	05dd      	mov.n	a13, a5
40082fee:	18c2a2        	addi	a10, a2, 24
40082ff1:	004425        	call8	40083434 <z_add_timeout>
}
40082ff4:	f01d      	retw.n
	...

40082ff8 <z_pend_curr>:
{
40082ff8:	004136        	entry	a1, 32
	pend(_current, wait_q, timeout);
40082ffb:	f55d81        	l32r	a8, 40080570 <_iram_text_start+0x20>
{
40082ffe:	20d770        	or	a13, a7, a7
	pend(_current, wait_q, timeout);
40083001:	0228a2        	l32i	a10, a8, 8
40083004:	06cd      	mov.n	a12, a6
40083006:	04bd      	mov.n	a11, a4
40083008:	fffc25        	call8	40082fcc <pend>
	return z_swap(lock, key);
4008300b:	03ad      	mov.n	a10, a3
4008300d:	ffaa65        	call8	40082ab4 <z_swap$isra$14>
}
40083010:	0a2d      	mov.n	a2, a10
40083012:	f01d      	retw.n

40083014 <z_set_prio>:
{
40083014:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083017:	006340        	rsil	a4, 3
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
4008301a:	0d0252        	l8ui	a5, a2, 13
4008301d:	743030        	extui	a3, a3, 0, 8
40083020:	445050        	extui	a5, a5, 0, 5
40083023:	06e556        	bnez	a5, 40083095 <z_set_prio+0x81>
		if (need_sched) {
40083026:	6258      	l32i.n	a5, a2, 24
40083028:	069556        	bnez	a5, 40083095 <z_set_prio+0x81>
	sys_dlist_remove(&thread->base.qnode_dlist);
4008302b:	02ad      	mov.n	a10, a2
4008302d:	009d25        	call8	40083a00 <sys_dlist_remove>
	return list->head == list;
40083030:	f55091        	l32r	a9, 40080570 <_iram_text_start+0x20>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40083033:	1d0c      	movi.n	a13, 1
40083035:	f988      	l32i.n	a8, a9, 60
40083037:	05bd      	mov.n	a11, a5
40083039:	93bd80        	movnez	a11, a13, a8
				thread->base.prio = prio;
4008303c:	0e4232        	s8i	a3, a2, 14
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
4008303f:	74b0b0        	extui	a11, a11, 0, 8
40083042:	f5f4c1        	l32r	a12, 40080814 <_iram_text_start+0x2c4>
40083045:	1bbc      	beqz.n	a11, 4008307a <z_set_prio+0x66>
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083047:	c0a8c0        	sub	a10, a8, a12
4008304a:	935da0        	movnez	a5, a13, a10
4008304d:	74a050        	extui	a10, a5, 0, 8
40083050:	6aac      	beqz.n	a10, 4008307a <z_set_prio+0x66>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40083052:	102952        	l32i	a5, a9, 64
	if (thread_1->base.prio < thread_2->base.prio) {
40083055:	233300        	sext	a3, a3, 7
40083058:	0e08a2        	l8ui	a10, a8, 14
4008305b:	23aa00        	sext	a10, a10, 7
4008305e:	0fa3a7        	bge	a3, a10, 40083071 <z_set_prio+0x5d>
	node->prev = successor->prev;
40083061:	1838      	l32i.n	a3, a8, 4
	node->next = successor;
40083063:	0289      	s32i.n	a8, a2, 0
	node->prev = successor->prev;
40083065:	1239      	s32i.n	a3, a2, 4
	successor->prev->next = node;
40083067:	0329      	s32i.n	a2, a3, 0
	successor->prev = node;
40083069:	1829      	s32i.n	a2, a8, 4
4008306b:	000706        	j	4008308b <z_set_prio+0x77>
4008306e:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40083071:	051587        	beq	a5, a8, 4008307a <z_set_prio+0x66>
40083074:	002882        	l32i	a8, a8, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40083077:	fdd856        	bnez	a8, 40083058 <z_set_prio+0x44>
	node->prev = list->tail;
4008307a:	102932        	l32i	a3, a9, 64
	node->next = list;
4008307d:	0062c2        	s32i	a12, a2, 0
	node->prev = list->tail;
40083080:	016232        	s32i	a3, a2, 4
	list->tail->next = node;
40083083:	102932        	l32i	a3, a9, 64
40083086:	0329      	s32i.n	a2, a3, 0
	list->tail = node;
40083088:	106922        	s32i	a2, a9, 64
			update_cache(1);
4008308b:	1a0c      	movi.n	a10, 1
4008308d:	ffb1a5        	call8	40082ba8 <update_cache>
40083090:	120c      	movi.n	a2, 1
40083092:	000106        	j	4008309a <z_set_prio+0x86>
			thread->base.prio = prio;
40083095:	0e4232        	s8i	a3, a2, 14
40083098:	020c      	movi.n	a2, 0
	XTOS_RESTORE_INTLEVEL(key);
4008309a:	13e640        	wsr.ps	a4
4008309d:	002010        	rsync
}
400830a0:	f01d      	retw.n
	...

400830a4 <z_unpend_first_thread>:
{
400830a4:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400830a7:	006330        	rsil	a3, 3
		ret = _priq_wait_best(&wait_q->waitq);
400830aa:	20a220        	or	a10, a2, a2
400830ad:	009665        	call8	40083a14 <z_priq_dumb_best>
400830b0:	0a2d      	mov.n	a2, a10
	XTOS_RESTORE_INTLEVEL(key);
400830b2:	13e630        	wsr.ps	a3
400830b5:	002010        	rsync

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
400830b8:	0aac      	beqz.n	a10, 400830dc <z_unpend_first_thread+0x38>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400830ba:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
400830bd:	009425        	call8	40083a00 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
400830c0:	0d0282        	l8ui	a8, a2, 13
400830c3:	d97c      	movi.n	a9, -3
400830c5:	108890        	and	a8, a8, a9
400830c8:	0d4282        	s8i	a8, a2, 13
		thread->base.pended_on = NULL;
400830cb:	080c      	movi.n	a8, 0
400830cd:	026282        	s32i	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
400830d0:	13e630        	wsr.ps	a3
400830d3:	002010        	rsync
	return z_abort_timeout(&thread->base.timeout);
400830d6:	18c2a2        	addi	a10, a2, 24
400830d9:	0049e5        	call8	40083578 <z_abort_timeout>
}
400830dc:	f01d      	retw.n
	...

400830e0 <z_sched_init>:
{
400830e0:	004136        	entry	a1, 32
	list->head = (sys_dnode_t *)list;
400830e3:	f52381        	l32r	a8, 40080570 <_iram_text_start+0x20>
400830e6:	f5cb91        	l32r	a9, 40080814 <_iram_text_start+0x2c4>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
400830e9:	00a0b2        	movi	a11, 0
400830ec:	0f6892        	s32i	a9, a8, 60
	list->tail = (sys_dnode_t *)list;
400830ef:	106892        	s32i	a9, a8, 64
400830f2:	20abb0        	or	a10, a11, a11
400830f5:	ff9ee5        	call8	40082ae4 <k_sched_time_slice_set>
}
400830f8:	f01d      	retw.n
	...

400830fc <z_impl_k_yield>:
{
400830fc:	004136        	entry	a1, 32
	if (!z_is_idle_thread_object(_current)) {
400830ff:	f51c21        	l32r	a2, 40080570 <_iram_text_start+0x20>
40083102:	f5bb31        	l32r	a3, 400807f0 <_iram_text_start+0x2a0>
40083105:	2288      	l32i.n	a8, a2, 8
40083107:	671837        	beq	a8, a3, 40083172 <z_impl_k_yield+0x76>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008310a:	006330        	rsil	a3, 3
	sys_dlist_remove(&thread->base.qnode_dlist);
4008310d:	22a8      	l32i.n	a10, a2, 8
4008310f:	008f25        	call8	40083a00 <sys_dlist_remove>
	return list->head == list;
40083112:	f298      	l32i.n	a9, a2, 60
			_priq_run_add(&_kernel.ready_q.runq, _current);
40083114:	022282        	l32i	a8, a2, 8
40083117:	f5bfc1        	l32r	a12, 40080814 <_iram_text_start+0x2c4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
4008311a:	c9ac      	beqz.n	a9, 4008314a <z_impl_k_yield+0x4e>
4008311c:	2a19c7        	beq	a9, a12, 4008314a <z_impl_k_yield+0x4e>
	if (thread_1->base.prio < thread_2->base.prio) {
4008311f:	0e08a2        	l8ui	a10, a8, 14
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
40083122:	1022d2        	l32i	a13, a2, 64
40083125:	23aa00        	sext	a10, a10, 7
40083128:	0e09b2        	l8ui	a11, a9, 14
4008312b:	23bb00        	sext	a11, a11, 7
4008312e:	0faab7        	bge	a10, a11, 40083141 <z_impl_k_yield+0x45>
	node->prev = successor->prev;
40083131:	1928      	l32i.n	a2, a9, 4
	node->next = successor;
40083133:	0899      	s32i.n	a9, a8, 0
	node->prev = successor->prev;
40083135:	1829      	s32i.n	a2, a8, 4
	successor->prev->next = node;
40083137:	0289      	s32i.n	a8, a2, 0
	successor->prev = node;
40083139:	1989      	s32i.n	a8, a9, 4
4008313b:	0006c6        	j	4008315a <z_impl_k_yield+0x5e>
4008313e:	000000        	ill
	return (node == list->tail) ? NULL : node->next;
40083141:	0519d7        	beq	a9, a13, 4008314a <z_impl_k_yield+0x4e>
40083144:	002992        	l32i	a9, a9, 0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
40083147:	fdd956        	bnez	a9, 40083128 <z_impl_k_yield+0x2c>
	node->prev = list->tail;
4008314a:	102292        	l32i	a9, a2, 64
	node->next = list;
4008314d:	0068c2        	s32i	a12, a8, 0
	node->prev = list->tail;
40083150:	1899      	s32i.n	a9, a8, 4
	list->tail->next = node;
40083152:	102292        	l32i	a9, a2, 64
40083155:	0989      	s32i.n	a8, a9, 0
	list->tail = node;
40083157:	106282        	s32i	a8, a2, 64
	thread->base.thread_state |= states;
4008315a:	0d0822        	l8ui	a2, a8, 13
4008315d:	80af92        	movi	a9, -128
40083160:	202290        	or	a2, a2, a9
40083163:	0d4822        	s8i	a2, a8, 13
			update_cache(1);
40083166:	01a0a2        	movi	a10, 1
40083169:	ffa3e5        	call8	40082ba8 <update_cache>
	XTOS_RESTORE_INTLEVEL(key);
4008316c:	13e630        	wsr.ps	a3
4008316f:	002010        	rsync
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083172:	0063a0        	rsil	a10, 3
	(void) z_swap(&lock, key);
40083175:	ff93e5        	call8	40082ab4 <z_swap$isra$14>
}
40083178:	f01d      	retw.n
	...

4008317c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
4008317c:	004136        	entry	a1, 32
4008317f:	20a220        	or	a10, a2, a2
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
40083182:	140266        	bnei	a2, -1, 4008319a <z_impl_k_sleep+0x1e>
40083185:	110366        	bnei	a3, -1, 4008319a <z_impl_k_sleep+0x1e>
		k_thread_suspend(_current);
40083188:	f4fa81        	l32r	a8, 40080570 <_iram_text_start+0x20>
4008318b:	0228a2        	l32i	a10, a8, 8
	z_impl_k_thread_suspend(thread);
4008318e:	ffc5e5        	call8	40082dec <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
40083191:	20a330        	or	a10, a3, a3
40083194:	000846        	j	400831b9 <z_impl_k_sleep+0x3d>
40083197:	000000        	ill
	ticks = k_ms_to_ticks_ceil32(timeout);
#else
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
4008319a:	0a3d      	mov.n	a3, a10
	if (ticks == 0) {
4008319c:	4acc      	bnez.n	a10, 400831a4 <z_impl_k_sleep+0x28>
	z_impl_k_yield();
4008319e:	fff5e5        	call8	400830fc <z_impl_k_yield>
400831a1:	000146        	j	400831aa <z_impl_k_sleep+0x2e>
400831a4:	ffd8a5        	call8	40082f30 <z_tick_sleep$part$23>
400831a7:	203aa0        	or	a3, a10, a10
			return t / (from_hz / to_hz);
400831aa:	f59dc1        	l32r	a12, 40080820 <_iram_text_start+0x2d0>
400831ad:	f4f2d1        	l32r	a13, 40080578 <_iram_text_start+0x28>
400831b0:	20a330        	or	a10, a3, a3
400831b3:	31bf30        	srai	a11, a3, 31
400831b6:	0089a5        	call8	40083a50 <__udivdi3>
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
400831b9:	0a2d      	mov.n	a2, a10
400831bb:	f01d      	retw.n
400831bd:	000000        	ill

400831c0 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
400831c0:	004136        	entry	a1, 32

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
400831c3:	f4eb81        	l32r	a8, 40080570 <_iram_text_start+0x20>
400831c6:	2828      	l32i.n	a2, a8, 8
400831c8:	f01d      	retw.n
	...

400831cc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
400831cc:	004136        	entry	a1, 32
400831cf:	006330        	rsil	a3, 3
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
400831d2:	20a220        	or	a10, a2, a2
400831d5:	ffece5        	call8	400830a4 <z_unpend_first_thread>

	if (thread != NULL) {
400831d8:	00da16        	beqz	a10, 400831e9 <z_impl_k_sem_give+0x1d>
400831db:	00a022        	movi	a2, 0
400831de:	136a22        	s32i	a2, a10, 76
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
400831e1:	ffab65        	call8	40082c98 <z_ready_thread>
400831e4:	000506        	j	400831fc <z_impl_k_sem_give+0x30>
400831e7:	920000        	lsi	f0, a0, 0x248
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
400831ea:	820222        	l8ui	a2, a2, 130
400831ed:	b20322        	l8ui	a2, a3, 178
400831f0:	9001a0        	addx2	a0, a1, a10
400831f3:	c088      	l32i.n	a8, a0, 48
400831f5:	93ab80        	movnez	a10, a11, a8
400831f8:	8a9a      	add.n	a8, a10, a9
400831fa:	2289      	s32i.n	a8, a2, 8
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
400831fc:	f58aa1        	l32r	a10, 40080824 <_iram_text_start+0x2d4>
400831ff:	03bd      	mov.n	a11, a3
40083201:	ff9125        	call8	40082b14 <z_reschedule>
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
40083204:	f01d      	retw.n
	...

40083208 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
40083208:	004136        	entry	a1, 32
4008320b:	02cd      	mov.n	a12, a2
4008320d:	04ed      	mov.n	a14, a4
4008320f:	05fd      	mov.n	a15, a5
40083211:	0063b0        	rsil	a11, 3
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
40083214:	2288      	l32i.n	a8, a2, 8
40083216:	e88c      	beqz.n	a8, 40083228 <z_impl_k_sem_take+0x20>
		sem->count--;
40083218:	880b      	addi.n	a8, a8, -1
4008321a:	2289      	s32i.n	a8, a2, 8
	XTOS_RESTORE_INTLEVEL(key);
4008321c:	13e6b0        	wsr.ps	a11
4008321f:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = 0;
40083222:	0a0c      	movi.n	a10, 0
		goto out;
40083224:	000586        	j	4008323e <z_impl_k_sem_take+0x36>
40083227:	845000        	extui	a5, a0, 0, 9
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
4008322a:	98cc20        	lsi	f2, a12, 0x260
4008322d:	13e6b0        	wsr.ps	a11
40083230:	002010        	rsync
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
40083233:	0a7c      	movi.n	a10, -16
		goto out;
40083235:	000146        	j	4008323e <z_impl_k_sem_take+0x36>
	}

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
40083238:	f57ba1        	l32r	a10, 40080824 <_iram_text_start+0x2d4>
4008323b:	ffdbe5        	call8	40082ff8 <z_pend_curr>

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
4008323e:	0a2d      	mov.n	a2, a10
40083240:	f01d      	retw.n
	...

40083244 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
40083244:	004136        	entry	a1, 32
	z_sched_start(thread);
40083247:	02ad      	mov.n	a10, a2
40083249:	ffaa25        	call8	40082cec <z_sched_start>
}
4008324c:	f01d      	retw.n
	...

40083250 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
40083250:	006136        	entry	a1, 48
40083253:	07fd      	mov.n	a15, a7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
40083255:	e178      	l32i.n	a7, a1, 56
	sys_dlist_init(&w->waitq);
40083257:	30c282        	addi	a8, a2, 48
4008325a:	0c4272        	s8i	a7, a2, 12
	thread_base->thread_state = (uint8_t)initial_state;
4008325d:	470c      	movi.n	a7, 4
4008325f:	0d4272        	s8i	a7, a2, 13

	thread_base->prio = priority;
40083262:	d178      	l32i.n	a7, a1, 52
	list->head = (sys_dnode_t *)list;
40083264:	c289      	s32i.n	a8, a2, 48
	list->tail = (sys_dnode_t *)list;
40083266:	d289      	s32i.n	a8, a2, 52
40083268:	0e4272        	s8i	a7, a2, 14
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
4008326b:	087c      	movi.n	a8, -16

	thread_base->sched_locked = 0U;
4008326d:	070c      	movi.n	a7, 0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
4008326f:	44fb      	addi.n	a4, a4, 15
	thread_base->sched_locked = 0U;
40083271:	0f4272        	s8i	a7, a2, 15
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
40083274:	104480        	and	a4, a4, a8
	node->next = NULL;
40083277:	070c      	movi.n	a7, 0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40083279:	c188      	l32i.n	a8, a1, 48
4008327b:	6279      	s32i.n	a7, a2, 24
	node->prev = NULL;
4008327d:	7279      	s32i.n	a7, a2, 28
	stack_ptr = (char *)stack + stack_obj_size;
4008327f:	434a      	add.n	a4, a3, a4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40083281:	02ad      	mov.n	a10, a2
{
40083283:	03bd      	mov.n	a11, a3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
40083285:	0189      	s32i.n	a8, a1, 0
40083287:	06ed      	mov.n	a14, a6
40083289:	05dd      	mov.n	a13, a5
4008328b:	04cd      	mov.n	a12, a4
4008328d:	fe70a5        	call8	40081998 <arch_new_thread>
	new_thread->init_data = NULL;
40083290:	106272        	s32i	a7, a2, 64
	new_thread->fn_abort = NULL;
40083293:	116272        	s32i	a7, a2, 68
	new_thread->resource_pool = _current->resource_pool;
40083296:	f4b671        	l32r	a7, 40080570 <_iram_text_start+0x20>
40083299:	2778      	l32i.n	a7, a7, 8
4008329b:	152772        	l32i	a7, a7, 84
4008329e:	156272        	s32i	a7, a2, 84
}
400832a1:	042d      	mov.n	a2, a4
400832a3:	f01d      	retw.n
400832a5:	000000        	ill

400832a8 <z_impl_k_thread_create>:
{
400832a8:	008136        	entry	a1, 64
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400832ab:	00a092        	movi	a9, 0
400832ae:	036192        	s32i	a9, a1, 12
400832b1:	122192        	l32i	a9, a1, 72
{
400832b4:	142182        	l32i	a8, a1, 80
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400832b7:	2199      	s32i.n	a9, a1, 8
400832b9:	112192        	l32i	a9, a1, 68
{
400832bc:	07fd      	mov.n	a15, a7
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400832be:	1199      	s32i.n	a9, a1, 4
400832c0:	102192        	l32i	a9, a1, 64
400832c3:	06ed      	mov.n	a14, a6
400832c5:	0199      	s32i.n	a9, a1, 0
400832c7:	05dd      	mov.n	a13, a5
400832c9:	04cd      	mov.n	a12, a4
400832cb:	03bd      	mov.n	a11, a3
400832cd:	02ad      	mov.n	a10, a2
400832cf:	4189      	s32i.n	a8, a1, 16
{
400832d1:	152172        	l32i	a7, a1, 84
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
400832d4:	fff7a5        	call8	40083250 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
400832d7:	4188      	l32i.n	a8, a1, 16
400832d9:	020866        	bnei	a8, -1, 400832df <z_impl_k_thread_create+0x37>
400832dc:	1b0726        	beqi	a7, -1, 400832fb <z_impl_k_thread_create+0x53>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
400832df:	209780        	or	a9, a7, a8
400832e2:	69cc      	bnez.n	a9, 400832ec <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
400832e4:	02ad      	mov.n	a10, a2
400832e6:	ffa065        	call8	40082cec <z_sched_start>
400832e9:	000386        	j	400832fb <z_impl_k_thread_create+0x53>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
400832ec:	f54cb1        	l32r	a11, 4008081c <_iram_text_start+0x2cc>
400832ef:	20c880        	or	a12, a8, a8
400832f2:	20d770        	or	a13, a7, a7
400832f5:	18c2a2        	addi	a10, a2, 24
400832f8:	0013a5        	call8	40083434 <z_add_timeout>
}
400832fb:	000090        	retw
	...

40083300 <z_init_static_threads>:
{
40083300:	006136        	entry	a1, 48
	_FOREACH_STATIC_THREAD(thread_data) {
40083303:	f54921        	l32r	a2, 40080828 <_iram_text_start+0x2d8>
40083306:	f54831        	l32r	a3, 40080828 <_iram_text_start+0x2d8>
40083309:	024d      	mov.n	a4, a2
4008330b:	000a46        	j	40083338 <z_init_static_threads+0x38>
		z_setup_new_thread(
4008330e:	0b2282        	l32i	a8, a2, 44
40083311:	036182        	s32i	a8, a1, 12
40083314:	8288      	l32i.n	a8, a2, 32
40083316:	2189      	s32i.n	a8, a1, 8
40083318:	7288      	l32i.n	a8, a2, 28
4008331a:	1189      	s32i.n	a8, a1, 4
4008331c:	6288      	l32i.n	a8, a2, 24
4008331e:	0189      	s32i.n	a8, a1, 0
40083320:	52f8      	l32i.n	a15, a2, 20
40083322:	42e8      	l32i.n	a14, a2, 16
40083324:	32d8      	l32i.n	a13, a2, 12
40083326:	22c8      	l32i.n	a12, a2, 8
40083328:	12b8      	l32i.n	a11, a2, 4
4008332a:	0022a2        	l32i	a10, a2, 0
4008332d:	fff225        	call8	40083250 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
40083330:	0288      	l32i.n	a8, a2, 0
40083332:	106822        	s32i	a2, a8, 64
	_FOREACH_STATIC_THREAD(thread_data) {
40083335:	30c222        	addi	a2, a2, 48
40083338:	d23237        	bltu	a2, a3, 4008330e <z_init_static_threads+0xe>
	_FOREACH_STATIC_THREAD(thread_data) {
4008333b:	042d      	mov.n	a2, a4
	k_sched_lock();
4008333d:	ff8325        	call8	40082b70 <k_sched_lock>
					    K_MSEC(thread_data->init_delay));
40083340:	040c      	movi.n	a4, 0
	_FOREACH_STATIC_THREAD(thread_data) {
40083342:	000a86        	j	40083370 <z_init_static_threads+0x70>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
40083345:	92d8      	l32i.n	a13, a2, 36
40083347:	220d26        	beqi	a13, -1, 4008336d <z_init_static_threads+0x6d>
		} else {
			return t * (to_hz / from_hz);
4008334a:	a80c      	movi.n	a8, 10
					    K_MSEC(thread_data->init_delay));
4008334c:	53dd40        	max	a13, a13, a4
4008334f:	82cd80        	mull	a12, a13, a8
40083352:	b2dd80        	mulsh	a13, a13, a8
			schedule_new_thread(thread_data->init_thread,
40083355:	02a8      	l32i.n	a10, a2, 0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
40083357:	208cd0        	or	a8, a12, a13
4008335a:	006856        	bnez	a8, 40083364 <z_init_static_threads+0x64>
	z_sched_start(thread);
4008335d:	ff98e5        	call8	40082cec <z_sched_start>
40083360:	000246        	j	4008336d <z_init_static_threads+0x6d>
40083363:	2eb100        	f64norm	a11, a1, a0, 0
40083366:	caa2f5        	call12	4004dd94 <esp32_rom_gpio_matrix_out+0x43e88>
40083369:	a518      	l32i.n	a1, a5, 40
4008336b:	000c      	movi.n	a0, 0
	_FOREACH_STATIC_THREAD(thread_data) {
4008336d:	30c222        	addi	a2, a2, 48
40083370:	d13237        	bltu	a2, a3, 40083345 <z_init_static_threads+0x45>
	k_sched_unlock();
40083373:	ff8825        	call8	40082bf4 <k_sched_unlock>
}
40083376:	f01d      	retw.n

40083378 <z_impl_k_thread_abort>:
#include <sys/__assert.h>
#include <syscall_handler.h>

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
40083378:	004136        	entry	a1, 32
	z_thread_single_abort(thread);
4008337b:	02ad      	mov.n	a10, a2
4008337d:	ffabe5        	call8	40082e3c <z_thread_single_abort>
40083380:	03f430        	rsr.misc0	a3

	/* If we're in an interrupt handler, we reschedule on the way out
	 * anyway, nothing needs to be done here.
	 */
	if (!arch_is_in_isr()) {
40083383:	0338      	l32i.n	a3, a3, 0
40083385:	23fc      	bnez.n	a3, 400833bb <z_impl_k_thread_abort+0x43>
		if (thread == _current) {
40083387:	f47a31        	l32r	a3, 40080570 <_iram_text_start+0x20>
4008338a:	2348      	l32i.n	a4, a3, 8
4008338c:	259427        	bne	a4, a2, 400833b5 <z_impl_k_thread_abort+0x3d>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008338f:	006350        	rsil	a5, 3
	old_thread = _current;
40083392:	2348      	l32i.n	a4, a3, 8
	return _kernel.ready_q.cache;
40083394:	e328      	l32i.n	a2, a3, 56
	if (new_thread != old_thread) {
40083396:	121427        	beq	a4, a2, 400833ac <z_impl_k_thread_abort+0x34>
		z_reset_time_slice();
40083399:	ff6c65        	call8	40082a60 <z_reset_time_slice>
		old_thread->swap_retval = -EAGAIN;
4008339c:	587c      	movi.n	a8, -11
4008339e:	1422a2        	l32i	a10, a2, 80
400833a1:	136482        	s32i	a8, a4, 76
		_current_cpu->current = new_thread;
400833a4:	2329      	s32i.n	a2, a3, 8
400833a6:	50c4b2        	addi	a11, a4, 80
400833a9:	fe47e5        	call8	40081828 <xtensa_switch>
	XTOS_RESTORE_INTLEVEL(key);
400833ac:	13e650        	wsr.ps	a5
400833af:	002010        	rsync
	return _current->swap_retval;
400833b2:	000146        	j	400833bb <z_impl_k_thread_abort+0x43>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400833b5:	0063a0        	rsil	a10, 3
	(void) z_reschedule_irqlock(arch_irq_lock());
400833b8:	ff7865        	call8	40082b40 <z_reschedule_irqlock>
			z_swap_unlocked();
		} else {
			z_reschedule_unlocked();
		}
	}
}
400833bb:	f01d      	retw.n
400833bd:	000000        	ill

400833c0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
400833c0:	004136        	entry	a1, 32
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
400833c3:	f51a81        	l32r	a8, 4008082c <_iram_text_start+0x2dc>
400833c6:	0a0c      	movi.n	a10, 0
400833c8:	0888      	l32i.n	a8, a8, 0
400833ca:	0298a7        	bne	a8, a10, 400833d0 <elapsed+0x10>
400833cd:	fe34a5        	call8	40081718 <z_clock_elapsed>
}
400833d0:	0a2d      	mov.n	a2, a10
400833d2:	f01d      	retw.n

400833d4 <remove_timeout>:
{
400833d4:	004136        	entry	a1, 32
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400833d7:	0288      	l32i.n	a8, a2, 0
400833d9:	12ac      	beqz.n	a2, 400833fe <remove_timeout+0x2a>
400833db:	f51591        	l32r	a9, 40080830 <_iram_text_start+0x2e0>
	return (node == list->tail) ? NULL : node->next;
400833de:	1998      	l32i.n	a9, a9, 4
400833e0:	1a1297        	beq	a2, a9, 400833fe <remove_timeout+0x2a>
	if (next(t) != NULL) {
400833e3:	789c      	beqz.n	a8, 400833fe <remove_timeout+0x2a>
		next(t)->dticks += t->dticks;
400833e5:	48c8      	l32i.n	a12, a8, 16
400833e7:	42a8      	l32i.n	a10, a2, 16
400833e9:	58b8      	l32i.n	a11, a8, 20
400833eb:	acaa      	add.n	a10, a12, a10
400833ed:	52d8      	l32i.n	a13, a2, 20
400833ef:	190c      	movi.n	a9, 1
400833f1:	013ac7        	bltu	a10, a12, 400833f6 <remove_timeout+0x22>
400833f4:	090c      	movi.n	a9, 0
400833f6:	bbda      	add.n	a11, a11, a13
400833f8:	99ba      	add.n	a9, a9, a11
400833fa:	48a9      	s32i.n	a10, a8, 16
400833fc:	5899      	s32i.n	a9, a8, 20
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
400833fe:	1298      	l32i.n	a9, a2, 4
40083400:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083402:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083404:	080c      	movi.n	a8, 0
40083406:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
40083408:	1289      	s32i.n	a8, a2, 4
}
4008340a:	f01d      	retw.n

4008340c <next_timeout>:

static int32_t next_timeout(void)
{
4008340c:	004136        	entry	a1, 32
	return list->head == list;
4008340f:	f50881        	l32r	a8, 40080830 <_iram_text_start+0x2e0>
40083412:	0828      	l32i.n	a2, a8, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
40083414:	019287        	bne	a2, a8, 40083419 <next_timeout+0xd>
40083417:	020c      	movi.n	a2, 0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
40083419:	fffa65        	call8	400833c0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
4008341c:	f50681        	l32r	a8, 40080834 <_iram_text_start+0x2e4>
4008341f:	328c      	beqz.n	a2, 40083426 <next_timeout+0x1a>
40083421:	4288      	l32i.n	a8, a2, 16
40083423:	c088a0        	sub	a8, a8, a10

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
40083426:	f45221        	l32r	a2, 40080570 <_iram_text_start+0x20>
40083429:	4228      	l32i.n	a2, a2, 16
4008342b:	128c      	beqz.n	a2, 40083430 <next_timeout+0x24>
4008342d:	012287        	blt	a2, a8, 40083432 <next_timeout+0x26>
40083430:	082d      	mov.n	a2, a8
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
40083432:	f01d      	retw.n

40083434 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
40083434:	006136        	entry	a1, 48
40083437:	046d      	mov.n	a6, a4
40083439:	207550        	or	a7, a5, a5
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
4008343c:	050466        	bnei	a4, -1, 40083445 <z_add_timeout+0x11>
4008343f:	020566        	bnei	a5, -1, 40083445 <z_add_timeout+0x11>
40083442:	004b86        	j	40083574 <z_add_timeout+0x140>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
40083445:	441b      	addi.n	a4, a4, 1
40083447:	180c      	movi.n	a8, 1
40083449:	013467        	bltu	a4, a6, 4008344e <z_add_timeout+0x1a>
4008344c:	080c      	movi.n	a8, 0
4008344e:	885a      	add.n	a8, a8, a5

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083450:	e57c      	movi.n	a5, -2
40083452:	c0a540        	sub	a10, a5, a4
	k_ticks_t ticks = timeout.ticks + 1;
40083455:	047d      	mov.n	a7, a4
40083457:	086d      	mov.n	a6, a8
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
40083459:	190c      	movi.n	a9, 1
4008345b:	0235a7        	bltu	a5, a10, 40083461 <z_add_timeout+0x2d>
4008345e:	00a092        	movi	a9, 0
40083461:	f57c      	movi.n	a5, -1
40083463:	c05580        	sub	a5, a5, a8
40083466:	c05590        	sub	a5, a5, a9
40083469:	045596        	bltz	a5, 400834b2 <z_add_timeout+0x7e>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
4008346c:	0189      	s32i.n	a8, a1, 0
4008346e:	fff525        	call8	400833c0 <elapsed>
40083471:	f4f151        	l32r	a5, 40080838 <_iram_text_start+0x2e8>
40083474:	e97c      	movi.n	a9, -2
40083476:	0568      	l32i.n	a6, a5, 0
40083478:	15b8      	l32i.n	a11, a5, 4
4008347a:	c06960        	sub	a6, a9, a6
4008347d:	170c      	movi.n	a7, 1
4008347f:	0188      	l32i.n	a8, a1, 0
40083481:	013967        	bltu	a9, a6, 40083486 <z_add_timeout+0x52>
40083484:	070c      	movi.n	a7, 0
40083486:	f57c      	movi.n	a5, -1
40083488:	c055b0        	sub	a5, a5, a11
4008348b:	c04640        	sub	a4, a6, a4
4008348e:	c05570        	sub	a5, a5, a7
40083491:	170c      	movi.n	a7, 1
40083493:	023647        	bltu	a6, a4, 40083499 <z_add_timeout+0x65>
40083496:	00a072        	movi	a7, 0
40083499:	c05580        	sub	a5, a5, a8
4008349c:	c05570        	sub	a5, a5, a7
4008349f:	c074a0        	sub	a7, a4, a10
400834a2:	318fa0        	srai	a8, a10, 31
400834a5:	160c      	movi.n	a6, 1
400834a7:	013477        	bltu	a4, a7, 400834ac <z_add_timeout+0x78>
400834aa:	060c      	movi.n	a6, 0
400834ac:	c05580        	sub	a5, a5, a8
400834af:	c06560        	sub	a6, a5, a6
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
400834b2:	026232        	s32i	a3, a2, 8
400834b5:	006330        	rsil	a3, 3
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
400834b8:	fff065        	call8	400833c0 <elapsed>
	ticks = MAX(1, ticks);
400834bb:	205770        	or	a5, a7, a7
400834be:	204660        	or	a4, a6, a6
400834c1:	0716e6        	bgei	a6, 1, 400834cc <z_add_timeout+0x98>
400834c4:	06cc      	bnez.n	a6, 400834c8 <z_add_timeout+0x94>
400834c6:	27cc      	bnez.n	a7, 400834cc <z_add_timeout+0x98>
400834c8:	150c      	movi.n	a5, 1
400834ca:	040c      	movi.n	a4, 0
		to->dticks = ticks + elapsed();
400834cc:	317fa0        	srai	a7, a10, 31
400834cf:	a5aa      	add.n	a10, a5, a10
400834d1:	160c      	movi.n	a6, 1
400834d3:	013a57        	bltu	a10, a5, 400834d8 <z_add_timeout+0xa4>
400834d6:	060c      	movi.n	a6, 0
400834d8:	447a      	add.n	a4, a4, a7
400834da:	464a      	add.n	a4, a6, a4
400834dc:	5249      	s32i.n	a4, a2, 20
	return list->head == list;
400834de:	f4d441        	l32r	a4, 40080830 <_iram_text_start+0x2e0>
400834e1:	42a9      	s32i.n	a10, a2, 16
400834e3:	0458      	l32i.n	a5, a4, 0
	return sys_dlist_is_empty(list) ? NULL : list->head;
400834e5:	029547        	bne	a5, a4, 400834eb <z_add_timeout+0xb7>
400834e8:	001e46        	j	40083565 <z_add_timeout+0x131>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
400834eb:	14a8      	l32i.n	a10, a4, 4
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
400834ed:	1b0c      	movi.n	a11, 1
400834ef:	0c0c      	movi.n	a12, 0
400834f1:	001386        	j	40083543 <z_add_timeout+0x10f>
			if (t->dticks > to->dticks) {
400834f4:	5588      	l32i.n	a8, a5, 20
400834f6:	5268      	l32i.n	a6, a2, 20
400834f8:	4578      	l32i.n	a7, a5, 16
400834fa:	4298      	l32i.n	a9, a2, 16
400834fc:	053687        	bltu	a6, a8, 40083505 <z_add_timeout+0xd1>
400834ff:	259867        	bne	a8, a6, 40083528 <z_add_timeout+0xf4>
40083502:	22b977        	bgeu	a9, a7, 40083528 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
40083505:	c09790        	sub	a9, a7, a9
40083508:	1a0c      	movi.n	a10, 1
4008350a:	023797        	bltu	a7, a9, 40083510 <z_add_timeout+0xdc>
4008350d:	00a0a2        	movi	a10, 0
40083510:	c06860        	sub	a6, a8, a6
40083513:	c066a0        	sub	a6, a6, a10
40083516:	5569      	s32i.n	a6, a5, 20
	node->prev = successor->prev;
40083518:	1568      	l32i.n	a6, a5, 4
4008351a:	4599      	s32i.n	a9, a5, 16
4008351c:	1269      	s32i.n	a6, a2, 4
	node->next = successor;
4008351e:	0259      	s32i.n	a5, a2, 0
	successor->prev->next = node;
40083520:	0629      	s32i.n	a2, a6, 0
	successor->prev = node;
40083522:	1529      	s32i.n	a2, a5, 4
		}

		if (t == NULL) {
40083524:	000886        	j	4008354a <z_add_timeout+0x116>
40083527:	797000        	lsi	f0, a0, 0x1e4
			to->dticks -= t->dticks;
4008352a:	dbb0c0        	movt.s	f11, f0, b12
4008352d:	397720        	lsi	f2, a7, 228
40083530:	dcc002        	addi	a0, a0, -36
40083533:	668020        	lsi	f2, a0, 0x198
40083536:	66d0c0        	lsi	f12, a0, 0x198
40083539:	4279c0        	xorb	b7, b9, b12
4008353c:	5269      	s32i.n	a6, a2, 20
	return (node == list->tail) ? NULL : node->next;
4008353e:	2315a7        	beq	a5, a10, 40083565 <z_add_timeout+0x131>
40083541:	0558      	l32i.n	a5, a5, 0
		for (t = first(); t != NULL; t = next(t)) {
40083543:	fad556        	bnez	a5, 400834f4 <z_add_timeout+0xc0>
40083546:	0006c6        	j	40083565 <z_add_timeout+0x131>
40083549:	245200        	extui	a5, a0, 2, 3
	return list->head == list;
4008354c:	925700        	lsi	f0, a7, 0x248
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
4008354f:	470b      	addi.n	a4, a7, -1
40083551:	a50815        	call4	400285d4 <esp32_rom_gpio_matrix_out+0x1e6c8>
			z_clock_set_timeout(next_timeout(), false);
40083554:	ffeb      	addi.n	a15, a15, 14
40083556:	00a0b2        	movi	a11, 0
40083559:	fe15e5        	call8	400816b8 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008355c:	13e630        	wsr.ps	a3
4008355f:	002010        	rsync
	LOCKED(&timeout_lock) {
40083562:	000386        	j	40083574 <z_add_timeout+0x140>
	node->prev = list->tail;
40083565:	1458      	l32i.n	a5, a4, 4
	node->next = list;
40083567:	0249      	s32i.n	a4, a2, 0
	node->prev = list->tail;
40083569:	1259      	s32i.n	a5, a2, 4
	list->tail->next = node;
4008356b:	1458      	l32i.n	a5, a4, 4
4008356d:	0529      	s32i.n	a2, a5, 0
	list->tail = node;
4008356f:	1429      	s32i.n	a2, a4, 4
40083571:	fff546        	j	4008354a <z_add_timeout+0x116>
		}
	}
}
40083574:	f01d      	retw.n
	...

40083578 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
40083578:	004136        	entry	a1, 32
4008357b:	02ad      	mov.n	a10, a2
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008357d:	006320        	rsil	a2, 3
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
40083580:	0a98      	l32i.n	a9, a10, 0
	int ret = -EINVAL;
40083582:	a86c      	movi.n	a8, -22
		if (sys_dnode_is_linked(&to->node)) {
40083584:	004916        	beqz	a9, 4008358c <z_abort_timeout+0x14>
			remove_timeout(to);
40083587:	ffe4e5        	call8	400833d4 <remove_timeout>
			ret = 0;
4008358a:	080c      	movi.n	a8, 0
	XTOS_RESTORE_INTLEVEL(key);
4008358c:	13e620        	wsr.ps	a2
4008358f:	002010        	rsync
		}
	}

	return ret;
}
40083592:	082d      	mov.n	a2, a8
40083594:	f01d      	retw.n
	...

40083598 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
40083598:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
4008359b:	006320        	rsil	a2, 3
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
4008359e:	ffe6e5        	call8	4008340c <next_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400835a1:	13e620        	wsr.ps	a2
400835a4:	002010        	rsync
	}
	return ret;
}
400835a7:	0a2d      	mov.n	a2, a10
400835a9:	f01d      	retw.n
	...

400835ac <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
400835ac:	004136        	entry	a1, 32
400835af:	743030        	extui	a3, a3, 0, 8
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400835b2:	006340        	rsil	a4, 3
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
400835b5:	ffe565        	call8	4008340c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
400835b8:	00a0c2        	movi	a12, 0
400835bb:	01ca92        	addi	a9, a10, 1
400835be:	01a082        	movi	a8, 1
400835c1:	0c5d      	mov.n	a5, a12
400835c3:	835890        	moveqz	a5, a8, a9
400835c6:	059d      	mov.n	a9, a5
			      || (ticks < next_to);
400835c8:	0122a7        	blt	a2, a10, 400835cd <z_set_timeout_expiry+0x21>
400835cb:	0c8d      	mov.n	a8, a12
400835cd:	208980        	or	a8, a9, a8
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
400835d0:	0b6807        	bbci	a8, 0, 400835df <z_set_timeout_expiry+0x33>
400835d3:	082aa6        	blti	a10, 2, 400835df <z_set_timeout_expiry+0x33>
			z_clock_set_timeout(ticks, is_idle);
400835d6:	20b330        	or	a11, a3, a3
400835d9:	20a220        	or	a10, a2, a2
400835dc:	fe0da5        	call8	400816b8 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
400835df:	13e640        	wsr.ps	a4
400835e2:	002010        	rsync
		}
	}
}
400835e5:	000090        	retw

400835e8 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
400835e8:	004136        	entry	a1, 32
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
400835eb:	02ad      	mov.n	a10, a2
400835ed:	ff7ae5        	call8	40082d9c <z_time_slice>
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400835f0:	006330        	rsil	a3, 3
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
400835f3:	f48e61        	l32r	a6, 4008082c <_iram_text_start+0x2dc>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
400835f6:	f3e041        	l32r	a4, 40080578 <_iram_text_start+0x28>
	announce_remaining = ticks;
400835f9:	0629      	s32i.n	a2, a6, 0
		t->dticks = 0;
400835fb:	f3df51        	l32r	a5, 40080578 <_iram_text_start+0x28>
	while (first() != NULL && first()->dticks <= announce_remaining) {
400835fe:	000c86        	j	40083634 <z_clock_announce+0x4c>
		curr_tick += dt;
40083601:	989a      	add.n	a9, a8, a9
40083603:	31bf80        	srai	a11, a8, 31
40083606:	1a0c      	movi.n	a10, 1
40083608:	013987        	bltu	a9, a8, 4008360d <z_clock_announce+0x25>
4008360b:	0a0c      	movi.n	a10, 0
4008360d:	ebea      	add.n	a14, a11, a14
4008360f:	aaea      	add.n	a10, a10, a14
40083611:	1da9      	s32i.n	a10, a13, 4
		announce_remaining -= dt;
40083613:	c08c80        	sub	a8, a12, a8
		t->dticks = 0;
40083616:	4249      	s32i.n	a4, a2, 16
40083618:	5259      	s32i.n	a5, a2, 20
		remove_timeout(t);
4008361a:	02ad      	mov.n	a10, a2
		curr_tick += dt;
4008361c:	0d99      	s32i.n	a9, a13, 0
		announce_remaining -= dt;
4008361e:	006682        	s32i	a8, a6, 0
		remove_timeout(t);
40083621:	ffdb25        	call8	400833d4 <remove_timeout>
	XTOS_RESTORE_INTLEVEL(key);
40083624:	13e630        	wsr.ps	a3
40083627:	002010        	rsync

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
4008362a:	2238      	l32i.n	a3, a2, 8
4008362c:	02ad      	mov.n	a10, a2
4008362e:	0003e0        	callx8	a3
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083631:	006330        	rsil	a3, 3
	return list->head == list;
40083634:	f47f81        	l32r	a8, 40080830 <_iram_text_start+0x2e0>
40083637:	f480d1        	l32r	a13, 40080838 <_iram_text_start+0x2e8>
4008363a:	06c8      	l32i.n	a12, a6, 0
4008363c:	0828      	l32i.n	a2, a8, 0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
4008363e:	31bfc0        	srai	a11, a12, 31
40083641:	0d98      	l32i.n	a9, a13, 0
40083643:	1de8      	l32i.n	a14, a13, 4
	while (first() != NULL && first()->dticks <= announce_remaining) {
40083645:	129c      	beqz.n	a2, 4008365a <z_clock_announce+0x72>
40083647:	0f1287        	beq	a2, a8, 4008365a <z_clock_announce+0x72>
4008364a:	52a8      	l32i.n	a10, a2, 20
4008364c:	4288      	l32i.n	a8, a2, 16
4008364e:	323ba7        	bltu	a11, a10, 40083684 <z_clock_announce+0x9c>
40083651:	ac9ab7        	bne	a10, a11, 40083601 <z_clock_announce+0x19>
40083654:	a9bc87        	bgeu	a12, a8, 40083601 <z_clock_announce+0x19>
40083657:	000a46        	j	40083684 <z_clock_announce+0x9c>

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
	}

	curr_tick += announce_remaining;
4008365a:	9c9a      	add.n	a9, a12, a9
4008365c:	01a022        	movi	a2, 1
4008365f:	0139c7        	bltu	a9, a12, 40083664 <z_clock_announce+0x7c>
40083662:	020c      	movi.n	a2, 0
40083664:	80bbe0        	add	a11, a11, a14
40083667:	8022b0        	add	a2, a2, a11
4008366a:	1d29      	s32i.n	a2, a13, 4
	announce_remaining = 0;
4008366c:	020c      	movi.n	a2, 0
	curr_tick += announce_remaining;
4008366e:	0d99      	s32i.n	a9, a13, 0
	announce_remaining = 0;
40083670:	0629      	s32i.n	a2, a6, 0

	z_clock_set_timeout(next_timeout(), false);
40083672:	ffd9a5        	call8	4008340c <next_timeout>
40083675:	02bd      	mov.n	a11, a2
40083677:	fe0425        	call8	400816b8 <z_clock_set_timeout>
	XTOS_RESTORE_INTLEVEL(key);
4008367a:	13e630        	wsr.ps	a3
4008367d:	002010        	rsync

	k_spin_unlock(&timeout_lock, key);
}
40083680:	f01d      	retw.n
40083682:	c00000        	sub	a0, a0, a0
		first()->dticks -= announce_remaining;
40083685:	c048      	l32i.n	a4, a0, 48
40083687:	01a052        	movi	a5, 1
4008368a:	023847        	bltu	a8, a4, 40083690 <z_clock_announce+0xa8>
4008368d:	00a052        	movi	a5, 0
40083690:	c0aab0        	sub	a10, a10, a11
40083693:	c0aa50        	sub	a10, a10, a5
40083696:	4249      	s32i.n	a4, a2, 16
40083698:	52a9      	s32i.n	a10, a2, 20
4008369a:	ffef06        	j	4008365a <z_clock_announce+0x72>
4008369d:	000000        	ill

400836a0 <z_tick_get>:

int64_t z_tick_get(void)
{
400836a0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400836a3:	006340        	rsil	a4, 3
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
400836a6:	fe0725        	call8	40081718 <z_clock_elapsed>
400836a9:	f46331        	l32r	a3, 40080838 <_iram_text_start+0x2e8>
400836ac:	002322        	l32i	a2, a3, 0
400836af:	012382        	l32i	a8, a3, 4
400836b2:	802a20        	add	a2, a10, a2
400836b5:	130c      	movi.n	a3, 1
400836b7:	0132a7        	bltu	a2, a10, 400836bc <z_tick_get+0x1c>
400836ba:	030c      	movi.n	a3, 0
400836bc:	338a      	add.n	a3, a3, a8
	XTOS_RESTORE_INTLEVEL(key);
400836be:	13e640        	wsr.ps	a4
400836c1:	002010        	rsync
	}
	return t;
}
400836c4:	f01d      	retw.n
	...

400836c8 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
400836c8:	004136        	entry	a1, 32
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
400836cb:	fffd65        	call8	400836a0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
400836ce:	0a2d      	mov.n	a2, a10
400836d0:	f01d      	retw.n
	...

400836d4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
400836d4:	004136        	entry	a1, 32
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400836d7:	120c      	movi.n	a2, 1
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400836d9:	006380        	rsil	a8, 3
	int32_t ticks = z_get_next_timeout_expiry();
400836dc:	ffeba5        	call8	40083598 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
400836df:	013ae6        	bgei	a10, 3, 400836e4 <idle+0x10>
400836e2:	02ad      	mov.n	a10, a2
400836e4:	02bd      	mov.n	a11, a2
400836e6:	ffec65        	call8	400835ac <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
400836e9:	0008a5        	call8	40083774 <arch_cpu_idle>
400836ec:	fffa46        	j	400836d9 <idle+0x5>
	...

400836f0 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
400836f0:	004136        	entry	a1, 32
400836f3:	0cc282        	addi	a8, a2, 12
400836f6:	20a220        	or	a10, a2, a2
	list->head = (sys_dnode_t *)list;
400836f9:	036282        	s32i	a8, a2, 12
	list->tail = (sys_dnode_t *)list;
400836fc:	4289      	s32i.n	a8, a2, 16
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
400836fe:	04cd      	mov.n	a12, a4
40083700:	03bd      	mov.n	a11, a3
40083702:	fda725        	call8	40081174 <sys_heap_init>
}
40083705:	f01d      	retw.n
	...

40083708 <statics_init>:

static int statics_init(const struct device *unused)
{
40083708:	004136        	entry	a1, 32
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
4008370b:	f44c21        	l32r	a2, 4008083c <_iram_text_start+0x2ec>
4008370e:	000386        	j	40083720 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
40083711:	0222c2        	l32i	a12, a2, 8
40083714:	0122b2        	l32i	a11, a2, 4
40083717:	20a220        	or	a10, a2, a2
4008371a:	fffd65        	call8	400836f0 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
4008371d:	14c222        	addi	a2, a2, 20
40083720:	f44831        	l32r	a3, 40080840 <_iram_text_start+0x2f0>
40083723:	ea3237        	bltu	a2, a3, 40083711 <statics_init+0x9>
	}
	return 0;
}
40083726:	020c      	movi.n	a2, 0
40083728:	f01d      	retw.n
	...

4008372c <i2c_read>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
4008372c:	006136        	entry	a1, 48
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
4008372f:	380c      	movi.n	a8, 3
{
40083731:	02ad      	mov.n	a10, a2
40083733:	05dd      	mov.n	a13, a5
	msg.buf = buf;
40083735:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
40083737:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
40083739:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
4008373c:	2288      	l32i.n	a8, a2, 8
4008373e:	1c0c      	movi.n	a12, 1
40083740:	1888      	l32i.n	a8, a8, 4
40083742:	20b110        	or	a11, a1, a1
40083745:	0008e0        	callx8	a8

	return i2c_transfer(dev, &msg, 1, addr);
}
40083748:	0a2d      	mov.n	a2, a10
4008374a:	f01d      	retw.n

4008374c <i2c_write>:
{
4008374c:	006136        	entry	a1, 48
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
4008374f:	280c      	movi.n	a8, 2
{
40083751:	02ad      	mov.n	a10, a2
40083753:	05dd      	mov.n	a13, a5
	msg.buf = (uint8_t *)buf;
40083755:	0139      	s32i.n	a3, a1, 0
	msg.len = num_bytes;
40083757:	1149      	s32i.n	a4, a1, 4
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
40083759:	084182        	s8i	a8, a1, 8
	return api->transfer(dev, msgs, num_msgs, addr);
4008375c:	2288      	l32i.n	a8, a2, 8
4008375e:	1c0c      	movi.n	a12, 1
40083760:	1888      	l32i.n	a8, a8, 4
40083762:	20b110        	or	a11, a1, a1
40083765:	0008e0        	callx8	a8
}
40083768:	0a2d      	mov.n	a2, a10
4008376a:	f01d      	retw.n

4008376c <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
4008376c:	004136        	entry	a1, 32
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_BOOTLOADER_SRAM_SIZE, 16);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
4008376f:	f01d      	retw.n
40083771:	000000        	ill

40083774 <arch_cpu_idle>:
 */

#include <tracing/tracing.h>

void arch_cpu_idle(void)
{
40083774:	004136        	entry	a1, 32
	sys_trace_idle();
	__asm__ volatile ("waiti 0");
40083777:	007000        	waiti	0
}
4008377a:	f01d      	retw.n

4008377c <z_xtensa_dump_stack>:
{
4008377c:	004136        	entry	a1, 32
}
4008377f:	f01d      	retw.n
40083781:	000000        	ill

40083784 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
40083784:	004136        	entry	a1, 32
	while ((*s1 == *s2) && (*s1 != '\0')) {
40083787:	0000c6        	j	4008378e <strcmp+0xa>
		s1++;
4008378a:	221b      	addi.n	a2, a2, 1
		s2++;
4008378c:	331b      	addi.n	a3, a3, 1
	while ((*s1 == *s2) && (*s1 != '\0')) {
4008378e:	000282        	l8ui	a8, a2, 0
40083791:	000392        	l8ui	a9, a3, 0
40083794:	029897        	bne	a8, a9, 4008379a <strcmp+0x16>
40083797:	fef856        	bnez	a8, 4008378a <strcmp+0x6>
	}

	return *s1 - *s2;
}
4008379a:	c02890        	sub	a2, a8, a9
4008379d:	f01d      	retw.n
	...

400837a0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
400837a0:	004136        	entry	a1, 32
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
400837a3:	74b030        	extui	a11, a3, 0, 8

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400837a6:	028d      	mov.n	a8, a2
400837a8:	000286        	j	400837b6 <memset+0x16>
400837ab:	441600        	extui	a1, a0, 6, 5
		if (n == 0) {
400837ae:	48b204        	lsi	f0, a2, 0x120
			return buf;
		}
		*(d_byte++) = c_byte;
400837b1:	440b00        	extui	a0, a0, 11, 5
		n--;
400837b4:	881b      	addi.n	a8, a8, 1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
400837b6:	149080        	extui	a9, a8, 0, 2
400837b9:	08cd      	mov.n	a12, a8
400837bb:	fed956        	bnez	a9, 400837ac <memset+0xc>
	};

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
400837be:	743030        	extui	a3, a3, 0, 8

	c_word |= c_word << 8;
400837c1:	11a380        	slli	a10, a3, 8
400837c4:	203a30        	or	a3, a10, a3
	c_word |= c_word << 16;
400837c7:	11a300        	slli	a10, a3, 16
400837ca:	203a30        	or	a3, a10, a3
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
400837cd:	41a240        	srli	a10, a4, 2
400837d0:	11dae0        	slli	a13, a10, 2
400837d3:	ed8a      	add.n	a14, a13, a8
400837d5:	0000c6        	j	400837dc <memset+0x3c>
		*(d_word++) = c_word;
400837d8:	0839      	s32i.n	a3, a8, 0
		n -= sizeof(mem_word_t);
400837da:	884b      	addi.n	a8, a8, 4
	while (n >= sizeof(mem_word_t)) {
400837dc:	f898e7        	bne	a8, a14, 400837d8 <memset+0x38>
400837df:	11aae0        	slli	a10, a10, 2
400837e2:	c044a0        	sub	a4, a4, a10
400837e5:	000206        	j	400837f1 <memset+0x51>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
400837e8:	39da      	add.n	a3, a9, a13
400837ea:	3c3a      	add.n	a3, a12, a3
400837ec:	0043b2        	s8i	a11, a3, 0
		n--;
400837ef:	991b      	addi.n	a9, a9, 1
	while (n > 0) {
400837f1:	f39497        	bne	a4, a9, 400837e8 <memset+0x48>
	}

	return buf;
}
400837f4:	f01d      	retw.n
	...

400837f8 <_stdout_hook_default>:
{
400837f8:	004136        	entry	a1, 32
}
400837fb:	f27c      	movi.n	a2, -1
400837fd:	f01d      	retw.n
	...

40083800 <gpio_esp32_port_get_raw>:
{
40083800:	004136        	entry	a1, 32
	*value = *data->port.input_reg;
40083803:	3288      	l32i.n	a8, a2, 12
}
40083805:	020c      	movi.n	a2, 0
	*value = *data->port.input_reg;
40083807:	4888      	l32i.n	a8, a8, 16
40083809:	0020c0        	memw
4008380c:	0888      	l32i.n	a8, a8, 0
4008380e:	0389      	s32i.n	a8, a3, 0
}
40083810:	f01d      	retw.n
	...

40083814 <gpio_esp32_port_set_masked_raw>:
{
40083814:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
40083817:	3288      	l32i.n	a8, a2, 12
40083819:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg & ~mask)
4008381c:	5888      	l32i.n	a8, a8, 20
4008381e:	0020c0        	memw
40083821:	0898      	l32i.n	a9, a8, 0
				 | (mask & value);
40083823:	304940        	xor	a4, a9, a4
40083826:	104430        	and	a4, a4, a3
40083829:	304490        	xor	a4, a4, a9
	*data->port.output_reg = (*data->port.output_reg & ~mask)
4008382c:	0020c0        	memw
4008382f:	0849      	s32i.n	a4, a8, 0
	XTOS_RESTORE_INTLEVEL(key);
40083831:	13e6a0        	wsr.ps	a10
40083834:	002010        	rsync
}
40083837:	020c      	movi.n	a2, 0
40083839:	f01d      	retw.n
	...

4008383c <gpio_esp32_port_set_bits_raw>:
{
4008383c:	004136        	entry	a1, 32
	*data->port.set_reg = pins;
4008383f:	3288      	l32i.n	a8, a2, 12
}
40083841:	020c      	movi.n	a2, 0
	*data->port.set_reg = pins;
40083843:	2888      	l32i.n	a8, a8, 8
40083845:	0020c0        	memw
40083848:	0839      	s32i.n	a3, a8, 0
}
4008384a:	f01d      	retw.n

4008384c <gpio_esp32_port_clear_bits_raw>:
{
4008384c:	004136        	entry	a1, 32
	*data->port.clear_reg = pins;
4008384f:	3288      	l32i.n	a8, a2, 12
}
40083851:	020c      	movi.n	a2, 0
	*data->port.clear_reg = pins;
40083853:	3888      	l32i.n	a8, a8, 12
40083855:	0020c0        	memw
40083858:	0839      	s32i.n	a3, a8, 0
}
4008385a:	f01d      	retw.n

4008385c <gpio_esp32_port_toggle_bits>:
{
4008385c:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = port->data;
4008385f:	3288      	l32i.n	a8, a2, 12
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
40083861:	0063a0        	rsil	a10, 3
	*data->port.output_reg = (*data->port.output_reg ^ pins);
40083864:	5898      	l32i.n	a9, a8, 20
40083866:	0020c0        	memw
40083869:	0988      	l32i.n	a8, a9, 0
4008386b:	308830        	xor	a8, a8, a3
4008386e:	0020c0        	memw
40083871:	0989      	s32i.n	a8, a9, 0
	XTOS_RESTORE_INTLEVEL(key);
40083873:	13e6a0        	wsr.ps	a10
40083876:	002010        	rsync
}
40083879:	020c      	movi.n	a2, 0
4008387b:	f01d      	retw.n
4008387d:	000000        	ill

40083880 <gpio_esp32_manage_callback>:
{
40083880:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = dev->data;
40083883:	3288      	l32i.n	a8, a2, 12
{
40083885:	744040        	extui	a4, a4, 0, 8
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
40083888:	9828      	l32i.n	a2, a8, 36
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
4008388a:	090c      	movi.n	a9, 0
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
4008388c:	42cc      	bnez.n	a2, 40083894 <gpio_esp32_manage_callback+0x14>
4008388e:	000fc6        	j	400838d1 <gpio_esp32_manage_callback+0x51>
40083891:	0a2d00        	add.s	f2, f13, f0
40083894:	209327        	bne	a3, a2, 400838b8 <gpio_esp32_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
40083897:	0328      	l32i.n	a2, a3, 0
40083899:	b9cc      	bnez.n	a9, 400838a8 <gpio_esp32_manage_callback+0x28>
4008389b:	a898      	l32i.n	a9, a8, 40
	list->head = node;
4008389d:	9829      	s32i.n	a2, a8, 36
Z_GENLIST_REMOVE(slist, snode)
4008389f:	0e9397        	bne	a3, a9, 400838b1 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400838a2:	a829      	s32i.n	a2, a8, 40
400838a4:	000246        	j	400838b1 <gpio_esp32_manage_callback+0x31>
400838a7:	092900        	l32e	a0, a9, -56
Z_GENLIST_REMOVE(slist, snode)
400838aa:	a828      	l32i.n	a2, a8, 40
400838ac:	019327        	bne	a3, a2, 400838b1 <gpio_esp32_manage_callback+0x31>
	list->tail = node;
400838af:	a899      	s32i.n	a9, a8, 40
	parent->next = child;
400838b1:	020c      	movi.n	a2, 0
400838b3:	0329      	s32i.n	a2, a3, 0
400838b5:	000606        	j	400838d1 <gpio_esp32_manage_callback+0x51>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400838b8:	02a8      	l32i.n	a10, a2, 0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
400838ba:	029d      	mov.n	a9, a2
400838bc:	fd2a56        	bnez	a10, 40083892 <gpio_esp32_manage_callback+0x12>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
			if (!set) {
				return -EINVAL;
400838bf:	a26c      	movi.n	a2, -22
			if (!set) {
400838c1:	017416        	beqz	a4, 400838dc <gpio_esp32_manage_callback+0x5c>
Z_GENLIST_PREPEND(slist, snode)
400838c4:	9828      	l32i.n	a2, a8, 36
	parent->next = child;
400838c6:	0329      	s32i.n	a2, a3, 0
Z_GENLIST_PREPEND(slist, snode)
400838c8:	a828      	l32i.n	a2, a8, 40
	list->head = node;
400838ca:	9839      	s32i.n	a3, a8, 36
Z_GENLIST_PREPEND(slist, snode)
400838cc:	42cc      	bnez.n	a2, 400838d4 <gpio_esp32_manage_callback+0x54>
400838ce:	000206        	j	400838da <gpio_esp32_manage_callback+0x5a>
			}
		}
	}

	if (set) {
400838d1:	fef456        	bnez	a4, 400838c4 <gpio_esp32_manage_callback+0x44>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
400838d4:	020c      	movi.n	a2, 0
400838d6:	000086        	j	400838dc <gpio_esp32_manage_callback+0x5c>
400838d9:	a83900        	lsi	f0, a9, 0x2a0
}
400838dc:	f01d      	retw.n
	...

400838e0 <gpio_esp32_fire_callbacks>:
{
400838e0:	004136        	entry	a1, 32
	struct gpio_esp32_data *data = device->data;
400838e3:	3238      	l32i.n	a3, a2, 12
	uint32_t irq_status = *data->port.irq_status_reg;
400838e5:	6348      	l32i.n	a4, a3, 24
	*data->port.irq_ack_reg = irq_status;
400838e7:	7388      	l32i.n	a8, a3, 28
	uint32_t irq_status = *data->port.irq_status_reg;
400838e9:	0020c0        	memw
400838ec:	0448      	l32i.n	a4, a4, 0
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
400838ee:	93b8      	l32i.n	a11, a3, 36
	*data->port.irq_ack_reg = irq_status;
400838f0:	0020c0        	memw
400838f3:	0849      	s32i.n	a4, a8, 0
400838f5:	8b9c      	beqz.n	a11, 40083911 <gpio_esp32_fire_callbacks+0x31>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
400838f7:	0b38      	l32i.n	a3, a11, 0
		if (cb->pin_mask & pins) {
400838f9:	2bc8      	l32i.n	a12, a11, 8
400838fb:	10c4c0        	and	a12, a4, a12
400838fe:	6c8c      	beqz.n	a12, 40083908 <gpio_esp32_fire_callbacks+0x28>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
40083900:	1b88      	l32i.n	a8, a11, 4
40083902:	20a220        	or	a10, a2, a2
40083905:	0008e0        	callx8	a8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
40083908:	538c      	beqz.n	a3, 40083911 <gpio_esp32_fire_callbacks+0x31>
4008390a:	03bd      	mov.n	a11, a3
4008390c:	0338      	l32i.n	a3, a3, 0
4008390e:	fff9c6        	j	400838f9 <gpio_esp32_fire_callbacks+0x19>
}
40083911:	f01d      	retw.n
	...

40083914 <i2c_esp32_connect_irq_0>:
{
40083914:	004136        	entry	a1, 32
}
40083917:	f01d      	retw.n
40083919:	000000        	ill

4008391c <i2c_esp32_connect_irq_1>:
4008391c:	004136        	entry	a1, 32
4008391f:	f01d      	retw.n
40083921:	000000        	ill

40083924 <uart_esp32_poll_in>:
{
40083924:	004136        	entry	a1, 32
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
40083927:	1228      	l32i.n	a2, a2, 4
40083929:	0298      	l32i.n	a9, a2, 0
		return -1;
4008392b:	f27c      	movi.n	a2, -1
	if (UART_RXFIFO_COUNT(DEV_BASE(dev)->status) == 0) {
4008392d:	0020c0        	memw
40083930:	7988      	l32i.n	a8, a9, 28
40083932:	748080        	extui	a8, a8, 0, 8
40083935:	888c      	beqz.n	a8, 40083941 <uart_esp32_poll_in+0x1d>
	*p_char = DEV_BASE(dev)->fifo;
40083937:	0020c0        	memw
4008393a:	0928      	l32i.n	a2, a9, 0
4008393c:	004322        	s8i	a2, a3, 0
	return 0;
4008393f:	020c      	movi.n	a2, 0
}
40083941:	f01d      	retw.n
	...

40083944 <uart_esp32_poll_out>:
{
40083944:	004136        	entry	a1, 32
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
40083947:	1288      	l32i.n	a8, a2, 4
{
40083949:	743030        	extui	a3, a3, 0, 8
	while (UART_TXFIFO_COUNT(DEV_BASE(dev)->status) >= UART_FIFO_LIMIT) {
4008394c:	0898      	l32i.n	a9, a8, 0
4008394e:	7ea0a2        	movi	a10, 126
40083951:	0020c0        	memw
40083954:	7988      	l32i.n	a8, a9, 28
40083956:	758080        	extui	a8, a8, 16, 8
40083959:	f43a87        	bltu	a10, a8, 40083951 <uart_esp32_poll_out+0xd>
	DEV_BASE(dev)->fifo = (uint32_t)c;
4008395c:	0020c0        	memw
4008395f:	0939      	s32i.n	a3, a9, 0
}
40083961:	f01d      	retw.n
	...

40083964 <uart_esp32_err_check>:
{
40083964:	004136        	entry	a1, 32
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
40083967:	1228      	l32i.n	a2, a2, 4
40083969:	0288      	l32i.n	a8, a2, 0
4008396b:	0020c0        	memw
4008396e:	2828      	l32i.n	a2, a8, 8
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083970:	0020c0        	memw
40083973:	2888      	l32i.n	a8, a8, 8
	uint32_t err = UART_GET_PARITY_ERR(DEV_BASE(dev)->int_st)
40083975:	412220        	srli	a2, a2, 2
		    | UART_GET_FRAME_ERR(DEV_BASE(dev)->int_st);
40083978:	418380        	srli	a8, a8, 3
4008397b:	202280        	or	a2, a2, a8
}
4008397e:	042020        	extui	a2, a2, 0, 1
40083981:	f01d      	retw.n
	...

40083984 <uart_esp32_config_get>:
{
40083984:	004136        	entry	a1, 32
	cfg->baudrate = data->uart_config.baudrate;
40083987:	3288      	l32i.n	a8, a2, 12
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083989:	1228      	l32i.n	a2, a2, 4
	cfg->baudrate = data->uart_config.baudrate;
4008398b:	0888      	l32i.n	a8, a8, 0
		cfg->parity = UART_CFG_PARITY_NONE;
4008398d:	090c      	movi.n	a9, 0
	cfg->baudrate = data->uart_config.baudrate;
4008398f:	0389      	s32i.n	a8, a3, 0
	if (UART_GET_PARITY_EN(DEV_BASE(dev)->conf0)) {
40083991:	0288      	l32i.n	a8, a2, 0
40083993:	0020c0        	memw
40083996:	082822        	l32i	a2, a8, 32
40083999:	076217        	bbci	a2, 1, 400839a4 <uart_esp32_config_get+0x20>
		cfg->parity = UART_GET_PARITY(DEV_BASE(dev)->conf0);
4008399c:	0020c0        	memw
4008399f:	8898      	l32i.n	a9, a8, 32
400839a1:	049090        	extui	a9, a9, 0, 1
400839a4:	044392        	s8i	a9, a3, 4
	cfg->stop_bits = UART_GET_STOP_BITS(DEV_BASE(dev)->conf0);
400839a7:	0020c0        	memw
400839aa:	8898      	l32i.n	a9, a8, 32
400839ac:	149490        	extui	a9, a9, 4, 2
400839af:	054392        	s8i	a9, a3, 5
	cfg->data_bits = UART_GET_DATA_BITS(DEV_BASE(dev)->conf0);
400839b2:	0020c0        	memw
400839b5:	082892        	l32i	a9, a8, 32
400839b8:	149290        	extui	a9, a9, 2, 2
400839bb:	064392        	s8i	a9, a3, 6
	if (UART_GET_TX_FLOW(DEV_BASE(dev)->conf0)) {
400839be:	0020c0        	memw
400839c1:	8828      	l32i.n	a2, a8, 32
400839c3:	0562f7        	bbci	a2, 15, 400839cc <uart_esp32_config_get+0x48>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_RTS_CTS;
400839c6:	01a022        	movi	a2, 1
400839c9:	074322        	s8i	a2, a3, 7
	if (UART_GET_RX_FLOW(DEV_BASE(dev)->conf1)) {
400839cc:	0020c0        	memw
400839cf:	9828      	l32i.n	a2, a8, 36
400839d1:	047277        	bbci	a2, 23, 400839d9 <uart_esp32_config_get+0x55>
		cfg->flow_ctrl = UART_CFG_FLOW_CTRL_DTR_DSR;
400839d4:	220c      	movi.n	a2, 2
400839d6:	074322        	s8i	a2, a3, 7
}
400839d9:	020c      	movi.n	a2, 0
400839db:	f01d      	retw.n
400839dd:	000000        	ill

400839e0 <arch_system_halt>:
{
400839e0:	004136        	entry	a1, 32
	unsigned int key = XTOS_SET_INTLEVEL(XCHAL_EXCM_LEVEL);
400839e3:	006380        	rsil	a8, 3
	for (;;) {
400839e6:	ffff06        	j	400839e6 <arch_system_halt+0x6>
400839e9:	000000        	ill

400839ec <z_impl_k_mutex_init>:
{
400839ec:	004136        	entry	a1, 32
400839ef:	028d      	mov.n	a8, a2
	mutex->owner = NULL;
400839f1:	020c      	movi.n	a2, 0
400839f3:	2829      	s32i.n	a2, a8, 8
	mutex->lock_count = 0U;
400839f5:	3829      	s32i.n	a2, a8, 12
	list->head = (sys_dnode_t *)list;
400839f7:	0889      	s32i.n	a8, a8, 0
	list->tail = (sys_dnode_t *)list;
400839f9:	1889      	s32i.n	a8, a8, 4
}
400839fb:	f01d      	retw.n
400839fd:	000000        	ill

40083a00 <sys_dlist_remove>:
{
40083a00:	004136        	entry	a1, 32
	node->prev->next = node->next;
40083a03:	0288      	l32i.n	a8, a2, 0
40083a05:	1298      	l32i.n	a9, a2, 4
40083a07:	0989      	s32i.n	a8, a9, 0
	node->next->prev = node->prev;
40083a09:	1899      	s32i.n	a9, a8, 4
	node->next = NULL;
40083a0b:	080c      	movi.n	a8, 0
40083a0d:	0289      	s32i.n	a8, a2, 0
	node->prev = NULL;
40083a0f:	1289      	s32i.n	a8, a2, 4
	sys_dnode_init(node);
}
40083a11:	f01d      	retw.n
	...

40083a14 <z_priq_dumb_best>:
{
40083a14:	004136        	entry	a1, 32
	return list->head == list;
40083a17:	0288      	l32i.n	a8, a2, 0
	if (n != NULL) {
40083a19:	188c      	beqz.n	a8, 40083a1e <z_priq_dumb_best+0xa>
40083a1b:	019287        	bne	a2, a8, 40083a20 <z_priq_dumb_best+0xc>
	struct k_thread *thread = NULL;
40083a1e:	080c      	movi.n	a8, 0
}
40083a20:	082d      	mov.n	a2, a8
40083a22:	f01d      	retw.n

40083a24 <z_impl_k_sem_init>:
{
40083a24:	004136        	entry	a1, 32
	CHECKIF(limit == 0U || initial_count > limit) {
40083a27:	180c      	movi.n	a8, 1
40083a29:	090c      	movi.n	a9, 0
40083a2b:	938940        	movnez	a8, a9, a4
40083a2e:	748080        	extui	a8, a8, 0, 8
40083a31:	0f9897        	bne	a8, a9, 40083a44 <z_impl_k_sem_init+0x20>
40083a34:	0c3437        	bltu	a4, a3, 40083a44 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
40083a37:	2239      	s32i.n	a3, a2, 8
	sem->limit = limit;
40083a39:	3249      	s32i.n	a4, a2, 12
	list->head = (sys_dnode_t *)list;
40083a3b:	0229      	s32i.n	a2, a2, 0
	list->tail = (sys_dnode_t *)list;
40083a3d:	1229      	s32i.n	a2, a2, 4
	return 0;
40083a3f:	082d      	mov.n	a2, a8
40083a41:	000046        	j	40083a46 <z_impl_k_sem_init+0x22>
		return -EINVAL;
40083a44:	a26c      	movi.n	a2, -22
}
40083a46:	f01d      	retw.n

40083a48 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
40083a48:	004136        	entry	a1, 32
/* size of the struct k_thread structure without save area for coproc regs */
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF,
		 sizeof(struct k_thread) - sizeof(tCoopCoprocReg) -
			 sizeof(tPreempCoprocReg) + XT_CP_DESCR_SIZE);

GEN_ABS_SYM_END
40083a4b:	f01d      	retw.n
40083a4d:	000000        	ill

40083a50 <__udivdi3>:
40083a50:	004136        	entry	a1, 32
40083a53:	03dd      	mov.n	a13, a3
40083a55:	04ad      	mov.n	a10, a4
40083a57:	053d      	mov.n	a3, a5
40083a59:	02cd      	mov.n	a12, a2
40083a5b:	0d9d      	mov.n	a9, a13
40083a5d:	184556        	bnez	a5, 40083be5 <__udivdi3+0x195>
40083a60:	023d47        	bltu	a13, a4, 40083a66 <__udivdi3+0x16>
40083a63:	002086        	j	40083ae9 <__udivdi3+0x99>
40083a66:	40f420        	nsau	a2, a4
40083a69:	c29c      	beqz.n	a2, 40083a89 <__udivdi3+0x39>
40083a6b:	608020        	neg	a8, a2
40083a6e:	400800        	ssr	a8
40083a71:	9180c0        	srl	a8, a12
40083a74:	401200        	ssl	a2
40083a77:	a19d00        	sll	a9, a13
40083a7a:	401200        	ssl	a2
40083a7d:	a1a400        	sll	a10, a4
40083a80:	209890        	or	a9, a8, a9
40083a83:	401200        	ssl	a2
40083a86:	a1cc00        	sll	a12, a12
40083a89:	f580a0        	extui	a8, a10, 16, 16
40083a8c:	e2d980        	remu	a13, a9, a8
40083a8f:	f440a0        	extui	a4, a10, 0, 16
40083a92:	c29980        	quou	a9, a9, a8
40083a95:	11dd00        	slli	a13, a13, 16
40083a98:	f5b0c0        	extui	a11, a12, 16, 16
40083a9b:	822490        	mull	a2, a4, a9
40083a9e:	20bdb0        	or	a11, a13, a11
40083aa1:	13bb27        	bgeu	a11, a2, 40083ab8 <__udivdi3+0x68>
40083aa4:	bbaa      	add.n	a11, a11, a10
40083aa6:	590b      	addi.n	a5, a9, -1
40083aa8:	0a3ba7        	bltu	a11, a10, 40083ab6 <__udivdi3+0x66>
40083aab:	07bb27        	bgeu	a11, a2, 40083ab6 <__udivdi3+0x66>
40083aae:	fec992        	addi	a9, a9, -2
40083ab1:	bbaa      	add.n	a11, a11, a10
40083ab3:	000046        	j	40083ab8 <__udivdi3+0x68>
40083ab6:	059d      	mov.n	a9, a5
40083ab8:	c0bb20        	sub	a11, a11, a2
40083abb:	e22b80        	remu	a2, a11, a8
40083abe:	c2bb80        	quou	a11, a11, a8
40083ac1:	112200        	slli	a2, a2, 16
40083ac4:	f4c0c0        	extui	a12, a12, 0, 16
40083ac7:	8244b0        	mull	a4, a4, a11
40083aca:	20c2c0        	or	a12, a2, a12
40083acd:	0fbc47        	bgeu	a12, a4, 40083ae0 <__udivdi3+0x90>
40083ad0:	caca      	add.n	a12, a10, a12
40083ad2:	ffcb22        	addi	a2, a11, -1
40083ad5:	05bc47        	bgeu	a12, a4, 40083ade <__udivdi3+0x8e>
40083ad8:	fecbb2        	addi	a11, a11, -2
40083adb:	01bca7        	bgeu	a12, a10, 40083ae0 <__udivdi3+0x90>
40083ade:	02bd      	mov.n	a11, a2
40083ae0:	118900        	slli	a8, a9, 16
40083ae3:	2088b0        	or	a8, a8, a11
40083ae6:	007406        	j	40083cba <__udivdi3+0x26a>
40083ae9:	34cc      	bnez.n	a4, 40083af0 <__udivdi3+0xa0>
40083aeb:	130c      	movi.n	a3, 1
40083aed:	c2a340        	quou	a10, a3, a4
40083af0:	40fa50        	nsau	a5, a10
40083af3:	c08da0        	sub	a8, a13, a10
40083af6:	130c      	movi.n	a3, 1
40083af8:	089516        	beqz	a5, 40083b85 <__udivdi3+0x135>
40083afb:	042c      	movi.n	a4, 32
40083afd:	c04450        	sub	a4, a4, a5
40083b00:	401500        	ssl	a5
40083b03:	a1aa00        	sll	a10, a10
40083b06:	400400        	ssr	a4
40083b09:	9130d0        	srl	a3, a13
40083b0c:	401500        	ssl	a5
40083b0f:	a18d00        	sll	a8, a13
40083b12:	400400        	ssr	a4
40083b15:	914020        	srl	a4, a2
40083b18:	401500        	ssl	a5
40083b1b:	a1c200        	sll	a12, a2
40083b1e:	f520a0        	extui	a2, a10, 16, 16
40083b21:	204480        	or	a4, a4, a8
40083b24:	e2b320        	remu	a11, a3, a2
40083b27:	f480a0        	extui	a8, a10, 0, 16
40083b2a:	c23320        	quou	a3, a3, a2
40083b2d:	11bb00        	slli	a11, a11, 16
40083b30:	f59040        	extui	a9, a4, 16, 16
40083b33:	825830        	mull	a5, a8, a3
40083b36:	209b90        	or	a9, a11, a9
40083b39:	13b957        	bgeu	a9, a5, 40083b50 <__udivdi3+0x100>
40083b3c:	99aa      	add.n	a9, a9, a10
40083b3e:	b30b      	addi.n	a11, a3, -1
40083b40:	0a39a7        	bltu	a9, a10, 40083b4e <__udivdi3+0xfe>
40083b43:	07b957        	bgeu	a9, a5, 40083b4e <__udivdi3+0xfe>
40083b46:	fec332        	addi	a3, a3, -2
40083b49:	99aa      	add.n	a9, a9, a10
40083b4b:	000046        	j	40083b50 <__udivdi3+0x100>
40083b4e:	0b3d      	mov.n	a3, a11
40083b50:	c09950        	sub	a9, a9, a5
40083b53:	e2b920        	remu	a11, a9, a2
40083b56:	c29920        	quou	a9, a9, a2
40083b59:	822890        	mull	a2, a8, a9
40083b5c:	11bb00        	slli	a11, a11, 16
40083b5f:	f48040        	extui	a8, a4, 0, 16
40083b62:	208b80        	or	a8, a11, a8
40083b65:	13b827        	bgeu	a8, a2, 40083b7c <__udivdi3+0x12c>
40083b68:	88aa      	add.n	a8, a8, a10
40083b6a:	490b      	addi.n	a4, a9, -1
40083b6c:	0a38a7        	bltu	a8, a10, 40083b7a <__udivdi3+0x12a>
40083b6f:	07b827        	bgeu	a8, a2, 40083b7a <__udivdi3+0x12a>
40083b72:	fec992        	addi	a9, a9, -2
40083b75:	88aa      	add.n	a8, a8, a10
40083b77:	000046        	j	40083b7c <__udivdi3+0x12c>
40083b7a:	049d      	mov.n	a9, a4
40083b7c:	113300        	slli	a3, a3, 16
40083b7f:	c08820        	sub	a8, a8, a2
40083b82:	203390        	or	a3, a3, a9
40083b85:	f550a0        	extui	a5, a10, 16, 16
40083b88:	e2b850        	remu	a11, a8, a5
40083b8b:	f440a0        	extui	a4, a10, 0, 16
40083b8e:	c28850        	quou	a8, a8, a5
40083b91:	11bb00        	slli	a11, a11, 16
40083b94:	f590c0        	extui	a9, a12, 16, 16
40083b97:	822480        	mull	a2, a4, a8
40083b9a:	209b90        	or	a9, a11, a9
40083b9d:	13b927        	bgeu	a9, a2, 40083bb4 <__udivdi3+0x164>
40083ba0:	99aa      	add.n	a9, a9, a10
40083ba2:	b80b      	addi.n	a11, a8, -1
40083ba4:	0a39a7        	bltu	a9, a10, 40083bb2 <__udivdi3+0x162>
40083ba7:	07b927        	bgeu	a9, a2, 40083bb2 <__udivdi3+0x162>
40083baa:	fec882        	addi	a8, a8, -2
40083bad:	99aa      	add.n	a9, a9, a10
40083baf:	000046        	j	40083bb4 <__udivdi3+0x164>
40083bb2:	0b8d      	mov.n	a8, a11
40083bb4:	c09920        	sub	a9, a9, a2
40083bb7:	e22950        	remu	a2, a9, a5
40083bba:	c29950        	quou	a9, a9, a5
40083bbd:	112200        	slli	a2, a2, 16
40083bc0:	f4c0c0        	extui	a12, a12, 0, 16
40083bc3:	824490        	mull	a4, a4, a9
40083bc6:	20c2c0        	or	a12, a2, a12
40083bc9:	0fbc47        	bgeu	a12, a4, 40083bdc <__udivdi3+0x18c>
40083bcc:	caca      	add.n	a12, a10, a12
40083bce:	ffc922        	addi	a2, a9, -1
40083bd1:	053ca7        	bltu	a12, a10, 40083bda <__udivdi3+0x18a>
40083bd4:	fec992        	addi	a9, a9, -2
40083bd7:	013c47        	bltu	a12, a4, 40083bdc <__udivdi3+0x18c>
40083bda:	029d      	mov.n	a9, a2
40083bdc:	118800        	slli	a8, a8, 16
40083bdf:	208890        	or	a8, a8, a9
40083be2:	003506        	j	40083cba <__udivdi3+0x26a>
40083be5:	030c      	movi.n	a3, 0
40083be7:	038d      	mov.n	a8, a3
40083be9:	02bd57        	bgeu	a13, a5, 40083bef <__udivdi3+0x19f>
40083bec:	003286        	j	40083cba <__udivdi3+0x26a>
40083bef:	40f5b0        	nsau	a11, a5
40083bf2:	179b37        	bne	a11, a3, 40083c0d <__udivdi3+0x1bd>
40083bf5:	180c      	movi.n	a8, 1
40083bf7:	0235d7        	bltu	a5, a13, 40083bfd <__udivdi3+0x1ad>
40083bfa:	208bb0        	or	a8, a11, a11
40083bfd:	130c      	movi.n	a3, 1
40083bff:	01b247        	bgeu	a2, a4, 40083c04 <__udivdi3+0x1b4>
40083c02:	030c      	movi.n	a3, 0
40083c04:	208830        	or	a8, a8, a3
40083c07:	748080        	extui	a8, a8, 0, 8
40083c0a:	002a86        	j	40083cb8 <__udivdi3+0x268>
40083c0d:	092c      	movi.n	a9, 32
40083c0f:	c099b0        	sub	a9, a9, a11
40083c12:	400900        	ssr	a9
40083c15:	913040        	srl	a3, a4
40083c18:	401b00        	ssl	a11
40083c1b:	a15500        	sll	a5, a5
40083c1e:	205350        	or	a5, a3, a5
40083c21:	400900        	ssr	a9
40083c24:	9180d0        	srl	a8, a13
40083c27:	401b00        	ssl	a11
40083c2a:	a13d00        	sll	a3, a13
40083c2d:	400900        	ssr	a9
40083c30:	919020        	srl	a9, a2
40083c33:	f5d050        	extui	a13, a5, 16, 16
40083c36:	203930        	or	a3, a9, a3
40083c39:	f4c050        	extui	a12, a5, 0, 16
40083c3c:	e298d0        	remu	a9, a8, a13
40083c3f:	c288d0        	quou	a8, a8, a13
40083c42:	119900        	slli	a9, a9, 16
40083c45:	f5e030        	extui	a14, a3, 16, 16
40083c48:	82ac80        	mull	a10, a12, a8
40083c4b:	2099e0        	or	a9, a9, a14
40083c4e:	401b00        	ssl	a11
40083c51:	a14400        	sll	a4, a4
40083c54:	14b9a7        	bgeu	a9, a10, 40083c6c <__udivdi3+0x21c>
40083c57:	995a      	add.n	a9, a9, a5
40083c59:	e80b      	addi.n	a14, a8, -1
40083c5b:	0bb9a7        	bgeu	a9, a10, 40083c6a <__udivdi3+0x21a>
40083c5e:	083957        	bltu	a9, a5, 40083c6a <__udivdi3+0x21a>
40083c61:	fec882        	addi	a8, a8, -2
40083c64:	995a      	add.n	a9, a9, a5
40083c66:	000086        	j	40083c6c <__udivdi3+0x21c>
40083c69:	0e8d00        	lsi	f0, a13, 56
40083c6c:	c0a9a0        	sub	a10, a9, a10
40083c6f:	e29ad0        	remu	a9, a10, a13
40083c72:	c2aad0        	quou	a10, a10, a13
40083c75:	119900        	slli	a9, a9, 16
40083c78:	f43030        	extui	a3, a3, 0, 16
40083c7b:	82cca0        	mull	a12, a12, a10
40083c7e:	203930        	or	a3, a9, a3
40083c81:	13b3c7        	bgeu	a3, a12, 40083c98 <__udivdi3+0x248>
40083c84:	335a      	add.n	a3, a3, a5
40083c86:	9a0b      	addi.n	a9, a10, -1
40083c88:	0a3357        	bltu	a3, a5, 40083c96 <__udivdi3+0x246>
40083c8b:	07b3c7        	bgeu	a3, a12, 40083c96 <__udivdi3+0x246>
40083c8e:	fecaa2        	addi	a10, a10, -2
40083c91:	335a      	add.n	a3, a3, a5
40083c93:	000046        	j	40083c98 <__udivdi3+0x248>
40083c96:	09ad      	mov.n	a10, a9
40083c98:	118800        	slli	a8, a8, 16
40083c9b:	2088a0        	or	a8, a8, a10
40083c9e:	825840        	mull	a5, a8, a4
40083ca1:	a24840        	muluh	a4, a8, a4
40083ca4:	c033c0        	sub	a3, a3, a12
40083ca7:	0b3347        	bltu	a3, a4, 40083cb6 <__udivdi3+0x266>
40083caa:	401b00        	ssl	a11
40083cad:	a12200        	sll	a2, a2
40083cb0:	04b257        	bgeu	a2, a5, 40083cb8 <__udivdi3+0x268>
40083cb3:	019347        	bne	a3, a4, 40083cb8 <__udivdi3+0x268>
40083cb6:	880b      	addi.n	a8, a8, -1
40083cb8:	030c      	movi.n	a3, 0
40083cba:	082d      	mov.n	a2, a8
40083cbc:	f01d      	retw.n
	...

40083cc0 <__umoddi3>:
40083cc0:	004136        	entry	a1, 32
40083cc3:	04bd      	mov.n	a11, a4
40083cc5:	208220        	or	a8, a2, a2
40083cc8:	039d      	mov.n	a9, a3
40083cca:	152556        	bnez	a5, 40083e20 <__umoddi3+0x160>
40083ccd:	71b347        	bgeu	a3, a4, 40083d42 <__umoddi3+0x82>
40083cd0:	40f4a0        	nsau	a10, a4
40083cd3:	01da16        	beqz	a10, 40083cf4 <__umoddi3+0x34>
40083cd6:	401a00        	ssl	a10
40083cd9:	a19300        	sll	a9, a3
40083cdc:	6030a0        	neg	a3, a10
40083cdf:	400300        	ssr	a3
40083ce2:	913020        	srl	a3, a2
40083ce5:	401a00        	ssl	a10
40083ce8:	a1b400        	sll	a11, a4
40083ceb:	209390        	or	a9, a3, a9
40083cee:	401a00        	ssl	a10
40083cf1:	a18200        	sll	a8, a2
40083cf4:	f540b0        	extui	a4, a11, 16, 16
40083cf7:	e23940        	remu	a3, a9, a4
40083cfa:	f420b0        	extui	a2, a11, 0, 16
40083cfd:	c29940        	quou	a9, a9, a4
40083d00:	113300        	slli	a3, a3, 16
40083d03:	f55080        	extui	a5, a8, 16, 16
40083d06:	829290        	mull	a9, a2, a9
40083d09:	203350        	or	a3, a3, a5
40083d0c:	09b397        	bgeu	a3, a9, 40083d19 <__umoddi3+0x59>
40083d0f:	33ba      	add.n	a3, a3, a11
40083d11:	0433b7        	bltu	a3, a11, 40083d19 <__umoddi3+0x59>
40083d14:	01b397        	bgeu	a3, a9, 40083d19 <__umoddi3+0x59>
40083d17:	33ba      	add.n	a3, a3, a11
40083d19:	c09390        	sub	a9, a3, a9
40083d1c:	e23940        	remu	a3, a9, a4
40083d1f:	c29940        	quou	a9, a9, a4
40083d22:	829290        	mull	a9, a2, a9
40083d25:	f48080        	extui	a8, a8, 0, 16
40083d28:	112300        	slli	a2, a3, 16
40083d2b:	208280        	or	a8, a2, a8
40083d2e:	0ab897        	bgeu	a8, a9, 40083d3c <__umoddi3+0x7c>
40083d31:	88ba      	add.n	a8, a8, a11
40083d33:	05b897        	bgeu	a8, a9, 40083d3c <__umoddi3+0x7c>
40083d36:	0238b7        	bltu	a8, a11, 40083d3c <__umoddi3+0x7c>
40083d39:	8088b0        	add	a8, a8, a11
40083d3c:	c08890        	sub	a8, a8, a9
40083d3f:	003406        	j	40083e13 <__umoddi3+0x153>
40083d42:	34cc      	bnez.n	a4, 40083d49 <__umoddi3+0x89>
40083d44:	140c      	movi.n	a4, 1
40083d46:	c2b4b0        	quou	a11, a4, a11
40083d49:	40fba0        	nsau	a10, a11
40083d4c:	5acc      	bnez.n	a10, 40083d55 <__umoddi3+0x95>
40083d4e:	c033b0        	sub	a3, a3, a11
40083d51:	001c86        	j	40083dc7 <__umoddi3+0x107>
40083d54:	042c00        	extui	a2, a0, 12, 1
40083d57:	c044a0        	sub	a4, a4, a10
40083d5a:	401a00        	ssl	a10
40083d5d:	a1bb00        	sll	a11, a11
40083d60:	400400        	ssr	a4
40083d63:	915030        	srl	a5, a3
40083d66:	f5c0b0        	extui	a12, a11, 16, 16
40083d69:	401a00        	ssl	a10
40083d6c:	a13300        	sll	a3, a3
40083d6f:	400400        	ssr	a4
40083d72:	914020        	srl	a4, a2
40083d75:	204430        	or	a4, a4, a3
40083d78:	401a00        	ssl	a10
40083d7b:	a18200        	sll	a8, a2
40083d7e:	f430b0        	extui	a3, a11, 0, 16
40083d81:	e225c0        	remu	a2, a5, a12
40083d84:	c255c0        	quou	a5, a5, a12
40083d87:	112200        	slli	a2, a2, 16
40083d8a:	f59040        	extui	a9, a4, 16, 16
40083d8d:	825350        	mull	a5, a3, a5
40083d90:	202290        	or	a2, a2, a9
40083d93:	09b257        	bgeu	a2, a5, 40083da0 <__umoddi3+0xe0>
40083d96:	22ba      	add.n	a2, a2, a11
40083d98:	0432b7        	bltu	a2, a11, 40083da0 <__umoddi3+0xe0>
40083d9b:	01b257        	bgeu	a2, a5, 40083da0 <__umoddi3+0xe0>
40083d9e:	22ba      	add.n	a2, a2, a11
40083da0:	c09250        	sub	a9, a2, a5
40083da3:	e229c0        	remu	a2, a9, a12
40083da6:	c299c0        	quou	a9, a9, a12
40083da9:	829390        	mull	a9, a3, a9
40083dac:	112200        	slli	a2, a2, 16
40083daf:	f43040        	extui	a3, a4, 0, 16
40083db2:	203230        	or	a3, a2, a3
40083db5:	0bb397        	bgeu	a3, a9, 40083dc4 <__umoddi3+0x104>
40083db8:	8033b0        	add	a3, a3, a11
40083dbb:	05b397        	bgeu	a3, a9, 40083dc4 <__umoddi3+0x104>
40083dbe:	0233b7        	bltu	a3, a11, 40083dc4 <__umoddi3+0x104>
40083dc1:	8033b0        	add	a3, a3, a11
40083dc4:	c03390        	sub	a3, a3, a9
40083dc7:	f540b0        	extui	a4, a11, 16, 16
40083dca:	e29340        	remu	a9, a3, a4
40083dcd:	f420b0        	extui	a2, a11, 0, 16
40083dd0:	c23340        	quou	a3, a3, a4
40083dd3:	119900        	slli	a9, a9, 16
40083dd6:	f55080        	extui	a5, a8, 16, 16
40083dd9:	823230        	mull	a3, a2, a3
40083ddc:	209950        	or	a9, a9, a5
40083ddf:	09b937        	bgeu	a9, a3, 40083dec <__umoddi3+0x12c>
40083de2:	99ba      	add.n	a9, a9, a11
40083de4:	0439b7        	bltu	a9, a11, 40083dec <__umoddi3+0x12c>
40083de7:	01b937        	bgeu	a9, a3, 40083dec <__umoddi3+0x12c>
40083dea:	99ba      	add.n	a9, a9, a11
40083dec:	c03930        	sub	a3, a9, a3
40083def:	e25340        	remu	a5, a3, a4
40083df2:	c23340        	quou	a3, a3, a4
40083df5:	823230        	mull	a3, a2, a3
40083df8:	f48080        	extui	a8, a8, 0, 16
40083dfb:	112500        	slli	a2, a5, 16
40083dfe:	208280        	or	a8, a2, a8
40083e01:	0bb837        	bgeu	a8, a3, 40083e10 <__umoddi3+0x150>
40083e04:	8088b0        	add	a8, a8, a11
40083e07:	05b837        	bgeu	a8, a3, 40083e10 <__umoddi3+0x150>
40083e0a:	0238b7        	bltu	a8, a11, 40083e10 <__umoddi3+0x150>
40083e0d:	8088b0        	add	a8, a8, a11
40083e10:	c08830        	sub	a8, a8, a3
40083e13:	400a00        	ssr	a10
40083e16:	912080        	srl	a2, a8
40083e19:	030c      	movi.n	a3, 0
40083e1b:	004446        	j	40083f30 <__umoddi3+0x270>
40083e1e:	570000        	lsi	f0, a0, 0x15c
40083e21:	4602b3        	lsi	f11, a2, 0x118
40083e24:	c00042        	l8ui	a4, a0, 192
40083e27:	dc40f5        	call12	40060234 <esp32_rom_gpio_matrix_out+0x56328>
40083e2a:	37dc      	bnez.n	a7, 40083e41 <__umoddi3+0x181>
40083e2c:	470235        	call12	400cae50 <_iram_text_end+0x46f1e>
40083e2f:	401132        	l16ui	a3, a1, 128
40083e32:	50c082        	addi	a8, a0, 80
40083e35:	92c033        	ssip	f3, a0, 0x248
40083e38:	8701a0        	lsi	f10, a1, 0x21c
40083e3b:	920232        	l8ui	a3, a2, 146
40083e3e:	9000a0        	addx2	a0, a0, a10
40083e41:	2dc093        	ssip	f9, a0, 180
40083e44:	3d08      	l32i.n	a0, a13, 12
40083e46:	4609      	s32i.n	a0, a6, 16
40083e48:	0039      	s32i.n	a3, a0, 0
40083e4a:	092c      	movi.n	a9, 32
40083e4c:	c099c0        	sub	a9, a9, a12
40083e4f:	400900        	ssr	a9
40083e52:	91a040        	srl	a10, a4
40083e55:	401c00        	ssl	a12
40083e58:	a15500        	sll	a5, a5
40083e5b:	205a50        	or	a5, a10, a5
40083e5e:	400900        	ssr	a9
40083e61:	91d020        	srl	a13, a2
40083e64:	400900        	ssr	a9
40083e67:	91a030        	srl	a10, a3
40083e6a:	f5e050        	extui	a14, a5, 16, 16
40083e6d:	401c00        	ssl	a12
40083e70:	a13300        	sll	a3, a3
40083e73:	20dd30        	or	a13, a13, a3
40083e76:	e2bae0        	remu	a11, a10, a14
40083e79:	f43050        	extui	a3, a5, 0, 16
40083e7c:	c2aae0        	quou	a10, a10, a14
40083e7f:	11bb00        	slli	a11, a11, 16
40083e82:	f5f0d0        	extui	a15, a13, 16, 16
40083e85:	8283a0        	mull	a8, a3, a10
40083e88:	20bbf0        	or	a11, a11, a15
40083e8b:	401c00        	ssl	a12
40083e8e:	a14400        	sll	a4, a4
40083e91:	401c00        	ssl	a12
40083e94:	a12200        	sll	a2, a2
40083e97:	15bb87        	bgeu	a11, a8, 40083eb0 <__umoddi3+0x1f0>
40083e9a:	bb5a      	add.n	a11, a11, a5
40083e9c:	fa0b      	addi.n	a15, a10, -1
40083e9e:	0c3b57        	bltu	a11, a5, 40083eae <__umoddi3+0x1ee>
40083ea1:	09bb87        	bgeu	a11, a8, 40083eae <__umoddi3+0x1ee>
40083ea4:	fecaa2        	addi	a10, a10, -2
40083ea7:	bb5a      	add.n	a11, a11, a5
40083ea9:	0000c6        	j	40083eb0 <__umoddi3+0x1f0>
40083eac:	ad0000        	lsi	f0, a0, 0x2b4
40083eaf:	0f          	.byte 0xf
40083eb0:	c0bb80        	sub	a11, a11, a8
40083eb3:	e28be0        	remu	a8, a11, a14
40083eb6:	c2bbe0        	quou	a11, a11, a14
40083eb9:	82e3b0        	mull	a14, a3, a11
40083ebc:	118800        	slli	a8, a8, 16
40083ebf:	f430d0        	extui	a3, a13, 0, 16
40083ec2:	203830        	or	a3, a8, a3
40083ec5:	13b3e7        	bgeu	a3, a14, 40083edc <__umoddi3+0x21c>
40083ec8:	335a      	add.n	a3, a3, a5
40083eca:	8b0b      	addi.n	a8, a11, -1
40083ecc:	0ab3e7        	bgeu	a3, a14, 40083eda <__umoddi3+0x21a>
40083ecf:	073357        	bltu	a3, a5, 40083eda <__umoddi3+0x21a>
40083ed2:	fecbb2        	addi	a11, a11, -2
40083ed5:	335a      	add.n	a3, a3, a5
40083ed7:	000046        	j	40083edc <__umoddi3+0x21c>
40083eda:	08bd      	mov.n	a11, a8
40083edc:	11aa00        	slli	a10, a10, 16
40083edf:	20aab0        	or	a10, a10, a11
40083ee2:	82da40        	mull	a13, a10, a4
40083ee5:	a2aa40        	muluh	a10, a10, a4
40083ee8:	c033e0        	sub	a3, a3, a14
40083eeb:	0abd      	mov.n	a11, a10
40083eed:	0d8d      	mov.n	a8, a13
40083eef:	0533a7        	bltu	a3, a10, 40083ef8 <__umoddi3+0x238>
40083ef2:	1493a7        	bne	a3, a10, 40083f0a <__umoddi3+0x24a>
40083ef5:	11b2d7        	bgeu	a2, a13, 40083f0a <__umoddi3+0x24a>
40083ef8:	c04d40        	sub	a4, a13, a4
40083efb:	c0aa50        	sub	a10, a10, a5
40083efe:	1b0c      	movi.n	a11, 1
40083f00:	013d47        	bltu	a13, a4, 40083f05 <__umoddi3+0x245>
40083f03:	0b0c      	movi.n	a11, 0
40083f05:	c0bab0        	sub	a11, a10, a11
40083f08:	048d      	mov.n	a8, a4
40083f0a:	c04280        	sub	a4, a2, a8
40083f0d:	c033b0        	sub	a3, a3, a11
40083f10:	150c      	movi.n	a5, 1
40083f12:	023247        	bltu	a2, a4, 40083f18 <__umoddi3+0x258>
40083f15:	00a052        	movi	a5, 0
40083f18:	c03350        	sub	a3, a3, a5
40083f1b:	401900        	ssl	a9
40083f1e:	a18300        	sll	a8, a3
40083f21:	400c00        	ssr	a12
40083f24:	912040        	srl	a2, a4
40083f27:	202820        	or	a2, a8, a2
40083f2a:	400c00        	ssr	a12
40083f2d:	913030        	srl	a3, a3
40083f30:	f01d      	retw.n
